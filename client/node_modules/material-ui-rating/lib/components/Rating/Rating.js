"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _IconButton = _interopRequireDefault(require("@material-ui/core/IconButton"));

var _orange = _interopRequireDefault(require("@material-ui/core/colors/orange"));

var _grey = _interopRequireDefault(require("@material-ui/core/colors/grey"));

var _styles = require("@material-ui/core/styles");

var _Star = _interopRequireDefault(require("@material-ui/icons/Star"));

var _StarBorder = _interopRequireDefault(require("@material-ui/icons/StarBorder"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var noPointerEvents = {
  pointerEvents: 'none'
};

var styles = function styles(theme) {
  return {
    root: {
      direction: theme.direction
    },
    iconButton: {
      padding: 8,
      marginLeft: -8,
      transform: theme.direction === 'rtl' ? 'scaleX(-1)' : 'none',
      '&:first-child': {
        marginLeft: 0
      }
    },
    icon: {},
    disabled: noPointerEvents,
    readOnly: noPointerEvents
  };
};
/**
 * Material design star rating component for your star application.
 * @see [Card UI controls](https://material.io/guidelines/components/cards.html#cards-actions)
 */


var Rating =
/*#__PURE__*/
function (_Component) {
  _inherits(Rating, _Component);

  function Rating(props) {
    var _this;

    _classCallCheck(this, Rating);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Rating).call(this, props));
    _this.state = {
      hoverValue: props.value
    };
    return _this;
  }

  _createClass(Rating, [{
    key: "getIcon",
    value: function getIcon(type, index) {
      var _this$props = this.props,
          classes = _this$props.classes,
          disabled = _this$props.disabled,
          iconNormal = _this$props.iconNormal,
          iconNormalRenderer = _this$props.iconNormalRenderer,
          iconHovered = _this$props.iconHovered,
          iconHoveredRenderer = _this$props.iconHoveredRenderer,
          iconFilled = _this$props.iconFilled,
          iconFilledRenderer = _this$props.iconFilledRenderer;
      var iconProps = {
        className: classes.icon
      };

      if (disabled) {
        iconProps.htmlColor = _grey["default"][300];
      }

      switch (type) {
        case 'normal':
          return iconNormalRenderer ? iconNormalRenderer(_objectSpread({}, this.props, {
            index: index
          })) : _react["default"].cloneElement(iconNormal, iconProps);

        case 'hovered':
          return iconHoveredRenderer ? iconHoveredRenderer(_objectSpread({}, this.props, {
            index: index
          })) : _react["default"].cloneElement(iconHovered, iconProps);

        case 'filled':
          return iconFilledRenderer ? iconFilledRenderer(_objectSpread({}, this.props, {
            index: index
          })) : _react["default"].cloneElement(iconFilled, iconProps);
      }
    }
  }, {
    key: "renderIcon",
    value: function renderIcon(i) {
      var _this$props2 = this.props,
          value = _this$props2.value,
          disableHover = _this$props2.disableHover;
      var rest = value >= i - 1 && value < i ? value - i + 1 : 0;
      var filled = rest > 0 || i <= value;
      var hovered = rest > 0 || i <= Math.floor(this.state.hoverValue);

      if (rest > 0) {
        return _react["default"].createElement(_react["default"].Fragment, null, _react["default"].cloneElement(Math.floor(this.state.hoverValue) < value ? this.getIcon('normal', i) : this.getIcon('hovered', i), {
          style: {
            position: 'absolute'
          }
        }), _react["default"].cloneElement(this.state.hoverValue < value ? this.getIcon('hovered', i) : this.getIcon('filled', i), {
          style: {
            clipPath: "polygon(0% 0%, ".concat(rest * 100, "% 0%, ").concat(rest * 100, "% 100%, 0% 100%)")
          }
        }));
      }

      if (!disableHover && (hovered && !filled || !hovered && filled)) {
        return this.getIcon('hovered', i);
      } else if (filled) {
        return this.getIcon('filled', i);
      } else {
        return this.getIcon('normal', i);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props3 = this.props,
          className = _this$props3.className,
          classes = _this$props3.classes,
          Component = _this$props3.component,
          disabled = _this$props3.disabled,
          disableHover = _this$props3.disableHover,
          iconFilled = _this$props3.iconFilled,
          iconFilledRenderer = _this$props3.iconFilledRenderer,
          iconHovered = _this$props3.iconHovered,
          iconHoveredRenderer = _this$props3.iconHoveredRenderer,
          iconNormal = _this$props3.iconNormal,
          iconNormalRenderer = _this$props3.iconNormalRenderer,
          max = _this$props3.max,
          onChange = _this$props3.onChange,
          readOnly = _this$props3.readOnly,
          value = _this$props3.value,
          other = _objectWithoutProperties(_this$props3, ["className", "classes", "component", "disabled", "disableHover", "iconFilled", "iconFilledRenderer", "iconHovered", "iconHoveredRenderer", "iconNormal", "iconNormalRenderer", "max", "onChange", "readOnly", "value"]);

      var rating = [];

      var _loop = function _loop(i) {
        var _classNames;

        rating.push(_react["default"].createElement(_IconButton["default"], {
          key: i,
          className: (0, _classnames["default"])(classes.iconButton, (_classNames = {}, _defineProperty(_classNames, classes.disabled, disabled), _defineProperty(_classNames, classes.readOnly, readOnly), _classNames)),
          disabled: disabled,
          onMouseEnter: function onMouseEnter() {
            return _this2.setState({
              hoverValue: i
            });
          },
          onMouseLeave: function onMouseLeave() {
            return _this2.setState({
              hoverValue: value
            });
          },
          onClick: function onClick() {
            if (!readOnly && onChange) {
              onChange(i);
            }
          }
        }, _this2.renderIcon(i)));
      };

      for (var i = 1; i <= max; i++) {
        _loop(i);
      }

      return _react["default"].createElement(Component, _extends({
        className: (0, _classnames["default"])(className, classes.root)
      }, other), rating);
    }
  }]);

  return Rating;
}(_react.Component);

Rating.defaultProps = {
  component: 'div',
  disabled: false,
  disableHover: false,
  iconHovered: _react["default"].createElement(_StarBorder["default"], {
    htmlColor: _orange["default"][500]
  }),
  iconFilled: _react["default"].createElement(_Star["default"], {
    htmlColor: _orange["default"][500]
  }),
  iconNormal: _react["default"].createElement(_StarBorder["default"], {
    htmlColor: _grey["default"][300]
  }),
  max: 5,
  readOnly: false,
  value: 0
};
Rating.propTypes = {
  /** CSS classname to apply to the root component. */
  className: _propTypes["default"].string,

  /** Useful to extend the style applied to components. See the repository README for the accepted keys. */
  classes: _propTypes["default"].object.isRequired,

  /** The component used for the root node. Either a string to use a DOM element or a component. */
  component: _propTypes["default"].elementType,

  /** Disables the rating and gray it out if set to true. */
  disabled: _propTypes["default"].bool,

  /** Disable hover effects if set to true. */
  disableHover: _propTypes["default"].bool,

  /** This is the icon to be used as an icon in value range. */
  iconFilled: _propTypes["default"].node,

  /** Overrides filled icon renderer. */
  iconFilledRenderer: _propTypes["default"].func,

  /** This is the icon to be used as an hovered icon. */
  iconHovered: _propTypes["default"].node,

  /** Overrides hovered icon renderer. */
  iconHoveredRenderer: _propTypes["default"].func,

  /** This is the icon to be used as an normal icon. */
  iconNormal: _propTypes["default"].node,

  /** Overrides normal icon renderer. */
  iconNormalRenderer: _propTypes["default"].func,

  /** The max value of the rating bar. */
  max: _propTypes["default"].number,

  /** Fired when a value is clicked. */
  onChange: _propTypes["default"].func,

  /** Don't allow input if set to true. */
  readOnly: _propTypes["default"].bool,

  /** The value of the rating bar. */
  value: _propTypes["default"].number
};

var _default = (0, _styles.withStyles)(styles)(Rating);

exports["default"] = _default;