{"ast":null,"code":"/**\n *\n * @namespace faker.lorem\n */\nvar Lorem = function Lorem(faker) {\n  var self = this;\n  var Helpers = faker.helpers;\n  /**\n   * word\n   *\n   * @method faker.lorem.word\n   * @param {number} num\n   */\n\n  self.word = function (num) {\n    return faker.random.arrayElement(faker.definitions.lorem.words);\n  };\n  /**\n   * generates a space separated list of words\n   *\n   * @method faker.lorem.words\n   * @param {number} num number of words, defaults to 3\n   */\n\n\n  self.words = function (num) {\n    if (typeof num == 'undefined') {\n      num = 3;\n    }\n\n    var words = [];\n\n    for (var i = 0; i < num; i++) {\n      words.push(faker.lorem.word());\n    }\n\n    return words.join(' ');\n  };\n  /**\n   * sentence\n   *\n   * @method faker.lorem.sentence\n   * @param {number} wordCount defaults to a random number between 3 and 10\n   * @param {number} range\n   */\n\n\n  self.sentence = function (wordCount, range) {\n    if (typeof wordCount == 'undefined') {\n      wordCount = faker.random.number({\n        min: 3,\n        max: 10\n      });\n    } // if (typeof range == 'undefined') { range = 7; }\n    // strange issue with the node_min_test failing for captialize, please fix and add faker.lorem.back\n    //return  faker.lorem.words(wordCount + Helpers.randomNumber(range)).join(' ').capitalize();\n\n\n    var sentence = faker.lorem.words(wordCount);\n    return sentence.charAt(0).toUpperCase() + sentence.slice(1) + '.';\n  };\n  /**\n   * slug\n   *\n   * @method faker.lorem.slug\n   * @param {number} wordCount number of words, defaults to 3\n   */\n\n\n  self.slug = function (wordCount) {\n    var words = faker.lorem.words(wordCount);\n    return Helpers.slugify(words);\n  };\n  /**\n   * sentences\n   *\n   * @method faker.lorem.sentences\n   * @param {number} sentenceCount defautls to a random number between 2 and 6\n   * @param {string} separator defaults to `' '`\n   */\n\n\n  self.sentences = function (sentenceCount, separator) {\n    if (typeof sentenceCount === 'undefined') {\n      sentenceCount = faker.random.number({\n        min: 2,\n        max: 6\n      });\n    }\n\n    if (typeof separator == 'undefined') {\n      separator = \" \";\n    }\n\n    var sentences = [];\n\n    for (sentenceCount; sentenceCount > 0; sentenceCount--) {\n      sentences.push(faker.lorem.sentence());\n    }\n\n    return sentences.join(separator);\n  };\n  /**\n   * paragraph\n   *\n   * @method faker.lorem.paragraph\n   * @param {number} sentenceCount defaults to 3\n   */\n\n\n  self.paragraph = function (sentenceCount) {\n    if (typeof sentenceCount == 'undefined') {\n      sentenceCount = 3;\n    }\n\n    return faker.lorem.sentences(sentenceCount + faker.random.number(3));\n  };\n  /**\n   * paragraphs\n   *\n   * @method faker.lorem.paragraphs\n   * @param {number} paragraphCount defaults to 3\n   * @param {string} separator defaults to `'\\n \\r'`\n   */\n\n\n  self.paragraphs = function (paragraphCount, separator) {\n    if (typeof separator === \"undefined\") {\n      separator = \"\\n \\r\";\n    }\n\n    if (typeof paragraphCount == 'undefined') {\n      paragraphCount = 3;\n    }\n\n    var paragraphs = [];\n\n    for (paragraphCount; paragraphCount > 0; paragraphCount--) {\n      paragraphs.push(faker.lorem.paragraph());\n    }\n\n    return paragraphs.join(separator);\n  };\n  /**\n   * returns random text based on a random lorem method\n   *\n   * @method faker.lorem.text\n   * @param {number} times\n   */\n\n\n  self.text = function loremText(times) {\n    var loremMethods = ['lorem.word', 'lorem.words', 'lorem.sentence', 'lorem.sentences', 'lorem.paragraph', 'lorem.paragraphs', 'lorem.lines'];\n    var randomLoremMethod = faker.random.arrayElement(loremMethods);\n    return faker.fake('{{' + randomLoremMethod + '}}');\n  };\n  /**\n   * returns lines of lorem separated by `'\\n'`\n   *\n   * @method faker.lorem.lines\n   * @param {number} lineCount defaults to a random number between 1 and 5\n   */\n\n\n  self.lines = function lines(lineCount) {\n    if (typeof lineCount === 'undefined') {\n      lineCount = faker.random.number({\n        min: 1,\n        max: 5\n      });\n    }\n\n    return faker.lorem.sentences(lineCount, '\\n');\n  };\n\n  return self;\n};\n\nmodule[\"exports\"] = Lorem;","map":{"version":3,"sources":["C:/Users/david/react/RateCourses/client/node_modules/faker/lib/lorem.js"],"names":["Lorem","faker","self","Helpers","helpers","word","num","random","arrayElement","definitions","lorem","words","i","push","join","sentence","wordCount","range","number","min","max","charAt","toUpperCase","slice","slug","slugify","sentences","sentenceCount","separator","paragraph","paragraphs","paragraphCount","text","loremText","times","loremMethods","randomLoremMethod","fake","lines","lineCount","module"],"mappings":"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","sourcesContent":["\n/**\n *\n * @namespace faker.lorem\n */\nvar Lorem = function (faker) {\n  var self = this;\n  var Helpers = faker.helpers;\n\n  /**\n   * word\n   *\n   * @method faker.lorem.word\n   * @param {number} num\n   */\n  self.word = function (num) {\n    return faker.random.arrayElement(faker.definitions.lorem.words);\n  };\n\n  /**\n   * generates a space separated list of words\n   *\n   * @method faker.lorem.words\n   * @param {number} num number of words, defaults to 3\n   */\n  self.words = function (num) {\n      if (typeof num == 'undefined') { num = 3; }\n      var words = [];\n      for (var i = 0; i < num; i++) {\n        words.push(faker.lorem.word());\n      }\n      return words.join(' ');\n  };\n\n  /**\n   * sentence\n   *\n   * @method faker.lorem.sentence\n   * @param {number} wordCount defaults to a random number between 3 and 10\n   * @param {number} range\n   */\n  self.sentence = function (wordCount, range) {\n      if (typeof wordCount == 'undefined') { wordCount = faker.random.number({ min: 3, max: 10 }); }\n      // if (typeof range == 'undefined') { range = 7; }\n\n      // strange issue with the node_min_test failing for captialize, please fix and add faker.lorem.back\n      //return  faker.lorem.words(wordCount + Helpers.randomNumber(range)).join(' ').capitalize();\n\n      var sentence = faker.lorem.words(wordCount);\n      return sentence.charAt(0).toUpperCase() + sentence.slice(1) + '.';\n  };\n\n  /**\n   * slug\n   *\n   * @method faker.lorem.slug\n   * @param {number} wordCount number of words, defaults to 3\n   */\n  self.slug = function (wordCount) {\n      var words = faker.lorem.words(wordCount);\n      return Helpers.slugify(words);\n  };\n\n  /**\n   * sentences\n   *\n   * @method faker.lorem.sentences\n   * @param {number} sentenceCount defautls to a random number between 2 and 6\n   * @param {string} separator defaults to `' '`\n   */\n  self.sentences = function (sentenceCount, separator) {\n      if (typeof sentenceCount === 'undefined') { sentenceCount = faker.random.number({ min: 2, max: 6 });}\n      if (typeof separator == 'undefined') { separator = \" \"; }\n      var sentences = [];\n      for (sentenceCount; sentenceCount > 0; sentenceCount--) {\n        sentences.push(faker.lorem.sentence());\n      }\n      return sentences.join(separator);\n  };\n\n  /**\n   * paragraph\n   *\n   * @method faker.lorem.paragraph\n   * @param {number} sentenceCount defaults to 3\n   */\n  self.paragraph = function (sentenceCount) {\n      if (typeof sentenceCount == 'undefined') { sentenceCount = 3; }\n      return faker.lorem.sentences(sentenceCount + faker.random.number(3));\n  };\n\n  /**\n   * paragraphs\n   *\n   * @method faker.lorem.paragraphs\n   * @param {number} paragraphCount defaults to 3\n   * @param {string} separator defaults to `'\\n \\r'`\n   */\n  self.paragraphs = function (paragraphCount, separator) {\n    if (typeof separator === \"undefined\") {\n      separator = \"\\n \\r\";\n    }\n    if (typeof paragraphCount == 'undefined') { paragraphCount = 3; }\n    var paragraphs = [];\n    for (paragraphCount; paragraphCount > 0; paragraphCount--) {\n        paragraphs.push(faker.lorem.paragraph());\n    }\n    return paragraphs.join(separator);\n  }\n\n  /**\n   * returns random text based on a random lorem method\n   *\n   * @method faker.lorem.text\n   * @param {number} times\n   */\n  self.text = function loremText (times) {\n    var loremMethods = ['lorem.word', 'lorem.words', 'lorem.sentence', 'lorem.sentences', 'lorem.paragraph', 'lorem.paragraphs', 'lorem.lines'];\n    var randomLoremMethod = faker.random.arrayElement(loremMethods);\n    return faker.fake('{{' + randomLoremMethod + '}}');\n  };\n\n  /**\n   * returns lines of lorem separated by `'\\n'`\n   *\n   * @method faker.lorem.lines\n   * @param {number} lineCount defaults to a random number between 1 and 5\n   */\n  self.lines = function lines (lineCount) {\n    if (typeof lineCount === 'undefined') { lineCount = faker.random.number({ min: 1, max: 5 });}\n    return faker.lorem.sentences(lineCount, '\\n')\n  };\n\n  return self;\n};\n\n\nmodule[\"exports\"] = Lorem;\n"]},"metadata":{},"sourceType":"script"}