{"ast":null,"code":"// generates fake data for many computer systems properties\n\n/**\n *\n * @namespace faker.system\n */\nfunction System(faker) {\n  /**\n   * generates a file name with extension or optional type\n   *\n   * @method faker.system.fileName\n   * @param {string} ext\n   * @param {string} type\n   */\n  this.fileName = function (ext, type) {\n    var str = faker.fake(\"{{random.words}}.{{system.fileExt}}\");\n    str = str.replace(/ /g, '_');\n    str = str.replace(/\\,/g, '_');\n    str = str.replace(/\\-/g, '_');\n    str = str.replace(/\\\\/g, '_');\n    str = str.replace(/\\//g, '_');\n    str = str.toLowerCase();\n    return str;\n  };\n  /**\n   * commonFileName\n   *\n   * @method faker.system.commonFileName\n   * @param {string} ext\n   * @param {string} type\n   */\n\n\n  this.commonFileName = function (ext, type) {\n    var str = faker.random.words() + \".\" + (ext || faker.system.commonFileExt());\n    str = str.replace(/ /g, '_');\n    str = str.replace(/\\,/g, '_');\n    str = str.replace(/\\-/g, '_');\n    str = str.replace(/\\\\/g, '_');\n    str = str.replace(/\\//g, '_');\n    str = str.toLowerCase();\n    return str;\n  };\n  /**\n   * mimeType\n   *\n   * @method faker.system.mimeType\n   */\n\n\n  this.mimeType = function () {\n    return faker.random.arrayElement(Object.keys(faker.definitions.system.mimeTypes));\n  };\n  /**\n   * returns a commonly used file type\n   *\n   * @method faker.system.commonFileType\n   */\n\n\n  this.commonFileType = function () {\n    var types = ['video', 'audio', 'image', 'text', 'application'];\n    return faker.random.arrayElement(types);\n  };\n  /**\n   * returns a commonly used file extension based on optional type\n   *\n   * @method faker.system.commonFileExt\n   * @param {string} type\n   */\n\n\n  this.commonFileExt = function (type) {\n    var types = ['application/pdf', 'audio/mpeg', 'audio/wav', 'image/png', 'image/jpeg', 'image/gif', 'video/mp4', 'video/mpeg', 'text/html'];\n    return faker.system.fileExt(faker.random.arrayElement(types));\n  };\n  /**\n   * returns any file type available as mime-type\n   *\n   * @method faker.system.fileType\n   */\n\n\n  this.fileType = function () {\n    var types = [];\n    var mimes = faker.definitions.system.mimeTypes;\n    Object.keys(mimes).forEach(function (m) {\n      var parts = m.split('/');\n\n      if (types.indexOf(parts[0]) === -1) {\n        types.push(parts[0]);\n      }\n    });\n    return faker.random.arrayElement(types);\n  };\n  /**\n   * fileExt\n   *\n   * @method faker.system.fileExt\n   * @param {string} mimeType\n   */\n\n\n  this.fileExt = function (mimeType) {\n    var exts = [];\n    var mimes = faker.definitions.system.mimeTypes; // get specific ext by mime-type\n\n    if (typeof mimes[mimeType] === \"object\") {\n      return faker.random.arrayElement(mimes[mimeType].extensions);\n    } // reduce mime-types to those with file-extensions\n\n\n    Object.keys(mimes).forEach(function (m) {\n      if (mimes[m].extensions instanceof Array) {\n        mimes[m].extensions.forEach(function (ext) {\n          exts.push(ext);\n        });\n      }\n    });\n    return faker.random.arrayElement(exts);\n  };\n  /**\n   * not yet implemented\n   *\n   * @method faker.system.directoryPath\n   */\n\n\n  this.directoryPath = function () {// TODO\n  };\n  /**\n   * not yet implemented\n   *\n   * @method faker.system.filePath\n   */\n\n\n  this.filePath = function () {// TODO\n  };\n  /**\n   * semver\n   *\n   * @method faker.system.semver\n   */\n\n\n  this.semver = function () {\n    return [faker.random.number(9), faker.random.number(9), faker.random.number(9)].join('.');\n  };\n}\n\nmodule['exports'] = System;","map":{"version":3,"sources":["C:/Users/david/react/RateCourses/client/node_modules/faker/lib/system.js"],"names":["System","faker","fileName","ext","type","str","fake","replace","toLowerCase","commonFileName","random","words","system","commonFileExt","mimeType","arrayElement","Object","keys","definitions","mimeTypes","commonFileType","types","fileExt","fileType","mimes","forEach","m","parts","split","indexOf","push","exts","extensions","Array","directoryPath","filePath","semver","number","join","module"],"mappings":"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","sourcesContent":["// generates fake data for many computer systems properties\n\n/**\n *\n * @namespace faker.system\n */\nfunction System (faker) {\n\n  /**\n   * generates a file name with extension or optional type\n   *\n   * @method faker.system.fileName\n   * @param {string} ext\n   * @param {string} type\n   */\n  this.fileName = function (ext, type) {\n    var str = faker.fake(\"{{random.words}}.{{system.fileExt}}\");\n    str = str.replace(/ /g, '_');\n    str = str.replace(/\\,/g, '_');\n    str = str.replace(/\\-/g, '_');\n    str = str.replace(/\\\\/g, '_');\n    str = str.replace(/\\//g, '_');\n    str = str.toLowerCase();\n    return str;\n  };\n\n  /**\n   * commonFileName\n   *\n   * @method faker.system.commonFileName\n   * @param {string} ext\n   * @param {string} type\n   */\n  this.commonFileName = function (ext, type) {\n    var str = faker.random.words() + \".\" + (ext || faker.system.commonFileExt());\n    str = str.replace(/ /g, '_');\n    str = str.replace(/\\,/g, '_');\n    str = str.replace(/\\-/g, '_');\n    str = str.replace(/\\\\/g, '_');\n    str = str.replace(/\\//g, '_');\n    str = str.toLowerCase();\n    return str;\n  };\n\n  /**\n   * mimeType\n   *\n   * @method faker.system.mimeType\n   */\n  this.mimeType = function () {\n    return faker.random.arrayElement(Object.keys(faker.definitions.system.mimeTypes));\n  };\n\n  /**\n   * returns a commonly used file type\n   *\n   * @method faker.system.commonFileType\n   */\n  this.commonFileType = function () {\n    var types = ['video', 'audio', 'image', 'text', 'application'];\n    return faker.random.arrayElement(types)\n  };\n\n  /**\n   * returns a commonly used file extension based on optional type\n   *\n   * @method faker.system.commonFileExt\n   * @param {string} type\n   */\n  this.commonFileExt = function (type) {\n    var types = [\n      'application/pdf',\n      'audio/mpeg',\n      'audio/wav',\n      'image/png',\n      'image/jpeg',\n      'image/gif',\n      'video/mp4',\n      'video/mpeg',\n      'text/html'\n    ];\n    return faker.system.fileExt(faker.random.arrayElement(types));\n  };\n\n\n  /**\n   * returns any file type available as mime-type\n   *\n   * @method faker.system.fileType\n   */\n  this.fileType = function () {\n    var types = [];\n    var mimes = faker.definitions.system.mimeTypes;\n    Object.keys(mimes).forEach(function(m){\n      var parts = m.split('/');\n      if (types.indexOf(parts[0]) === -1) {\n        types.push(parts[0]);\n      }\n    });\n    return faker.random.arrayElement(types);\n  };\n\n  /**\n   * fileExt\n   *\n   * @method faker.system.fileExt\n   * @param {string} mimeType\n   */\n  this.fileExt = function (mimeType) {\n    var exts = [];\n    var mimes = faker.definitions.system.mimeTypes;\n\n    // get specific ext by mime-type\n    if (typeof mimes[mimeType] === \"object\") {\n      return faker.random.arrayElement(mimes[mimeType].extensions);\n    }\n\n    // reduce mime-types to those with file-extensions\n    Object.keys(mimes).forEach(function(m){\n      if (mimes[m].extensions instanceof Array) {\n        mimes[m].extensions.forEach(function(ext){\n          exts.push(ext)\n        });\n      }\n    });\n    return faker.random.arrayElement(exts);\n  };\n\n  /**\n   * not yet implemented\n   *\n   * @method faker.system.directoryPath\n   */\n  this.directoryPath = function () {\n    // TODO\n  };\n\n  /**\n   * not yet implemented\n   *\n   * @method faker.system.filePath\n   */\n  this.filePath = function () {\n    // TODO\n  };\n\n  /**\n   * semver\n   *\n   * @method faker.system.semver\n   */\n  this.semver = function () {\n      return [faker.random.number(9),\n              faker.random.number(9),\n              faker.random.number(9)].join('.');\n  }\n\n}\n\nmodule['exports'] = System;\n"]},"metadata":{},"sourceType":"script"}