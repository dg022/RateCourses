{"ast":null,"code":"var random_ua = require('../vendor/user-agent');\n/**\n *\n * @namespace faker.internet\n */\n\n\nvar Internet = function Internet(faker) {\n  var self = this;\n  /**\n   * avatar\n   *\n   * @method faker.internet.avatar\n   */\n\n  self.avatar = function () {\n    return faker.random.arrayElement(faker.definitions.internet.avatar_uri);\n  };\n\n  self.avatar.schema = {\n    \"description\": \"Generates a URL for an avatar.\",\n    \"sampleResults\": [\"https://s3.amazonaws.com/uifaces/faces/twitter/igorgarybaldi/128.jpg\"]\n  };\n  /**\n   * email\n   *\n   * @method faker.internet.email\n   * @param {string} firstName\n   * @param {string} lastName\n   * @param {string} provider\n   */\n\n  self.email = function (firstName, lastName, provider) {\n    provider = provider || faker.random.arrayElement(faker.definitions.internet.free_email);\n    return faker.helpers.slugify(faker.internet.userName(firstName, lastName)) + \"@\" + provider;\n  };\n\n  self.email.schema = {\n    \"description\": \"Generates a valid email address based on optional input criteria\",\n    \"sampleResults\": [\"foo.bar@gmail.com\"],\n    \"properties\": {\n      \"firstName\": {\n        \"type\": \"string\",\n        \"required\": false,\n        \"description\": \"The first name of the user\"\n      },\n      \"lastName\": {\n        \"type\": \"string\",\n        \"required\": false,\n        \"description\": \"The last name of the user\"\n      },\n      \"provider\": {\n        \"type\": \"string\",\n        \"required\": false,\n        \"description\": \"The domain of the user\"\n      }\n    }\n  };\n  /**\n   * exampleEmail\n   *\n   * @method faker.internet.exampleEmail\n   * @param {string} firstName\n   * @param {string} lastName\n   */\n\n  self.exampleEmail = function (firstName, lastName) {\n    var provider = faker.random.arrayElement(faker.definitions.internet.example_email);\n    return self.email(firstName, lastName, provider);\n  };\n  /**\n   * userName\n   *\n   * @method faker.internet.userName\n   * @param {string} firstName\n   * @param {string} lastName\n   */\n\n\n  self.userName = function (firstName, lastName) {\n    var result;\n    firstName = firstName || faker.name.firstName();\n    lastName = lastName || faker.name.lastName();\n\n    switch (faker.random.number(2)) {\n      case 0:\n        result = firstName + faker.random.number(99);\n        break;\n\n      case 1:\n        result = firstName + faker.random.arrayElement([\".\", \"_\"]) + lastName;\n        break;\n\n      case 2:\n        result = firstName + faker.random.arrayElement([\".\", \"_\"]) + lastName + faker.random.number(99);\n        break;\n    }\n\n    result = result.toString().replace(/'/g, \"\");\n    result = result.replace(/ /g, \"\");\n    return result;\n  };\n\n  self.userName.schema = {\n    \"description\": \"Generates a username based on one of several patterns. The pattern is chosen randomly.\",\n    \"sampleResults\": [\"Kirstin39\", \"Kirstin.Smith\", \"Kirstin.Smith39\", \"KirstinSmith\", \"KirstinSmith39\"],\n    \"properties\": {\n      \"firstName\": {\n        \"type\": \"string\",\n        \"required\": false,\n        \"description\": \"The first name of the user\"\n      },\n      \"lastName\": {\n        \"type\": \"string\",\n        \"required\": false,\n        \"description\": \"The last name of the user\"\n      }\n    }\n  };\n  /**\n   * protocol\n   *\n   * @method faker.internet.protocol\n   */\n\n  self.protocol = function () {\n    var protocols = ['http', 'https'];\n    return faker.random.arrayElement(protocols);\n  };\n\n  self.protocol.schema = {\n    \"description\": \"Randomly generates http or https\",\n    \"sampleResults\": [\"https\", \"http\"]\n  };\n  /**\n   * url\n   *\n   * @method faker.internet.url\n   */\n\n  self.url = function () {\n    return faker.internet.protocol() + '://' + faker.internet.domainName();\n  };\n\n  self.url.schema = {\n    \"description\": \"Generates a random URL. The URL could be secure or insecure.\",\n    \"sampleResults\": [\"http://rashawn.name\", \"https://rashawn.name\"]\n  };\n  /**\n   * domainName\n   *\n   * @method faker.internet.domainName\n   */\n\n  self.domainName = function () {\n    return faker.internet.domainWord() + \".\" + faker.internet.domainSuffix();\n  };\n\n  self.domainName.schema = {\n    \"description\": \"Generates a random domain name.\",\n    \"sampleResults\": [\"marvin.org\"]\n  };\n  /**\n   * domainSuffix\n   *\n   * @method faker.internet.domainSuffix\n   */\n\n  self.domainSuffix = function () {\n    return faker.random.arrayElement(faker.definitions.internet.domain_suffix);\n  };\n\n  self.domainSuffix.schema = {\n    \"description\": \"Generates a random domain suffix.\",\n    \"sampleResults\": [\"net\"]\n  };\n  /**\n   * domainWord\n   *\n   * @method faker.internet.domainWord\n   */\n\n  self.domainWord = function () {\n    return faker.name.firstName().replace(/([\\\\~#&*{}/:<>?|\\\"'])/ig, '').toLowerCase();\n  };\n\n  self.domainWord.schema = {\n    \"description\": \"Generates a random domain word.\",\n    \"sampleResults\": [\"alyce\"]\n  };\n  /**\n   * ip\n   *\n   * @method faker.internet.ip\n   */\n\n  self.ip = function () {\n    var randNum = function randNum() {\n      return faker.random.number(255).toFixed(0);\n    };\n\n    var result = [];\n\n    for (var i = 0; i < 4; i++) {\n      result[i] = randNum();\n    }\n\n    return result.join(\".\");\n  };\n\n  self.ip.schema = {\n    \"description\": \"Generates a random IP.\",\n    \"sampleResults\": [\"97.238.241.11\"]\n  };\n  /**\n   * ipv6\n   *\n   * @method faker.internet.ipv6\n   */\n\n  self.ipv6 = function () {\n    var randHash = function randHash() {\n      var result = \"\";\n\n      for (var i = 0; i < 4; i++) {\n        result += faker.random.arrayElement([\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]);\n      }\n\n      return result;\n    };\n\n    var result = [];\n\n    for (var i = 0; i < 8; i++) {\n      result[i] = randHash();\n    }\n\n    return result.join(\":\");\n  };\n\n  self.ipv6.schema = {\n    \"description\": \"Generates a random IPv6 address.\",\n    \"sampleResults\": [\"2001:0db8:6276:b1a7:5213:22f1:25df:c8a0\"]\n  };\n  /**\n   * userAgent\n   *\n   * @method faker.internet.userAgent\n   */\n\n  self.userAgent = function () {\n    return random_ua.generate();\n  };\n\n  self.userAgent.schema = {\n    \"description\": \"Generates a random user agent.\",\n    \"sampleResults\": [\"Mozilla/5.0 (Macintosh; U; PPC Mac OS X 10_7_5 rv:6.0; SL) AppleWebKit/532.0.1 (KHTML, like Gecko) Version/7.1.6 Safari/532.0.1\"]\n  };\n  /**\n   * color\n   *\n   * @method faker.internet.color\n   * @param {number} baseRed255\n   * @param {number} baseGreen255\n   * @param {number} baseBlue255\n   */\n\n  self.color = function (baseRed255, baseGreen255, baseBlue255) {\n    baseRed255 = baseRed255 || 0;\n    baseGreen255 = baseGreen255 || 0;\n    baseBlue255 = baseBlue255 || 0; // based on awesome response : http://stackoverflow.com/questions/43044/algorithm-to-randomly-generate-an-aesthetically-pleasing-color-palette\n\n    var red = Math.floor((faker.random.number(256) + baseRed255) / 2);\n    var green = Math.floor((faker.random.number(256) + baseGreen255) / 2);\n    var blue = Math.floor((faker.random.number(256) + baseBlue255) / 2);\n    var redStr = red.toString(16);\n    var greenStr = green.toString(16);\n    var blueStr = blue.toString(16);\n    return '#' + (redStr.length === 1 ? '0' : '') + redStr + (greenStr.length === 1 ? '0' : '') + greenStr + (blueStr.length === 1 ? '0' : '') + blueStr;\n  };\n\n  self.color.schema = {\n    \"description\": \"Generates a random hexadecimal color.\",\n    \"sampleResults\": [\"#06267f\"],\n    \"properties\": {\n      \"baseRed255\": {\n        \"type\": \"number\",\n        \"required\": false,\n        \"description\": \"The red value. Valid values are 0 - 255.\"\n      },\n      \"baseGreen255\": {\n        \"type\": \"number\",\n        \"required\": false,\n        \"description\": \"The green value. Valid values are 0 - 255.\"\n      },\n      \"baseBlue255\": {\n        \"type\": \"number\",\n        \"required\": false,\n        \"description\": \"The blue value. Valid values are 0 - 255.\"\n      }\n    }\n  };\n  /**\n   * mac\n   *\n   * @method faker.internet.mac\n   */\n\n  self.mac = function () {\n    var i,\n        mac = \"\";\n\n    for (i = 0; i < 12; i++) {\n      mac += faker.random.number(15).toString(16);\n\n      if (i % 2 == 1 && i != 11) {\n        mac += \":\";\n      }\n    }\n\n    return mac;\n  };\n\n  self.mac.schema = {\n    \"description\": \"Generates a random mac address.\",\n    \"sampleResults\": [\"78:06:cc:ae:b3:81\"]\n  };\n  /**\n   * password\n   *\n   * @method faker.internet.password\n   * @param {number} len\n   * @param {boolean} memorable\n   * @param {string} pattern\n   * @param {string} prefix\n   */\n\n  self.password = function (len, memorable, pattern, prefix) {\n    len = len || 15;\n\n    if (typeof memorable === \"undefined\") {\n      memorable = false;\n    }\n    /*\n     * password-generator ( function )\n     * Copyright(c) 2011-2013 Bermi Ferrer <bermi@bermilabs.com>\n     * MIT Licensed\n     */\n\n\n    var consonant, letter, password, vowel;\n    letter = /[a-zA-Z]$/;\n    vowel = /[aeiouAEIOU]$/;\n    consonant = /[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]$/;\n\n    var _password = function _password(length, memorable, pattern, prefix) {\n      var char, n;\n\n      if (length == null) {\n        length = 10;\n      }\n\n      if (memorable == null) {\n        memorable = true;\n      }\n\n      if (pattern == null) {\n        pattern = /\\w/;\n      }\n\n      if (prefix == null) {\n        prefix = '';\n      }\n\n      if (prefix.length >= length) {\n        return prefix;\n      }\n\n      if (memorable) {\n        if (prefix.match(consonant)) {\n          pattern = vowel;\n        } else {\n          pattern = consonant;\n        }\n      }\n\n      n = faker.random.number(94) + 33;\n      char = String.fromCharCode(n);\n\n      if (memorable) {\n        char = char.toLowerCase();\n      }\n\n      if (!char.match(pattern)) {\n        return _password(length, memorable, pattern, prefix);\n      }\n\n      return _password(length, memorable, pattern, \"\" + prefix + char);\n    };\n\n    return _password(len, memorable, pattern, prefix);\n  };\n\n  self.password.schema = {\n    \"description\": \"Generates a random password.\",\n    \"sampleResults\": [\"AM7zl6Mg\", \"susejofe\"],\n    \"properties\": {\n      \"length\": {\n        \"type\": \"number\",\n        \"required\": false,\n        \"description\": \"The number of characters in the password.\"\n      },\n      \"memorable\": {\n        \"type\": \"boolean\",\n        \"required\": false,\n        \"description\": \"Whether a password should be easy to remember.\"\n      },\n      \"pattern\": {\n        \"type\": \"regex\",\n        \"required\": false,\n        \"description\": \"A regex to match each character of the password against. This parameter will be negated if the memorable setting is turned on.\"\n      },\n      \"prefix\": {\n        \"type\": \"string\",\n        \"required\": false,\n        \"description\": \"A value to prepend to the generated password. The prefix counts towards the length of the password.\"\n      }\n    }\n  };\n};\n\nmodule[\"exports\"] = Internet;","map":{"version":3,"sources":["C:/Users/david/react/RateCourses/client/node_modules/faker/lib/internet.js"],"names":["random_ua","require","Internet","faker","self","avatar","random","arrayElement","definitions","internet","avatar_uri","schema","email","firstName","lastName","provider","free_email","helpers","slugify","userName","exampleEmail","example_email","result","name","number","toString","replace","protocol","protocols","url","domainName","domainWord","domainSuffix","domain_suffix","toLowerCase","ip","randNum","toFixed","i","join","ipv6","randHash","userAgent","generate","color","baseRed255","baseGreen255","baseBlue255","red","Math","floor","green","blue","redStr","greenStr","blueStr","length","mac","password","len","memorable","pattern","prefix","consonant","letter","vowel","_password","char","n","match","String","fromCharCode","module"],"mappings":"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","sourcesContent":["var random_ua = require('../vendor/user-agent');\n\n/**\n *\n * @namespace faker.internet\n */\nvar Internet = function (faker) {\n  var self = this;\n  /**\n   * avatar\n   *\n   * @method faker.internet.avatar\n   */\n  self.avatar = function () {\n      return faker.random.arrayElement(faker.definitions.internet.avatar_uri);\n  };\n\n  self.avatar.schema = {\n    \"description\": \"Generates a URL for an avatar.\",\n    \"sampleResults\": [\"https://s3.amazonaws.com/uifaces/faces/twitter/igorgarybaldi/128.jpg\"]\n  };\n\n  /**\n   * email\n   *\n   * @method faker.internet.email\n   * @param {string} firstName\n   * @param {string} lastName\n   * @param {string} provider\n   */\n  self.email = function (firstName, lastName, provider) {\n      provider = provider || faker.random.arrayElement(faker.definitions.internet.free_email);\n      return  faker.helpers.slugify(faker.internet.userName(firstName, lastName)) + \"@\" + provider;\n  };\n\n  self.email.schema = {\n    \"description\": \"Generates a valid email address based on optional input criteria\",\n    \"sampleResults\": [\"foo.bar@gmail.com\"],\n    \"properties\": {\n      \"firstName\": {\n        \"type\": \"string\",\n        \"required\": false,\n        \"description\": \"The first name of the user\"\n      },\n      \"lastName\": {\n        \"type\": \"string\",\n        \"required\": false,\n        \"description\": \"The last name of the user\"\n      },\n      \"provider\": {\n        \"type\": \"string\",\n        \"required\": false,\n        \"description\": \"The domain of the user\"\n      }\n    }\n  };\n  /**\n   * exampleEmail\n   *\n   * @method faker.internet.exampleEmail\n   * @param {string} firstName\n   * @param {string} lastName\n   */\n  self.exampleEmail = function (firstName, lastName) {\n      var provider = faker.random.arrayElement(faker.definitions.internet.example_email);\n      return self.email(firstName, lastName, provider);\n  };\n\n  /**\n   * userName\n   *\n   * @method faker.internet.userName\n   * @param {string} firstName\n   * @param {string} lastName\n   */\n  self.userName = function (firstName, lastName) {\n      var result;\n      firstName = firstName || faker.name.firstName();\n      lastName = lastName || faker.name.lastName();\n      switch (faker.random.number(2)) {\n      case 0:\n          result = firstName + faker.random.number(99);\n          break;\n      case 1:\n          result = firstName + faker.random.arrayElement([\".\", \"_\"]) + lastName;\n          break;\n      case 2:\n          result = firstName + faker.random.arrayElement([\".\", \"_\"]) + lastName + faker.random.number(99);\n          break;\n      }\n      result = result.toString().replace(/'/g, \"\");\n      result = result.replace(/ /g, \"\");\n      return result;\n  };\n\n  self.userName.schema = {\n    \"description\": \"Generates a username based on one of several patterns. The pattern is chosen randomly.\",\n    \"sampleResults\": [\n      \"Kirstin39\",\n      \"Kirstin.Smith\",\n      \"Kirstin.Smith39\",\n      \"KirstinSmith\",\n      \"KirstinSmith39\",\n    ],\n    \"properties\": {\n      \"firstName\": {\n        \"type\": \"string\",\n        \"required\": false,\n        \"description\": \"The first name of the user\"\n      },\n      \"lastName\": {\n        \"type\": \"string\",\n        \"required\": false,\n        \"description\": \"The last name of the user\"\n      }\n    }\n  };\n\n  /**\n   * protocol\n   *\n   * @method faker.internet.protocol\n   */\n  self.protocol = function () {\n      var protocols = ['http','https'];\n      return faker.random.arrayElement(protocols);\n  };\n\n  self.protocol.schema = {\n    \"description\": \"Randomly generates http or https\",\n    \"sampleResults\": [\"https\", \"http\"]\n  };\n\n  /**\n   * url\n   *\n   * @method faker.internet.url\n   */\n  self.url = function () {\n      return faker.internet.protocol() + '://' + faker.internet.domainName();\n  };\n\n  self.url.schema = {\n    \"description\": \"Generates a random URL. The URL could be secure or insecure.\",\n    \"sampleResults\": [\n      \"http://rashawn.name\",\n      \"https://rashawn.name\"\n    ]\n  };\n\n  /**\n   * domainName\n   *\n   * @method faker.internet.domainName\n   */\n  self.domainName = function () {\n      return faker.internet.domainWord() + \".\" + faker.internet.domainSuffix();\n  };\n\n  self.domainName.schema = {\n    \"description\": \"Generates a random domain name.\",\n    \"sampleResults\": [\"marvin.org\"]\n  };\n\n  /**\n   * domainSuffix\n   *\n   * @method faker.internet.domainSuffix\n   */\n  self.domainSuffix = function () {\n      return faker.random.arrayElement(faker.definitions.internet.domain_suffix);\n  };\n\n  self.domainSuffix.schema = {\n    \"description\": \"Generates a random domain suffix.\",\n    \"sampleResults\": [\"net\"]\n  };\n\n  /**\n   * domainWord\n   *\n   * @method faker.internet.domainWord\n   */\n  self.domainWord = function () {\n      return faker.name.firstName().replace(/([\\\\~#&*{}/:<>?|\\\"'])/ig, '').toLowerCase();\n  };\n\n  self.domainWord.schema = {\n    \"description\": \"Generates a random domain word.\",\n    \"sampleResults\": [\"alyce\"]\n  };\n\n  /**\n   * ip\n   *\n   * @method faker.internet.ip\n   */\n  self.ip = function () {\n      var randNum = function () {\n          return (faker.random.number(255)).toFixed(0);\n      };\n\n      var result = [];\n      for (var i = 0; i < 4; i++) {\n          result[i] = randNum();\n      }\n\n      return result.join(\".\");\n  };\n\n  self.ip.schema = {\n    \"description\": \"Generates a random IP.\",\n    \"sampleResults\": [\"97.238.241.11\"]\n  };\n\n  /**\n   * ipv6\n   *\n   * @method faker.internet.ipv6\n   */\n  self.ipv6 = function () {\n      var randHash = function () {\n          var result = \"\";\n          for (var i = 0; i < 4; i++) {\n            result += (faker.random.arrayElement([\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]));\n          }\n          return result\n      };\n\n      var result = [];\n      for (var i = 0; i < 8; i++) {\n        result[i] = randHash();\n      }\n      return result.join(\":\");\n  };\n\n  self.ipv6.schema = {\n    \"description\": \"Generates a random IPv6 address.\",\n    \"sampleResults\": [\"2001:0db8:6276:b1a7:5213:22f1:25df:c8a0\"]\n  };\n\n  /**\n   * userAgent\n   *\n   * @method faker.internet.userAgent\n   */\n  self.userAgent = function () {\n    return random_ua.generate();\n  };\n\n  self.userAgent.schema = {\n    \"description\": \"Generates a random user agent.\",\n    \"sampleResults\": [\"Mozilla/5.0 (Macintosh; U; PPC Mac OS X 10_7_5 rv:6.0; SL) AppleWebKit/532.0.1 (KHTML, like Gecko) Version/7.1.6 Safari/532.0.1\"]\n  };\n\n  /**\n   * color\n   *\n   * @method faker.internet.color\n   * @param {number} baseRed255\n   * @param {number} baseGreen255\n   * @param {number} baseBlue255\n   */\n  self.color = function (baseRed255, baseGreen255, baseBlue255) {\n      baseRed255 = baseRed255 || 0;\n      baseGreen255 = baseGreen255 || 0;\n      baseBlue255 = baseBlue255 || 0;\n      // based on awesome response : http://stackoverflow.com/questions/43044/algorithm-to-randomly-generate-an-aesthetically-pleasing-color-palette\n      var red = Math.floor((faker.random.number(256) + baseRed255) / 2);\n      var green = Math.floor((faker.random.number(256) + baseGreen255) / 2);\n      var blue = Math.floor((faker.random.number(256) + baseBlue255) / 2);\n      var redStr = red.toString(16);\n      var greenStr = green.toString(16);\n      var blueStr = blue.toString(16);\n      return '#' +\n        (redStr.length === 1 ? '0' : '') + redStr +\n        (greenStr.length === 1 ? '0' : '') + greenStr +\n        (blueStr.length === 1 ? '0': '') + blueStr;\n\n  };\n\n  self.color.schema = {\n    \"description\": \"Generates a random hexadecimal color.\",\n    \"sampleResults\": [\"#06267f\"],\n    \"properties\": {\n      \"baseRed255\": {\n        \"type\": \"number\",\n        \"required\": false,\n        \"description\": \"The red value. Valid values are 0 - 255.\"\n      },\n      \"baseGreen255\": {\n        \"type\": \"number\",\n        \"required\": false,\n        \"description\": \"The green value. Valid values are 0 - 255.\"\n      },\n      \"baseBlue255\": {\n        \"type\": \"number\",\n        \"required\": false,\n        \"description\": \"The blue value. Valid values are 0 - 255.\"\n      }\n    }\n  };\n\n  /**\n   * mac\n   *\n   * @method faker.internet.mac\n   */\n  self.mac = function(){\n      var i, mac = \"\";\n      for (i=0; i < 12; i++) {\n          mac+= faker.random.number(15).toString(16);\n          if (i%2==1 && i != 11) {\n              mac+=\":\";\n          }\n      }\n      return mac;\n  };\n\n  self.mac.schema = {\n    \"description\": \"Generates a random mac address.\",\n    \"sampleResults\": [\"78:06:cc:ae:b3:81\"]\n  };\n\n  /**\n   * password\n   *\n   * @method faker.internet.password\n   * @param {number} len\n   * @param {boolean} memorable\n   * @param {string} pattern\n   * @param {string} prefix\n   */\n   self.password = function (len, memorable, pattern, prefix) {\n     len = len || 15;\n     if (typeof memorable === \"undefined\") {\n       memorable = false;\n     }\n     /*\n      * password-generator ( function )\n      * Copyright(c) 2011-2013 Bermi Ferrer <bermi@bermilabs.com>\n      * MIT Licensed\n      */\n     var consonant, letter, password, vowel;\n     letter = /[a-zA-Z]$/;\n     vowel = /[aeiouAEIOU]$/;\n     consonant = /[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]$/;\n     var _password = function (length, memorable, pattern, prefix) {\n       var char, n;\n       if (length == null) {\n         length = 10;\n       }\n       if (memorable == null) {\n         memorable = true;\n       }\n       if (pattern == null) {\n         pattern = /\\w/;\n       }\n       if (prefix == null) {\n         prefix = '';\n       }\n       if (prefix.length >= length) {\n         return prefix;\n       }\n       if (memorable) {\n         if (prefix.match(consonant)) {\n           pattern = vowel;\n         } else {\n           pattern = consonant;\n         }\n       }\n       n = faker.random.number(94) + 33;\n       char = String.fromCharCode(n);\n       if (memorable) {\n         char = char.toLowerCase();\n       }\n       if (!char.match(pattern)) {\n         return _password(length, memorable, pattern, prefix);\n       }\n       return _password(length, memorable, pattern, \"\" + prefix + char);\n     };\n     return _password(len, memorable, pattern, prefix);\n   }\n\n  self.password.schema = {\n    \"description\": \"Generates a random password.\",\n    \"sampleResults\": [\n      \"AM7zl6Mg\",\n      \"susejofe\"\n    ],\n    \"properties\": {\n      \"length\": {\n        \"type\": \"number\",\n        \"required\": false,\n        \"description\": \"The number of characters in the password.\"\n      },\n      \"memorable\": {\n        \"type\": \"boolean\",\n        \"required\": false,\n        \"description\": \"Whether a password should be easy to remember.\"\n      },\n      \"pattern\": {\n        \"type\": \"regex\",\n        \"required\": false,\n        \"description\": \"A regex to match each character of the password against. This parameter will be negated if the memorable setting is turned on.\"\n      },\n      \"prefix\": {\n        \"type\": \"string\",\n        \"required\": false,\n        \"description\": \"A value to prepend to the generated password. The prefix counts towards the length of the password.\"\n      }\n    }\n  };\n\n};\n\n\nmodule[\"exports\"] = Internet;\n"]},"metadata":{},"sourceType":"script"}