{"ast":null,"code":"var mersenne = require('../vendor/mersenne');\n/**\n *\n * @namespace faker.random\n */\n\n\nfunction Random(faker, seed) {\n  // Use a user provided seed if it exists\n  if (seed) {\n    if (Array.isArray(seed) && seed.length) {\n      mersenne.seed_array(seed);\n    } else {\n      mersenne.seed(seed);\n    }\n  }\n  /**\n   * returns a single random number based on a max number or range\n   *\n   * @method faker.random.number\n   * @param {mixed} options\n   */\n\n\n  this.number = function (options) {\n    if (typeof options === \"number\") {\n      options = {\n        max: options\n      };\n    }\n\n    options = options || {};\n\n    if (typeof options.min === \"undefined\") {\n      options.min = 0;\n    }\n\n    if (typeof options.max === \"undefined\") {\n      options.max = 99999;\n    }\n\n    if (typeof options.precision === \"undefined\") {\n      options.precision = 1;\n    } // Make the range inclusive of the max value\n\n\n    var max = options.max;\n\n    if (max >= 0) {\n      max += options.precision;\n    }\n\n    var randomNumber = options.precision * Math.floor(mersenne.rand(max / options.precision, options.min / options.precision));\n    return randomNumber;\n  };\n  /**\n   * takes an array and returns a random element of the array\n   *\n   * @method faker.random.arrayElement\n   * @param {array} array\n   */\n\n\n  this.arrayElement = function (array) {\n    array = array || [\"a\", \"b\", \"c\"];\n    var r = faker.random.number({\n      max: array.length - 1\n    });\n    return array[r];\n  };\n  /**\n   * takes an object and returns the randomly key or value\n   *\n   * @method faker.random.objectElement\n   * @param {object} object\n   * @param {mixed} field\n   */\n\n\n  this.objectElement = function (object, field) {\n    object = object || {\n      \"foo\": \"bar\",\n      \"too\": \"car\"\n    };\n    var array = Object.keys(object);\n    var key = faker.random.arrayElement(array);\n    return field === \"key\" ? key : object[key];\n  };\n  /**\n   * uuid\n   *\n   * @method faker.random.uuid\n   */\n\n\n  this.uuid = function () {\n    var self = this;\n    var RFC4122_TEMPLATE = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';\n\n    var replacePlaceholders = function (placeholder) {\n      var random = self.number({\n        min: 0,\n        max: 15\n      });\n      var value = placeholder == 'x' ? random : random & 0x3 | 0x8;\n      return value.toString(16);\n    };\n\n    return RFC4122_TEMPLATE.replace(/[xy]/g, replacePlaceholders);\n  };\n  /**\n   * boolean\n   *\n   * @method faker.random.boolean\n   */\n\n\n  this.boolean = function () {\n    return !!faker.random.number(1);\n  }; // TODO: have ability to return specific type of word? As in: noun, adjective, verb, etc\n\n  /**\n   * word\n   *\n   * @method faker.random.word\n   * @param {string} type\n   */\n\n\n  this.word = function randomWord(type) {\n    var wordMethods = ['commerce.department', 'commerce.productName', 'commerce.productAdjective', 'commerce.productMaterial', 'commerce.product', 'commerce.color', 'company.catchPhraseAdjective', 'company.catchPhraseDescriptor', 'company.catchPhraseNoun', 'company.bsAdjective', 'company.bsBuzz', 'company.bsNoun', 'address.streetSuffix', 'address.county', 'address.country', 'address.state', 'finance.accountName', 'finance.transactionType', 'finance.currencyName', 'hacker.noun', 'hacker.verb', 'hacker.adjective', 'hacker.ingverb', 'hacker.abbreviation', 'name.jobDescriptor', 'name.jobArea', 'name.jobType']; // randomly pick from the many faker methods that can generate words\n\n    var randomWordMethod = faker.random.arrayElement(wordMethods);\n    return faker.fake('{{' + randomWordMethod + '}}');\n  };\n  /**\n   * randomWords\n   *\n   * @method faker.random.words\n   * @param {number} count defaults to a random value between 1 and 3\n   */\n\n\n  this.words = function randomWords(count) {\n    var words = [];\n\n    if (typeof count === \"undefined\") {\n      count = faker.random.number({\n        min: 1,\n        max: 3\n      });\n    }\n\n    for (var i = 0; i < count; i++) {\n      words.push(faker.random.word());\n    }\n\n    return words.join(' ');\n  };\n  /**\n   * locale\n   *\n   * @method faker.random.image\n   */\n\n\n  this.image = function randomImage() {\n    return faker.image.image();\n  };\n  /**\n   * locale\n   *\n   * @method faker.random.locale\n   */\n\n\n  this.locale = function randomLocale() {\n    return faker.random.arrayElement(Object.keys(faker.locales));\n  };\n  /**\n   * alphaNumeric\n   *\n   * @method faker.random.alphaNumeric\n   * @param {number} count defaults to 1\n   */\n\n\n  this.alphaNumeric = function alphaNumeric(count) {\n    if (typeof count === \"undefined\") {\n      count = 1;\n    }\n\n    var wholeString = \"\";\n\n    for (var i = 0; i < count; i++) {\n      wholeString += faker.random.arrayElement([\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]);\n    }\n\n    return wholeString;\n  };\n\n  return this;\n}\n\nmodule['exports'] = Random;","map":{"version":3,"sources":["C:/Users/david/react/RateCourses/client/node_modules/faker/lib/random.js"],"names":["mersenne","require","Random","faker","seed","Array","isArray","length","seed_array","number","options","max","min","precision","randomNumber","Math","floor","rand","arrayElement","array","r","random","objectElement","object","field","Object","keys","key","uuid","self","RFC4122_TEMPLATE","replacePlaceholders","placeholder","value","toString","replace","boolean","word","randomWord","type","wordMethods","randomWordMethod","fake","words","randomWords","count","i","push","join","image","randomImage","locale","randomLocale","locales","alphaNumeric","wholeString","module"],"mappings":"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","sourcesContent":["var mersenne = require('../vendor/mersenne');\n\n/**\n *\n * @namespace faker.random\n */\nfunction Random (faker, seed) {\n  // Use a user provided seed if it exists\n  if (seed) {\n    if (Array.isArray(seed) && seed.length) {\n      mersenne.seed_array(seed);\n    }\n    else {\n      mersenne.seed(seed);\n    }\n  }\n  /**\n   * returns a single random number based on a max number or range\n   *\n   * @method faker.random.number\n   * @param {mixed} options\n   */\n  this.number = function (options) {\n\n    if (typeof options === \"number\") {\n      options = {\n        max: options\n      };\n    }\n\n    options = options || {};\n\n    if (typeof options.min === \"undefined\") {\n      options.min = 0;\n    }\n\n    if (typeof options.max === \"undefined\") {\n      options.max = 99999;\n    }\n    if (typeof options.precision === \"undefined\") {\n      options.precision = 1;\n    }\n\n    // Make the range inclusive of the max value\n    var max = options.max;\n    if (max >= 0) {\n      max += options.precision;\n    }\n\n    var randomNumber = options.precision * Math.floor(\n      mersenne.rand(max / options.precision, options.min / options.precision));\n\n    return randomNumber;\n\n  }\n\n  /**\n   * takes an array and returns a random element of the array\n   *\n   * @method faker.random.arrayElement\n   * @param {array} array\n   */\n  this.arrayElement = function (array) {\n      array = array || [\"a\", \"b\", \"c\"];\n      var r = faker.random.number({ max: array.length - 1 });\n      return array[r];\n  }\n\n  /**\n   * takes an object and returns the randomly key or value\n   *\n   * @method faker.random.objectElement\n   * @param {object} object\n   * @param {mixed} field\n   */\n  this.objectElement = function (object, field) {\n      object = object || { \"foo\": \"bar\", \"too\": \"car\" };\n      var array = Object.keys(object);\n      var key = faker.random.arrayElement(array);\n\n      return field === \"key\" ? key : object[key];\n  }\n\n  /**\n   * uuid\n   *\n   * @method faker.random.uuid\n   */\n  this.uuid = function () {\n      var self = this;\n      var RFC4122_TEMPLATE = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';\n      var replacePlaceholders = function (placeholder) {\n          var random = self.number({ min: 0, max: 15 });\n          var value = placeholder == 'x' ? random : (random &0x3 | 0x8);\n          return value.toString(16);\n      };\n      return RFC4122_TEMPLATE.replace(/[xy]/g, replacePlaceholders);\n  }\n\n  /**\n   * boolean\n   *\n   * @method faker.random.boolean\n   */\n  this.boolean = function () {\n      return !!faker.random.number(1)\n  }\n\n  // TODO: have ability to return specific type of word? As in: noun, adjective, verb, etc\n  /**\n   * word\n   *\n   * @method faker.random.word\n   * @param {string} type\n   */\n  this.word = function randomWord (type) {\n\n    var wordMethods = [\n    'commerce.department',\n    'commerce.productName',\n    'commerce.productAdjective',\n    'commerce.productMaterial',\n    'commerce.product',\n    'commerce.color',\n\n    'company.catchPhraseAdjective',\n    'company.catchPhraseDescriptor',\n    'company.catchPhraseNoun',\n    'company.bsAdjective',\n    'company.bsBuzz',\n    'company.bsNoun',\n    'address.streetSuffix',\n    'address.county',\n    'address.country',\n    'address.state',\n\n    'finance.accountName',\n    'finance.transactionType',\n    'finance.currencyName',\n\n    'hacker.noun',\n    'hacker.verb',\n    'hacker.adjective',\n    'hacker.ingverb',\n    'hacker.abbreviation',\n\n    'name.jobDescriptor',\n    'name.jobArea',\n    'name.jobType'];\n\n    // randomly pick from the many faker methods that can generate words\n    var randomWordMethod = faker.random.arrayElement(wordMethods);\n    return faker.fake('{{' + randomWordMethod + '}}');\n\n  }\n\n  /**\n   * randomWords\n   *\n   * @method faker.random.words\n   * @param {number} count defaults to a random value between 1 and 3\n   */\n  this.words = function randomWords (count) {\n    var words = [];\n    if (typeof count === \"undefined\") {\n      count = faker.random.number({min:1, max: 3});\n    }\n    for (var i = 0; i<count; i++) {\n      words.push(faker.random.word());\n    }\n    return words.join(' ');\n  }\n\n  /**\n   * locale\n   *\n   * @method faker.random.image\n   */\n  this.image = function randomImage () {\n    return faker.image.image();\n  }\n\n  /**\n   * locale\n   *\n   * @method faker.random.locale\n   */\n  this.locale = function randomLocale () {\n    return faker.random.arrayElement(Object.keys(faker.locales));\n  };\n\n  /**\n   * alphaNumeric\n   *\n   * @method faker.random.alphaNumeric\n   * @param {number} count defaults to 1\n   */\n  this.alphaNumeric = function alphaNumeric(count) {\n    if (typeof count === \"undefined\") {\n      count = 1;\n    }\n\n    var wholeString = \"\";\n    for(var i = 0; i < count; i++) {\n      wholeString += faker.random.arrayElement([\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]);\n    }\n\n    return wholeString;\n  };\n\n  return this;\n\n}\n\nmodule['exports'] = Random;\n"]},"metadata":{},"sourceType":"script"}