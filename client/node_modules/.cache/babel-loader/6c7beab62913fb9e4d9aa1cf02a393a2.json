{"ast":null,"code":"import React, { Component } from 'react';\nimport RAFManager from 'raf-manager';\nimport Proton from 'proton-engine';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}; // Code source from here, thanks author\n// https://github.com/drawcall/Proton/blob/gh-pages/source/src/utils/Rand.js\n\n\nvar Rand = function () {\n  function Rand() {\n    classCallCheck(this, Rand);\n    this.list = [];\n  }\n\n  createClass(Rand, [{\n    key: \"set\",\n    value: function set$$1(probability, target) {\n      this.list.push({\n        probability: probability,\n        target: target,\n        a: 0,\n        b: 1\n      });\n      this.calculation();\n    }\n  }, {\n    key: \"calculation\",\n    value: function calculation() {\n      var total = 0;\n\n      for (var i = 0; i < this.list.length; i++) {\n        total += this.list[i].probability;\n      }\n\n      for (var _i = 0; _i < this.list.length; _i++) {\n        var obj = this.list[_i];\n        var val = obj.probability / total;\n        obj.a = _i === 0 ? 0 : this.list[_i - 1].b;\n        obj.b = obj.a + val;\n      }\n    }\n  }, {\n    key: \"getResult\",\n    value: function getResult() {\n      var val = Math.random();\n\n      for (var i = 0; i < this.list.length; i++) {\n        var obj = this.list[i];\n\n        if (val <= obj.b && val > obj.a) {\n          return obj.target;\n        }\n      }\n\n      return this.list[0].target;\n    }\n  }]);\n  return Rand;\n}();\n\nvar Canvas = function (_React$Component) {\n  inherits(Canvas, _React$Component);\n\n  function Canvas(props) {\n    classCallCheck(this, Canvas);\n\n    var _this = possibleConstructorReturn(this, (Canvas.__proto__ || Object.getPrototypeOf(Canvas)).call(this, props));\n\n    _this._id = 0;\n    _this.size = {\n      width: 0,\n      height: 0\n    };\n    _this.canvasRef = React.createRef();\n    return _this;\n  }\n\n  createClass(Canvas, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      setTimeout(function () {\n        _this2.initCanvas();\n\n        _this2.resize = _this2.resize.bind(_this2);\n        window.addEventListener(\"resize\", _this2.resize);\n      }, 100);\n      var canvas = this.canvasRef.current;\n      this.props.onCanvasDidMount && this.props.onCanvasDidMount(canvas);\n    }\n  }, {\n    key: \"initCanvas\",\n    value: function initCanvas() {\n      var canvas = this.canvasRef.current;\n\n      if (this.props.globalCompositeOperation) {\n        var context = canvas.getContext(\"2d\");\n        context.globalCompositeOperation = this.props.globalCompositeOperation;\n      }\n\n      var _setCanvasSize = this.setCanvasSize(canvas),\n          width = _setCanvasSize.width,\n          height = _setCanvasSize.height;\n\n      this.heartbeatDetectionCanvasSize(canvas);\n      this.props.onCanvasInited(canvas, width, height);\n    }\n  }, {\n    key: \"heartbeatDetectionCanvasSize\",\n    value: function heartbeatDetectionCanvasSize(canvas) {\n      var _this3 = this;\n\n      this._id = setInterval(function () {\n        if (_this3.canvasRef.current) {\n          var newHeight = _this3.canvasRef.current.clientHeight;\n\n          if (newHeight !== _this3.size.height) {\n            var _setCanvasSize2 = _this3.setCanvasSize(canvas),\n                width = _setCanvasSize2.width,\n                height = _setCanvasSize2.height;\n\n            _this3.props.onResize && _this3.props.onResize(width, height);\n          }\n        }\n      }, 1000 / 10);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      try {\n        window.removeEventListener(\"resize\", this.resize);\n        clearInterval(this._id);\n      } catch (e) {}\n    }\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      var canvas = this.canvasRef.current;\n\n      var _setCanvasSize3 = this.setCanvasSize(canvas),\n          width = _setCanvasSize3.width,\n          height = _setCanvasSize3.height;\n\n      this.props.onResize && this.props.onResize(width, height);\n    }\n  }, {\n    key: \"setCanvasSize\",\n    value: function setCanvasSize(canvas) {\n      var width = this.canvasRef.current.clientWidth;\n      var height = this.canvasRef.current.clientHeight;\n      this.size.width = width;\n      this.size.height = height;\n      canvas.width = width;\n      canvas.height = height;\n      return {\n        width: width,\n        height: height\n      };\n    }\n  }, {\n    key: \"handleWaypointEnter\",\n    value: function handleWaypointEnter() {\n      RAFManager.start();\n    }\n  }, {\n    key: \"handleWaypointLeave\",\n    value: function handleWaypointLeave() {\n      RAFManager.stop();\n    }\n  }, {\n    key: \"getStyle\",\n    value: function getStyle() {\n      var style = {\n        width: \"100%\",\n        height: \"100%\"\n      };\n\n      if (this.props.bg) {\n        style = Object.assign(style, {\n          position: \"absolute\",\n          zIndex: -1,\n          top: 0,\n          left: 0\n        });\n      }\n\n      return style;\n    }\n  }, {\n    key: \"handleMouseDown\",\n    value: function handleMouseDown(e) {\n      this.props.onMouseDown && this.props.onMouseDown(e);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"canvas\", {\n        ref: this.canvasRef,\n        onMouseDown: this.handleMouseDown.bind(this),\n        style: this.getStyle()\n      });\n    }\n  }]);\n  return Canvas;\n}(React.Component);\n\nfunction hexToRgb(hex) {\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result ? {\n    r: parseInt(result[1], 16),\n    g: parseInt(result[2], 16),\n    b: parseInt(result[3], 16)\n  } : {};\n}\n\nfunction getColor(color, a) {\n  var c = void 0;\n\n  if (color) {\n    c = hexToRgb(color);\n    return \"rgba(\" + c.r + \",\" + c.g + \",\" + c.b + \", \" + a + \")\";\n  } else {\n    return null;\n  }\n}\n\nvar Ball = function (_React$Component) {\n  inherits(Ball, _React$Component);\n\n  function Ball(props) {\n    classCallCheck(this, Ball);\n\n    var _this = possibleConstructorReturn(this, (Ball.__proto__ || Object.getPrototypeOf(Ball)).call(this, props));\n\n    _this.renderProton = _this.renderProton.bind(_this);\n    return _this;\n  }\n\n  createClass(Ball, [{\n    key: \"onCanvasInited\",\n    value: function onCanvasInited(canvas, width, height) {\n      this.createProton(canvas, width, height);\n      this.createMiniEmitter(canvas);\n      RAFManager.add(this.renderProton);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      try {\n        RAFManager.remove(this.renderProton);\n        this.proton.destroy();\n      } catch (e) {}\n    }\n  }, {\n    key: \"onResize\",\n    value: function onResize() {}\n  }, {\n    key: \"createProton\",\n    value: function createProton(canvas, width, height) {\n      var _this2 = this;\n\n      var context = canvas.getContext(\"2d\");\n      this.proton = new Proton();\n      var emitter = new Proton.Emitter();\n      emitter.rate = new Proton.Rate(this.props.num ? new Proton.Span(this.props.num) : new Proton.Span(4, 9), new Proton.Span(0.8, 1.3));\n      emitter.addInitialize(new Proton.Mass(1));\n      emitter.addInitialize(new Proton.Radius(1, 50));\n      emitter.addInitialize(new Proton.Life(5, 6));\n      emitter.addInitialize(new Proton.Velocity(new Proton.Span(5, 8), new Proton.Span(30, 70), \"polar\"));\n      emitter.addBehaviour(new Proton.Alpha(1, 0));\n      emitter.addBehaviour(new Proton.Color([\"#36aaf3\", \"#fd769c\", \"#94ff22\", \"#ffa545\", \"#ffffff\"]));\n      emitter.addBehaviour(new Proton.Scale(0.7, 1));\n      emitter.addBehaviour(new Proton.Gravity(3));\n      emitter.addBehaviour(new Proton.Collision(emitter));\n      emitter.addBehaviour(this.customDeadBehaviour(canvas));\n      emitter.addBehaviour(new Proton.CrossZone(new Proton.RectZone(0, 0, canvas.width, canvas.height), \"bound\"));\n      emitter.p.x = Math.min(500, Math.max(canvas.width / 2 - 400, 50));\n      emitter.p.y = canvas.height / 2 + 50;\n      emitter.emit();\n      this.proton.addEmitter(emitter);\n      var renderer = new Proton.CanvasRenderer(canvas);\n\n      renderer.onProtonUpdate = function () {\n        context.fillStyle = getColor(_this2.props.color, 0.2) || \"rgba(255, 255, 255, 0.2)\";\n        context.fillRect(0, 0, canvas.width, canvas.height);\n      };\n\n      this.proton.addRenderer(renderer);\n    }\n  }, {\n    key: \"customDeadBehaviour\",\n    value: function customDeadBehaviour(canvas) {\n      var _this3 = this;\n\n      return {\n        initialize: function initialize(particle) {},\n        applyBehaviour: function applyBehaviour(particle) {\n          if (particle.p.y + particle.radius >= canvas.height) {\n            if (particle.radius > 9) {\n              _this3.miniEmitteing(particle);\n\n              particle.dead = true;\n            }\n          }\n        }\n      };\n    }\n  }, {\n    key: \"createMiniEmitter\",\n    value: function createMiniEmitter(canvas) {\n      var miniEmitter = new Proton.Emitter();\n      miniEmitter.rate = new Proton.Rate(new Proton.Span(3, 6), new Proton.Span(1, 2));\n      miniEmitter.addInitialize(new Proton.Mass(1));\n      miniEmitter.radiusInitialize = new Proton.Radius();\n      miniEmitter.addInitialize(miniEmitter.radiusInitialize);\n      miniEmitter.addInitialize(new Proton.Life(0.5, 1));\n      miniEmitter.addInitialize(new Proton.V(new Proton.Span(1.5, 3), new Proton.Span(0, 70, true), \"polar\"));\n      miniEmitter.colorBehaviour = new Proton.Color(\"#ffffff\");\n      miniEmitter.addBehaviour(new Proton.Alpha(1, 0));\n      miniEmitter.addBehaviour(miniEmitter.colorBehaviour);\n      miniEmitter.addBehaviour(new Proton.Gravity(4));\n      miniEmitter.addBehaviour(new Proton.Collision(miniEmitter));\n      miniEmitter.addBehaviour(new Proton.CrossZone(new Proton.RectZone(0, 0, canvas.width, canvas.height), \"bound\"));\n      this.proton.addEmitter(miniEmitter);\n      this.miniEmitter = miniEmitter;\n    }\n  }, {\n    key: \"miniEmitteing\",\n    value: function miniEmitteing(particle) {\n      var miniEmitter = this.miniEmitter;\n      miniEmitter.radiusInitialize.reset(particle.radius * 0.05, particle.radius * 0.2);\n      miniEmitter.colorBehaviour.reset(particle.color);\n      miniEmitter.p.x = particle.p.x;\n      miniEmitter.p.y = particle.p.y;\n      miniEmitter.emit(\"once\");\n    }\n  }, {\n    key: \"renderProton\",\n    value: function renderProton() {\n      this.proton && this.proton.update();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Canvas, {\n        bg: this.props.bg,\n        globalCompositeOperation: \"darker\",\n        onCanvasInited: this.onCanvasInited.bind(this),\n        onResize: this.onResize.bind(this)\n      });\n    }\n  }]);\n  return Ball;\n}(React.Component);\n\nvar Color = function (_React$Component) {\n  inherits(Color, _React$Component);\n\n  function Color(props) {\n    classCallCheck(this, Color);\n\n    var _this = possibleConstructorReturn(this, (Color.__proto__ || Object.getPrototypeOf(Color)).call(this, props));\n\n    _this.colors = [\"#529B88\", \"#CDD180\", \"#FFFA32\", \"#FB6255\", \"#FB4A53\", \"#FF4E50\", \"#F9D423\"];\n    _this.renderProton = _this.renderProton.bind(_this);\n    return _this;\n  }\n\n  createClass(Color, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      try {\n        RAFManager.remove(this.renderProton);\n        this.proton.destroy();\n      } catch (e) {}\n    }\n  }, {\n    key: \"onCanvasInited\",\n    value: function onCanvasInited(canvas, width, height) {\n      this.createProton(canvas, width, height);\n      RAFManager.add(this.renderProton);\n    }\n  }, {\n    key: \"onResize\",\n    value: function onResize() {}\n  }, {\n    key: \"createProton\",\n    value: function createProton(canvas, width, height) {\n      this.proton = new Proton();\n      var emitter = new Proton.Emitter();\n      emitter.rate = new Proton.Rate(this.props.num ? new Proton.Span(this.props.num) : new Proton.Span(5, 8), new Proton.Span(0.1, 0.25));\n      emitter.addInitialize(new Proton.Mass(1));\n      emitter.addInitialize(new Proton.Radius(20, 200));\n      emitter.addInitialize(new Proton.Life(2, 4));\n      emitter.addInitialize(new Proton.Position(new Proton.RectZone(0, 0, width, height)));\n      emitter.addBehaviour(new Proton.Alpha(0, 1, Infinity, Proton.easeOutCubic));\n      emitter.addBehaviour(new Proton.Scale(1, 0, Infinity, Proton.easeOutCubic));\n      emitter.addBehaviour(new Proton.Color(this.colors, \"random\"));\n      emitter.emit();\n      this.proton.addEmitter(emitter);\n      var renderer = new Proton.CanvasRenderer(canvas);\n      this.proton.addRenderer(renderer);\n    }\n  }, {\n    key: \"renderProton\",\n    value: function renderProton() {\n      this.proton && this.proton.update();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Canvas, {\n        bg: this.props.bg,\n        globalCompositeOperation: \"darker\",\n        onCanvasInited: this.onCanvasInited.bind(this),\n        onResize: this.onResize.bind(this)\n      });\n    }\n  }]);\n  return Color;\n}(React.Component);\n\nvar Color$1 = function (_React$Component) {\n  inherits(Color, _React$Component);\n\n  function Color(props) {\n    classCallCheck(this, Color);\n\n    var _this = possibleConstructorReturn(this, (Color.__proto__ || Object.getPrototypeOf(Color)).call(this, props));\n\n    _this.colors = [\"#529B88\", \"#CDD180\", \"#FFFA32\", \"#FB6255\", \"#FB4A53\", \"#FF4E50\", \"#F9D423\"];\n    _this.renderProton = _this.renderProton.bind(_this);\n    return _this;\n  }\n\n  createClass(Color, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      try {\n        RAFManager.remove(this.renderProton);\n        this.proton.destroy();\n      } catch (e) {}\n    }\n  }, {\n    key: \"onCanvasInited\",\n    value: function onCanvasInited(canvas, width, height) {\n      this.createProton(canvas, width, height);\n      RAFManager.add(this.renderProton);\n    }\n  }, {\n    key: \"onResize\",\n    value: function onResize(width, height) {\n      this.crossZoneBehaviour.zone.width = width;\n      this.crossZoneBehaviour.zone.height = height;\n      this.proton.renderers[0].resize(width, height);\n    }\n  }, {\n    key: \"getProp\",\n    value: function getProp(key, defaultVal) {\n      var config = this.props.config || {};\n      var val = config[key] || defaultVal;\n\n      if (Array.isArray(val)) {\n        return new Proton.Span(val[0], val[1]);\n      } else {\n        return val;\n      }\n    }\n  }, {\n    key: \"getArrProp\",\n    value: function getArrProp(key, defaultVal) {\n      var config = this.props.config || {};\n      var val = config[key] || defaultVal;\n      if (!val) return null;\n\n      if (Array.isArray(val)) {\n        return val;\n      } else {\n        return [val, val];\n      }\n    }\n  }, {\n    key: \"createProton\",\n    value: function createProton(canvas, width, height) {\n      var num = this.getProp(\"num\", [5, 8]);\n      var rps = this.getProp(\"rps\", [0.1, 0.2]);\n      var mass = this.getProp(\"mass\", 1);\n      var radius = this.getProp(\"radius\", [10, 30]);\n      var life = this.getProp(\"life\", [2, 3]);\n      var body = this.getProp(\"body\");\n      var position = this.getProp(\"position\");\n      var v = this.getProp(\"v\", [2, 3]);\n      var tha = this.getProp(\"tha\", [-15, 15]);\n      var alpha = this.getArrProp(\"alpha\");\n      var scale = this.getArrProp(\"scale\");\n      var color = this.getArrProp(\"color\");\n      var cross = this.getProp(\"cross\", \"dead\");\n      var random = this.getProp(\"random\");\n      var rotate = this.getArrProp(\"rotate\");\n      var g = this.getProp(\"g\");\n      var f = this.getArrProp(\"f\");\n      var emitterV = this.getProp(\"emitter\");\n      this.proton = new Proton();\n      var emitter = void 0;\n\n      if (emitterV === \"follow\") {\n        emitter = new Proton.FollowEmitter();\n      } else {\n        emitter = new Proton.Emitter();\n      }\n\n      emitter.rate = new Proton.Rate(num, rps);\n      emitter.addInitialize(new Proton.Mass(mass));\n      emitter.addInitialize(new Proton.Radius(radius));\n      emitter.addInitialize(new Proton.Life(life));\n      emitter.addInitialize(new Proton.Velocity(v, tha, \"polar\"));\n      if (body) emitter.addInitialize(new Proton.Body(body));\n      var pos = void 0;\n\n      if (position === \"all\" || position === \"screen\") {\n        pos = new Proton.Position(new Proton.RectZone(0, 0, canvas.width, canvas.height));\n      } else if ((typeof position === \"undefined\" ? \"undefined\" : _typeof(position)) === \"object\") {\n        pos = new Proton.Position(new Proton.RectZone(position.x, position.y, position.width, position.height));\n      } else {\n        emitter.p.x = canvas.width / 2;\n        emitter.p.y = canvas.height / 2;\n      }\n\n      emitter.addInitialize(pos); /// behaviour\n\n      var alphaB = alpha ? new Proton.Alpha(alpha[0], alpha[1]) : new Proton.Alpha(0, 1);\n      var scaleB = scale ? new Proton.Scale(scale[0], scale[1]) : new Proton.Scale(1, 0.2);\n      var colorB = color ? new Proton.Color(color[0], color[1]) : new Proton.Color(this.colors);\n      emitter.addBehaviour(alphaB);\n      emitter.addBehaviour(scaleB);\n      if (!body) emitter.addBehaviour(colorB);\n\n      if (rotate) {\n        if (rotate[0] === true || rotate[0] === \"rotate\") {\n          emitter.addBehaviour(new Proton.Rotate());\n        } else {\n          emitter.addBehaviour(new Proton.Rotate(rotate[0], rotate[1]));\n        }\n      }\n\n      var zone = new Proton.RectZone(0, 0, canvas.width, canvas.height);\n      var crossZoneBehaviour = new Proton.CrossZone(zone, cross);\n      emitter.addBehaviour(crossZoneBehaviour);\n      random && emitter.addBehaviour(new Proton.RandomDrift(random, random, 0.05));\n      g && emitter.addBehaviour(new Proton.G(g));\n      f && emitter.addBehaviour(new Proton.F(f[0], f[1]));\n      emitter.emit();\n      this.proton.addEmitter(emitter);\n      var renderer = this.createRenderer(canvas);\n      this.proton.addRenderer(renderer);\n      this.emitter = emitter;\n      this.crossZoneBehaviour = crossZoneBehaviour;\n    }\n  }, {\n    key: \"createRenderer\",\n    value: function createRenderer(canvas) {\n      var width = canvas.width;\n      var height = canvas.height;\n      var context = canvas.getContext(\"2d\");\n      var renderer = new Proton.CanvasRenderer(canvas);\n      var onUpdate = this.getProp(\"onUpdate\");\n\n      if (onUpdate) {\n        renderer.onProtonUpdate = function () {\n          onUpdate(context, width, height);\n        };\n      }\n\n      var onParticleCreated = this.getProp(\"onParticleCreated\");\n\n      if (onParticleCreated) {\n        renderer.onParticleCreated = function (particle) {\n          onParticleCreated(context, particle);\n        };\n      }\n\n      var onParticleUpdate = this.getProp(\"onParticleUpdate\");\n\n      if (onParticleUpdate) {\n        renderer.onParticleUpdate = function (particle) {\n          onParticleUpdate(context, particle);\n        };\n      }\n\n      return renderer;\n    }\n  }, {\n    key: \"renderProton\",\n    value: function renderProton() {\n      this.proton && this.proton.update();\n    }\n  }, {\n    key: \"handleMouseDown\",\n    value: function handleMouseDown(e) {\n      var onMouseDown = this.getProp(\"onMouseDown\");\n\n      if (onMouseDown) {\n        onMouseDown(e);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var globalCompositeOperation = this.props.globalCompositeOperation || this.props.operation || \"source-over\";\n      return React.createElement(Canvas, {\n        bg: this.props.bg,\n        onMouseDown: this.handleMouseDown.bind(this),\n        globalCompositeOperation: globalCompositeOperation,\n        onCanvasInited: this.onCanvasInited.bind(this),\n        onResize: this.onResize.bind(this)\n      });\n    }\n  }]);\n  return Color;\n}(React.Component);\n\nvar Lines = function (_React$Component) {\n  inherits(Lines, _React$Component);\n\n  function Lines(props) {\n    classCallCheck(this, Lines);\n\n    var _this = possibleConstructorReturn(this, (Lines.__proto__ || Object.getPrototypeOf(Lines)).call(this, props));\n\n    _this.renderProton = _this.renderProton.bind(_this);\n    return _this;\n  }\n\n  createClass(Lines, [{\n    key: \"onCanvasDidMount\",\n    value: function onCanvasDidMount(canvas) {\n      if (this.props.color) {\n        canvas.style.backgroundColor = this.props.color;\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      try {\n        RAFManager.remove(this.renderProton);\n        this.proton.destroy();\n      } catch (e) {}\n    }\n  }, {\n    key: \"onCanvasInited\",\n    value: function onCanvasInited(canvas, width, height) {\n      this.createProton(canvas, width, height);\n      RAFManager.add(this.renderProton);\n    }\n  }, {\n    key: \"onResize\",\n    value: function onResize(width, height) {\n      this.crossZoneBehaviour.zone.width = width;\n      this.crossZoneBehaviour.zone.height = height;\n      this.proton.renderers[0].resize(width, height);\n    }\n  }, {\n    key: \"createProton\",\n    value: function createProton(canvas, width, height) {\n      this.proton = new Proton();\n      var emitter = new Proton.Emitter();\n      emitter.damping = 0.008;\n      emitter.rate = new Proton.Rate(this.props.num ? this.props.num : 250);\n      emitter.addInitialize(new Proton.Mass(1));\n      emitter.addInitialize(new Proton.Radius(4));\n      emitter.addInitialize(new Proton.Velocity(new Proton.Span(1.5), new Proton.Span(0, 360), \"polar\"));\n      var mouseObj = {\n        x: width / 2,\n        y: height / 2\n      };\n      var attractionBehaviour = new Proton.Attraction(mouseObj, 0, 0);\n      var crossZoneBehaviour = new Proton.CrossZone(new Proton.RectZone(0, 0, canvas.width, canvas.height), \"cross\");\n      emitter.addBehaviour(new Proton.Color(\"random\"));\n      emitter.addBehaviour(attractionBehaviour, crossZoneBehaviour);\n      emitter.addBehaviour(new Proton.RandomDrift(10, 10, 0.05));\n      emitter.p.x = canvas.width / 2;\n      emitter.p.y = canvas.height / 2;\n      emitter.emit(\"once\");\n      this.proton.addEmitter(emitter);\n      this.proton.addRenderer(this.createRenderer(canvas));\n      this.crossZoneBehaviour = crossZoneBehaviour;\n    }\n  }, {\n    key: \"createRenderer\",\n    value: function createRenderer(canvas) {\n      var _this2 = this;\n\n      var context = canvas.getContext(\"2d\");\n      var renderer = new Proton.CanvasRenderer(canvas);\n\n      renderer.onProtonUpdate = function () {\n        context.fillStyle = getColor(_this2.props.color, 0.02) || \"rgba(0, 0, 0, 0.02)\";\n        context.fillRect(0, 0, canvas.width, canvas.height);\n      };\n\n      renderer.onParticleUpdate = function (particle) {\n        context.beginPath();\n        context.strokeStyle = particle.color;\n        context.lineWidth = 1;\n        context.moveTo(particle.old.p.x, particle.old.p.y);\n        context.lineTo(particle.p.x, particle.p.y);\n        context.closePath();\n        context.stroke();\n      };\n\n      return renderer;\n    }\n  }, {\n    key: \"renderProton\",\n    value: function renderProton() {\n      this.proton && this.proton.update();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Canvas, {\n        bg: this.props.bg,\n        globalCompositeOperation: \"darker\",\n        onCanvasDidMount: this.onCanvasDidMount.bind(this),\n        onCanvasInited: this.onCanvasInited.bind(this),\n        onResize: this.onResize.bind(this)\n      });\n    }\n  }]);\n  return Lines;\n}(React.Component);\n\nvar Thick = function (_React$Component) {\n  inherits(Thick, _React$Component);\n\n  function Thick(props) {\n    classCallCheck(this, Thick);\n\n    var _this = possibleConstructorReturn(this, (Thick.__proto__ || Object.getPrototypeOf(Thick)).call(this, props));\n\n    _this.hue = 0;\n    _this.index = 0;\n    _this.colorTemplate = \"hsla(hue,80%,50%, 0.75)\";\n    _this.renderProton = _this.renderProton.bind(_this);\n    return _this;\n  }\n\n  createClass(Thick, [{\n    key: \"onCanvasDidMount\",\n    value: function onCanvasDidMount(canvas) {\n      if (this.props.color) {\n        canvas.style.backgroundColor = this.props.color;\n      }\n    }\n  }, {\n    key: \"onCanvasInited\",\n    value: function onCanvasInited(canvas, width, height) {\n      this.canvas = canvas;\n      this.createProton(canvas, width, height);\n      RAFManager.add(this.renderProton);\n    }\n  }, {\n    key: \"onResize\",\n    value: function onResize(width, height) {\n      this.crossZoneBehaviour.zone.width = width;\n      this.crossZoneBehaviour.zone.height = height;\n      this.proton.renderers[0].resize(width, height);\n    }\n  }, {\n    key: \"createProton\",\n    value: function createProton(canvas, width, height) {\n      this.proton = new Proton();\n      var emitter = new Proton.Emitter();\n      emitter.damping = 0.008;\n      emitter.rate = new Proton.Rate(this.props.num ? this.props.num : 150); // Initialize\n\n      emitter.addInitialize(new Proton.Mass(1));\n      emitter.addInitialize(new Proton.Radius(8));\n      emitter.addInitialize(new Proton.V(new Proton.Span(0.1, 0.5), new Proton.Span(0, 360), \"polar\"));\n      emitter.addInitialize(new Proton.Position(new Proton.CircleZone(canvas.width / 2, canvas.height / 2, 100))); // Behaviour\n\n      var crossZoneBehaviour = new Proton.CrossZone(new Proton.RectZone(0, 0, canvas.width, canvas.height), \"cross\");\n      emitter.addBehaviour(crossZoneBehaviour);\n      this.repulsion = new Proton.Repulsion({\n        x: canvas.width / 2,\n        y: canvas.height / 2 - 100\n      }, 3, 300);\n      this.attraction = new Proton.Attraction({\n        x: canvas.width / 2,\n        y: canvas.height / 2\n      }, 3, 200);\n      emitter.addBehaviour(this.attraction, this.repulsion);\n      emitter.addBehaviour(new Proton.Color(\"random\"));\n      emitter.addBehaviour(new Proton.RandomDrift(20, 15, 0.15));\n      emitter.emit(\"once\");\n      this.proton.addEmitter(emitter);\n      this.proton.addRenderer(this.createRenderer(canvas));\n      this.crossZoneBehaviour = crossZoneBehaviour;\n    }\n  }, {\n    key: \"createRenderer\",\n    value: function createRenderer(canvas) {\n      var _this2 = this;\n\n      var context = canvas.getContext(\"2d\");\n      var renderer = new Proton.CanvasRenderer(canvas);\n\n      renderer.onProtonUpdate = function () {\n        _this2.hue += 1;\n        context.fillStyle = getColor(_this2.props.color, 0.02) || \"rgba(0, 0, 0, 0.02)\";\n        context.fillRect(0, 0, canvas.width, canvas.height);\n      };\n\n      renderer.onParticleCreated = function (particle) {\n        particle.data.begin = Proton.MathUtil.randomAToB(1, 120);\n        particle.data.tha = Proton.MathUtil.randomAToB(0, Math.PI * 2);\n      };\n\n      renderer.onParticleUpdate = function (particle) {\n        var hue = particle.data.begin + _this2.hue;\n        particle.color = _this2.colorTemplate.replace(\"hue\", hue % 360);\n        var ratio = 3 / 4;\n        var radius = particle.radius * (1 - ratio) * Math.cos(particle.data.tha += 0.01) + particle.radius * ratio;\n        context.beginPath();\n        context.fillStyle = particle.color;\n        context.arc(particle.p.x, particle.p.y, radius, 0, Math.PI * 2, true);\n        context.closePath();\n        context.fill();\n      };\n\n      return renderer;\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      try {\n        RAFManager.remove(this.renderProton);\n        this.proton.destroy();\n      } catch (e) {}\n    }\n  }, {\n    key: \"renderProton\",\n    value: function renderProton() {\n      var canvas = this.canvas;\n      this.proton.update();\n\n      if (this.index % 200 === 0) {\n        this.attraction.targetPosition.x = Math.random() * canvas.width;\n        this.attraction.targetPosition.y = Math.random() * canvas.height;\n        this.repulsion.targetPosition.x = Math.random() * canvas.width;\n        this.repulsion.targetPosition.y = Math.random() * canvas.height;\n      }\n\n      this.index++;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Canvas, {\n        bg: this.props.bg,\n        onCanvasDidMount: this.onCanvasDidMount.bind(this),\n        onCanvasInited: this.onCanvasInited.bind(this),\n        onResize: this.onResize.bind(this)\n      });\n    }\n  }]);\n  return Thick;\n}(React.Component);\n\nvar Square = function (_React$Component) {\n  inherits(Square, _React$Component);\n\n  function Square(props) {\n    classCallCheck(this, Square);\n\n    var _this = possibleConstructorReturn(this, (Square.__proto__ || Object.getPrototypeOf(Square)).call(this, props));\n\n    _this.colors = [\"#fad390\", \"#81ecec\", \"#ffffff\", \"#badc58\", \"#f9ca24\", \"#FEA47F\"];\n    _this.renderProton = _this.renderProton.bind(_this);\n    return _this;\n  }\n\n  createClass(Square, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      try {\n        RAFManager.remove(this.renderProton);\n        this.proton.destroy();\n      } catch (e) {}\n    }\n  }, {\n    key: \"onCanvasDidMount\",\n    value: function onCanvasDidMount(canvas) {}\n  }, {\n    key: \"onCanvasInited\",\n    value: function onCanvasInited(canvas, width, height) {\n      this.createProton(canvas, width, height);\n      RAFManager.add(this.renderProton);\n    }\n  }, {\n    key: \"onResize\",\n    value: function onResize(width, height) {\n      var dis = 150;\n      this.crossZoneBehaviour.zone.width = width + 2 * dis;\n      this.crossZoneBehaviour.zone.height = height + 2 * dis;\n      this.proton.renderers[0].resize(width, height);\n    }\n  }, {\n    key: \"createProton\",\n    value: function createProton(canvas, width, height) {\n      this.proton = new Proton();\n      var emitter = new Proton.Emitter();\n      emitter.rate = new Proton.Rate(this.props.num ? this.props.num : 50);\n      emitter.damping = 0;\n      emitter.addInitialize(new Proton.Mass(1));\n      emitter.addInitialize(new Proton.Radius(4, 70));\n      emitter.addInitialize(new Proton.Velocity(new Proton.Span(2, 10), new Proton.Span(0), \"polar\"));\n      emitter.addInitialize(new Proton.Position(new Proton.LineZone(0, canvas.height, canvas.width, canvas.height)));\n      var dis = 150;\n      var crossZoneBehaviour = new Proton.CrossZone(new Proton.RectZone(0 - dis, 0 - dis, canvas.width + 2 * dis, canvas.height + 2 * dis), \"cross\");\n      emitter.addBehaviour(crossZoneBehaviour);\n      emitter.addBehaviour(new Proton.Alpha(Proton.getSpan(0.1, 0.55)));\n      emitter.addBehaviour(new Proton.Color(this.colors));\n      emitter.emit(\"once\");\n      this.proton.addEmitter(emitter);\n      var renderer = this.createRenderer(canvas);\n      this.proton.addRenderer(renderer);\n      this.crossZoneBehaviour = crossZoneBehaviour;\n      emitter.preEmit(2);\n    }\n  }, {\n    key: \"createRenderer\",\n    value: function createRenderer(canvas) {\n      var context = canvas.getContext(\"2d\");\n      var renderer = new Proton.CustomRenderer();\n\n      renderer.onProtonUpdate = function () {\n        context.clearRect(0, 0, canvas.width, canvas.height);\n      };\n\n      renderer.onParticleCreated = function (particle) {\n        var w = particle.radius || 60;\n        var h = Proton.MathUtil.randomAToB(100, 200, \"int\");\n        particle.data.w = w;\n        particle.data.h = h;\n      };\n\n      renderer.onParticleUpdate = function (particle) {\n        var w = particle.data.w;\n        var h = particle.data.h;\n        context.save();\n        context.globalAlpha = particle.alpha;\n        context.fillStyle = particle.color;\n        context.translate(particle.p.x, particle.p.y);\n        context.rotate(Proton.MathUtil.degreeTransform(particle.rotation));\n        context.translate(-particle.p.x, -particle.p.y);\n        context.beginPath();\n        context.rect(particle.p.x - w / 2, particle.p.y - h / 2, w, h);\n        context.closePath();\n        context.fill();\n        context.globalAlpha = 1;\n        context.restore();\n      };\n\n      return renderer;\n    }\n  }, {\n    key: \"renderProton\",\n    value: function renderProton() {\n      this.proton && this.proton.update();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Canvas, {\n        bg: this.props.bg,\n        globalCompositeOperation: \"lighter\",\n        onCanvasDidMount: this.onCanvasDidMount.bind(this),\n        onCanvasInited: this.onCanvasInited.bind(this),\n        onResize: this.onResize.bind(this)\n      });\n    }\n  }]);\n  return Square;\n}(React.Component);\n\nvar Cobweb = function (_React$Component) {\n  inherits(Cobweb, _React$Component);\n\n  function Cobweb(props) {\n    classCallCheck(this, Cobweb);\n\n    var _this = possibleConstructorReturn(this, (Cobweb.__proto__ || Object.getPrototypeOf(Cobweb)).call(this, props));\n\n    _this.renderProton = _this.renderProton.bind(_this);\n    return _this;\n  }\n\n  createClass(Cobweb, [{\n    key: \"onCanvasInited\",\n    value: function onCanvasInited(canvas, width, height) {\n      this.createProton(canvas, width, height);\n      RAFManager.add(this.renderProton);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      try {\n        RAFManager.remove(this.renderProton);\n        this.proton.destroy();\n      } catch (e) {}\n    }\n  }, {\n    key: \"onResize\",\n    value: function onResize(width, height) {\n      this.crossZoneBehaviour.zone.width = width;\n      this.crossZoneBehaviour.zone.height = height;\n      this.proton.renderers[0].resize(width, height);\n    }\n  }, {\n    key: \"createProton\",\n    value: function createProton(canvas, width, height) {\n      this.proton = new Proton();\n      var emitter = new Proton.Emitter();\n      emitter.rate = new Proton.Rate(this.props.num ? new Proton.Span(this.props.num) : new Proton.Span(100), new Proton.Span(0.05, 0.2));\n      emitter.addInitialize(new Proton.Mass(1));\n      emitter.addInitialize(new Proton.Radius(1, 4));\n      emitter.addInitialize(new Proton.Life(Infinity));\n      var pointZone = new Proton.Position(new Proton.RectZone(0, 0, width, height));\n      emitter.addInitialize(pointZone);\n      emitter.addInitialize(new Proton.Velocity(new Proton.Span(0.3, 0.6), new Proton.Span(0, 360), \"polar\"));\n      emitter.addBehaviour(new Proton.Alpha(Proton.getSpan(0.2, 0.9)));\n      emitter.addBehaviour(new Proton.Color(this.props.color || \"#333\"));\n      this.crossZoneBehaviour = new Proton.CrossZone(new Proton.RectZone(0, 0, width, height), \"cross\");\n      emitter.addBehaviour(this.crossZoneBehaviour);\n      emitter.emit(\"once\");\n      emitter.damping = 0;\n      this.proton.addEmitter(emitter);\n      this.proton.addRenderer(this.createRenderer(canvas, emitter));\n    }\n  }, {\n    key: \"createRenderer\",\n    value: function createRenderer(canvas, emitter) {\n      var _this2 = this;\n\n      var context = canvas.getContext(\"2d\");\n      var renderer = new Proton.CanvasRenderer(canvas);\n      var R = 140;\n\n      renderer.onProtonUpdateAfter = function () {\n        var particles = emitter.particles;\n\n        for (var i = 0; i < particles.length; i++) {\n          for (var j = i + 1; j < particles.length; j++) {\n            var pA = particles[i];\n            var pB = particles[j];\n            var dis = pA.p.distanceTo(pB.p);\n\n            if (dis < R) {\n              var alpha = (1 - dis / R) * 0.5;\n              context.strokeStyle = getColor(_this2.props.color, alpha) || \"rgba(3, 3, 3, \" + alpha + \")\";\n              context.beginPath();\n              context.moveTo(pA.p.x, pA.p.y);\n              context.lineTo(pB.p.x, pB.p.y);\n              context.closePath();\n              context.stroke();\n            }\n          }\n        }\n      };\n\n      return renderer;\n    }\n  }, {\n    key: \"renderProton\",\n    value: function renderProton() {\n      this.proton && this.proton.update();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Canvas, {\n        bg: this.props.bg,\n        globalCompositeOperation: \"darker\",\n        onCanvasInited: this.onCanvasInited.bind(this),\n        onResize: this.onResize.bind(this)\n      });\n    }\n  }]);\n  return Cobweb;\n}(React.Component);\n\nvar Circle = function (_React$Component) {\n  inherits(Circle, _React$Component);\n\n  function Circle(props) {\n    classCallCheck(this, Circle);\n\n    var _this = possibleConstructorReturn(this, (Circle.__proto__ || Object.getPrototypeOf(Circle)).call(this, props));\n\n    _this.colors = [\"#74b9ff\", \"#e84393\", \"#6c5ce7\", \"#00b894\", \"#fdcb6e\", \"#006266\", \"#1B1464\"];\n    _this.renderProton = _this.renderProton.bind(_this);\n    return _this;\n  }\n\n  createClass(Circle, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      try {\n        RAFManager.remove(this.renderProton);\n        this.proton.destroy();\n      } catch (e) {}\n    }\n  }, {\n    key: \"onCanvasInited\",\n    value: function onCanvasInited(canvas, width, height) {\n      this.createProton(canvas, width, height);\n      RAFManager.add(this.renderProton);\n    }\n  }, {\n    key: \"onResize\",\n    value: function onResize(width, height) {\n      this.crossZoneBehaviour.zone.width = width;\n      this.crossZoneBehaviour.zone.height = height;\n      this.proton.renderers[0].resize(width, height);\n    }\n  }, {\n    key: \"createProton\",\n    value: function createProton(canvas, width, height) {\n      this.proton = new Proton();\n      var emitter = new Proton.Emitter();\n      emitter.rate = new Proton.Rate(this.props.num || 20);\n      emitter.damping = 0.008;\n      emitter.addInitialize(new Proton.Mass(1));\n      emitter.addInitialize(new Proton.Radius(30, 600));\n      emitter.addInitialize(new Proton.Velocity(new Proton.Span(0.5), new Proton.Span(0, 360), \"polar\"));\n      emitter.addInitialize(new Proton.Position(new Proton.RectZone(0, 0, canvas.width, canvas.height)));\n      var crossZoneBehaviour = new Proton.CrossZone(new Proton.RectZone(0, 0, canvas.width, canvas.height), \"cross\");\n      emitter.addBehaviour(crossZoneBehaviour);\n      emitter.addBehaviour(new Proton.Alpha(Proton.getSpan(0.35, 0.55)));\n      emitter.addBehaviour(new Proton.Color(this.getColor()));\n      emitter.addBehaviour(new Proton.RandomDrift(50, 50, 0.5));\n      emitter.emit(\"once\");\n      this.proton.addEmitter(emitter);\n      var renderer = new Proton.CanvasRenderer(canvas);\n      this.proton.addRenderer(renderer);\n      this.crossZoneBehaviour = crossZoneBehaviour;\n    }\n  }, {\n    key: \"getColor\",\n    value: function getColor() {\n      var c = this.colors;\n\n      if (this.props.color) {\n        if (Array.isArray(this.props.color)) {\n          c = this.props.color;\n        } else {\n          c = [this.props.color];\n        }\n      }\n\n      return c;\n    }\n  }, {\n    key: \"renderProton\",\n    value: function renderProton() {\n      this.proton && this.proton.update();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Canvas, {\n        bg: this.props.bg,\n        globalCompositeOperation: \"darken\",\n        onCanvasInited: this.onCanvasInited.bind(this),\n        onResize: this.onResize.bind(this)\n      });\n    }\n  }]);\n  return Circle;\n}(React.Component);\n\nvar Tadpole = function (_React$Component) {\n  inherits(Tadpole, _React$Component);\n\n  function Tadpole(props) {\n    classCallCheck(this, Tadpole);\n\n    var _this = possibleConstructorReturn(this, (Tadpole.__proto__ || Object.getPrototypeOf(Tadpole)).call(this, props));\n\n    _this.renderProton = _this.renderProton.bind(_this);\n    return _this;\n  }\n\n  createClass(Tadpole, [{\n    key: \"onCanvasDidMount\",\n    value: function onCanvasDidMount(canvas) {}\n  }, {\n    key: \"onCanvasInited\",\n    value: function onCanvasInited(canvas, width, height) {\n      this.createProton(canvas, width, height);\n      this.renderProton();\n    }\n  }, {\n    key: \"onResize\",\n    value: function onResize(width, height) {\n      this.crossZoneBehaviour.zone.width = width;\n      this.crossZoneBehaviour.zone.height = height;\n      this.proton.renderers[0].resize(width, height);\n    }\n  }, {\n    key: \"createProton\",\n    value: function createProton(canvas, width, height) {\n      this.proton = new Proton();\n      var emitter = new Proton.Emitter();\n      emitter.damping = 0.008;\n      emitter.rate = new Proton.Rate(this.props.num ? this.props.num : 50);\n      emitter.addInitialize(new Proton.Mass(1));\n      emitter.addInitialize(new Proton.Radius(5, 9));\n      emitter.addInitialize(new Proton.Velocity(new Proton.Span(1.5), new Proton.Span(0, 360), \"polar\"));\n      emitter.addInitialize(new Proton.Position(new Proton.RectZone(0, 0, width, height)));\n      var mouseInfo = {\n        x: width / 2,\n        y: height / 2\n      };\n      var attractionBehaviour = new Proton.Attraction(mouseInfo, 0, 0);\n      var crossZoneBehaviour = new Proton.CrossZone(new Proton.RectZone(0, 0, canvas.width, canvas.height), \"bound\");\n      emitter.addBehaviour(new Proton.Color(this.props.color || \"#bbb\")); //emitter.addBehaviour(new Proton.Alpha(new Proton.Span(0.5, 1)));\n\n      emitter.addBehaviour(attractionBehaviour, crossZoneBehaviour);\n      emitter.addBehaviour(new Proton.RandomDrift(15, 15, 0.05));\n      emitter.emit(\"once\");\n      this.proton.addEmitter(emitter);\n      this.proton.addRenderer(this.createRenderer(canvas));\n      this.crossZoneBehaviour = crossZoneBehaviour;\n    }\n  }, {\n    key: \"createRenderer\",\n    value: function createRenderer(canvas) {\n      var jointCount = 10;\n      var delayTime = 8;\n      var context = canvas.getContext(\"2d\");\n      var renderer = new Proton.CanvasRenderer(canvas);\n\n      renderer.onProtonUpdate = function () {\n        context.clearRect(0, 0, canvas.width, canvas.height);\n      };\n\n      renderer.onParticleCreated = function (particle) {\n        particle.data.points = [];\n        particle.data.index = 0;\n      };\n\n      renderer.onParticleUpdate = function (particle) {\n        drawTadpoleTail(particle);\n        if (particle.data.index % delayTime === 0) fillPointsData(particle);\n        drawTadpoleHead(particle);\n        particle.data.index++;\n      };\n\n      var fillPointsData = function fillPointsData(particle) {\n        particle.data.points.unshift(particle.p.y);\n        particle.data.points.unshift(particle.p.x);\n\n        if (particle.data.points.length > jointCount) {\n          particle.data.points.pop();\n          particle.data.points.pop();\n        }\n      };\n\n      var drawTadpoleHead = function drawTadpoleHead(particle) {\n        context.fillStyle = particle.color;\n        context.beginPath();\n        context.arc(particle.p.x, particle.p.y, particle.radius, 0, Math.PI * 2, true);\n        context.closePath();\n        context.fill();\n      };\n\n      var drawTadpoleTail = function drawTadpoleTail(particle) {\n        context.beginPath();\n        context.strokeStyle = particle.color;\n        context.moveTo(particle.p.x, particle.p.y);\n        var l = particle.data.points.length;\n\n        for (var i = 0; i < l; i += 2) {\n          var x = particle.data.points[i];\n          var y = particle.data.points[i + 1];\n          context.lineWidth = linearEvaluation(i, l);\n          context.lineTo(x, y);\n          context.stroke();\n        }\n      };\n\n      var linearEvaluation = function linearEvaluation(i, l) {\n        if (l <= 2) return 1;\n        var max = 6;\n        var A = (max - 1) / (2 / l - 1);\n        var B = 1 - A;\n        var X = (i + 2) / l;\n        var val = A * X + B;\n        val = val >> 0;\n        return val;\n      };\n\n      return renderer;\n    }\n  }, {\n    key: \"renderProton\",\n    value: function renderProton() {\n      var _this2 = this;\n\n      RAFManager.add(function () {\n        _this2.proton.update(); //this.proton.stats.update();\n\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Canvas, {\n        bg: this.props.bg,\n        globalCompositeOperation: \"darker\",\n        onCanvasDidMount: this.onCanvasDidMount.bind(this),\n        onCanvasInited: this.onCanvasInited.bind(this),\n        onResize: this.onResize.bind(this)\n      });\n    }\n  }]);\n  return Tadpole;\n}(React.Component);\n\nvar COLOR = [\"#f6b93b\", \"#18dcff\", \"#cd84f1\", \"#ED4C67\", \"#ffffff\", \"#b71540\", \"#32ff7e\", \"#ff3838\"];\n\nvar Polygon = function (_React$Component) {\n  inherits(Polygon, _React$Component);\n\n  function Polygon(props) {\n    classCallCheck(this, Polygon);\n\n    var _this = possibleConstructorReturn(this, (Polygon.__proto__ || Object.getPrototypeOf(Polygon)).call(this, props));\n\n    _this.renderProton = _this.renderProton.bind(_this);\n    return _this;\n  }\n\n  createClass(Polygon, [{\n    key: \"onCanvasInited\",\n    value: function onCanvasInited(canvas, width, height) {\n      this.createProton(canvas);\n      this.createEmitter({\n        canvas: canvas,\n        x: width / 2,\n        y: height / 2,\n        mainEmitter: true,\n        zone: \"bound\"\n      });\n      RAFManager.add(this.renderProton);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      try {\n        RAFManager.remove(this.renderProton);\n        this.proton.destroy();\n      } catch (e) {}\n    }\n  }, {\n    key: \"onResize\",\n    value: function onResize() {}\n  }, {\n    key: \"createProton\",\n    value: function createProton(canvas) {\n      this.proton = new Proton();\n      var renderer = this.createRenderer(canvas);\n      this.proton.addRenderer(renderer);\n    }\n  }, {\n    key: \"createRenderer\",\n    value: function createRenderer(canvas) {\n      var context = canvas.getContext(\"2d\");\n      var renderer = new Proton.CustomRenderer();\n\n      renderer.onProtonUpdate = function () {\n        context.clearRect(0, 0, canvas.width, canvas.height);\n      };\n\n      renderer.onParticleCreated = function (particle) {\n        particle.data.count = Proton.MathUtil.randomAToB(3, 10, true);\n      };\n\n      renderer.onParticleUpdate = function (particle) {\n        context.save();\n        context.globalAlpha = particle.alpha;\n        context.fillStyle = particle.color;\n        context.translate(particle.p.x, particle.p.y);\n        context.rotate(Proton.MathUtil.degreeTransform(particle.rotation));\n        context.translate(-particle.p.x, -particle.p.y);\n        context.beginPath();\n        drawPolygon(particle, particle.data.count);\n        context.closePath();\n        context.fill();\n        context.globalAlpha = 1;\n        context.restore();\n      };\n\n      renderer.onParticleDead = function (particle) {};\n\n      var drawPolygon = function drawPolygon(particle, count) {\n        if (count >= 7) {\n          context.arc(particle.p.x, particle.p.y, particle.radius, 0, Math.PI * 2, true);\n        } else {\n          var radius = particle.radius;\n\n          for (var i = 0; i <= count; i++) {\n            var x = particle.p.x + radius * Math.cos(Math.PI / 180 * 360 / count * i);\n            var y = particle.p.y + radius * Math.sin(Math.PI / 180 * 360 / count * i);\n            if (i === 0) context.moveTo(x, y);else context.lineTo(x, y);\n          }\n        }\n      };\n\n      return renderer;\n    }\n  }, {\n    key: \"createEmitter\",\n    value: function createEmitter(_ref) {\n      var mainEmitter = _ref.mainEmitter,\n          canvas = _ref.canvas,\n          x = _ref.x,\n          y = _ref.y,\n          radius = _ref.radius,\n          _ref$color = _ref.color,\n          color = _ref$color === undefined ? COLOR : _ref$color,\n          _ref$zone = _ref.zone,\n          zone = _ref$zone === undefined ? \"dead\" : _ref$zone,\n          _ref$once = _ref.once,\n          once = _ref$once === undefined ? \"all\" : _ref$once,\n          _ref$alpha = _ref.alpha,\n          alpha = _ref$alpha === undefined ? 0.85 : _ref$alpha,\n          _ref$gravity = _ref.gravity,\n          gravity = _ref$gravity === undefined ? 3.5 : _ref$gravity;\n      var emitter = this.proton.pool.get(Proton.Emitter);\n\n      if (!emitter.completed) {\n        emitter.rate = new Proton.Rate(this.props.num ? new Proton.Span(this.props.num) : new Proton.Span(4, 9), new Proton.Span(1.6, 2.2));\n        var radiusInit = mainEmitter ? new Proton.Radius(10, 110) : new Proton.Radius(3, radius);\n        emitter.addInitialize(new Proton.Mass(1));\n        emitter.addInitialize(radiusInit);\n        emitter.addInitialize(new Proton.Life(3, 6));\n        emitter.addInitialize(new Proton.Velocity(new Proton.Span(4, 6), new Proton.Span(-90, 90), \"polar\"));\n        emitter.addBehaviour(new Proton.Alpha(alpha, 0.2));\n        emitter.addBehaviour(new Proton.Color(color));\n        emitter.addBehaviour(new Proton.Scale(1, 0.3));\n        emitter.addBehaviour(new Proton.Rotate());\n        emitter.addBehaviour(new Proton.Gravity(gravity));\n        emitter.addBehaviour(this.customDeadBehaviour(canvas));\n        emitter.addBehaviour(new Proton.CrossZone(new Proton.RectZone(0, 0, canvas.width, canvas.height), zone));\n      }\n\n      emitter.p.x = x;\n      emitter.p.y = y;\n      if (once === \"once\") emitter.emit(\"once\");else emitter.emit();\n      this.proton.addEmitter(emitter); //this.expireEmitter(emitter);\n    }\n  }, {\n    key: \"expireEmitter\",\n    value: function expireEmitter(emitter) {\n      var _this2 = this;\n\n      setTimeout(function () {\n        emitter.completed = true;\n\n        _this2.proton.pool.expire(emitter);\n\n        _this2.proton.removeEmitter(emitter);\n      }, 500);\n    }\n  }, {\n    key: \"customDeadBehaviour\",\n    value: function customDeadBehaviour(canvas) {\n      var _this3 = this;\n\n      return {\n        initialize: function initialize(particle) {\n          particle.data = particle.data || {};\n          particle.data.oldRadius = particle.radius;\n          particle.data.emitterCount = 0;\n        },\n        applyBehaviour: function applyBehaviour(particle) {\n          if (particle.radius < 5) return;\n          if (particle.data.emitterCount >= 2) return;\n\n          if (particle.radius <= 1 / 3 * particle.data.oldRadius) {\n            particle.data.emitterCount++;\n\n            _this3.createEmitter({\n              canvas: canvas,\n              x: particle.p.x,\n              y: particle.p.y,\n              radius: particle.radius * (1 / 2),\n              alpha: 0.5,\n              gravity: 5,\n              color: particle.color,\n              once: \"once\"\n            });\n          }\n        }\n      };\n    }\n  }, {\n    key: \"renderProton\",\n    value: function renderProton() {\n      this.proton && this.proton.update();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Canvas, {\n        bg: this.props.bg,\n        globalCompositeOperation: \"darker\",\n        onCanvasInited: this.onCanvasInited.bind(this),\n        onResize: this.onResize.bind(this)\n      });\n    }\n  }]);\n  return Polygon;\n}(React.Component);\n\nvar Fountain = function (_React$Component) {\n  inherits(Fountain, _React$Component);\n\n  function Fountain(props) {\n    classCallCheck(this, Fountain);\n\n    var _this = possibleConstructorReturn(this, (Fountain.__proto__ || Object.getPrototypeOf(Fountain)).call(this, props));\n\n    _this.colors = [\"#529B88\", \"#CDD180\", \"#FFFA32\", \"#FB6255\", \"#FB4A53\", \"#FF4E50\", \"#F9D423\"];\n    _this.renderProton = _this.renderProton.bind(_this);\n    return _this;\n  }\n\n  createClass(Fountain, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      try {\n        RAFManager.remove(this.renderProton);\n        this.proton.destroy();\n      } catch (e) {}\n    }\n  }, {\n    key: \"onCanvasInited\",\n    value: function onCanvasInited(canvas, width, height) {\n      this.createProton(canvas, width, height);\n      RAFManager.add(this.renderProton);\n    }\n  }, {\n    key: \"onResize\",\n    value: function onResize() {}\n  }, {\n    key: \"createProton\",\n    value: function createProton(canvas, width, height) {\n      this.proton = new Proton();\n      var emitter = new Proton.Emitter();\n      emitter.rate = new Proton.Rate(this.props.num ? new Proton.Span(this.props.num) : new Proton.Span(4, 8), new Proton.Span(0.1, 0.25));\n      emitter.addInitialize(new Proton.Mass(1));\n      emitter.addInitialize(new Proton.Radius(20, 200));\n      emitter.addInitialize(new Proton.Life(2, 4));\n      emitter.addInitialize(new Proton.Velocity(new Proton.Span(4, 7), new Proton.Span(0, 360), \"polar\"));\n      emitter.addInitialize(new Proton.Position(new Proton.CircleZone(width / 2, height / 2, 100)));\n      emitter.addBehaviour(new Proton.Alpha(1, 0));\n      emitter.addBehaviour(new Proton.Scale(0.2, 1));\n      emitter.addBehaviour(this.createCustomBehaviour());\n      emitter.addBehaviour(new Proton.Color(this.colors, \"random\"));\n      emitter.emit();\n      this.proton.addEmitter(emitter);\n      var renderer = new Proton.CanvasRenderer(canvas);\n      this.proton.addRenderer(renderer);\n    }\n  }, {\n    key: \"createCustomBehaviour\",\n    value: function createCustomBehaviour() {\n      var f = 10 * 100;\n      return {\n        initialize: function initialize(particle) {\n          particle.f = new Proton.Vector2D(0, 0);\n        },\n        applyBehaviour: function applyBehaviour(particle) {\n          var length = particle.v.length() / 1000;\n          var gradient = particle.v.getGradient();\n          gradient += 3.14 / 2;\n          particle.f.x = f * length * Math.cos(gradient);\n          particle.f.y = f * length * Math.sin(gradient);\n          particle.a.add(particle.f);\n        }\n      };\n    }\n  }, {\n    key: \"renderProton\",\n    value: function renderProton() {\n      this.proton && this.proton.update();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Canvas, {\n        bg: this.props.bg,\n        globalCompositeOperation: \"xor\",\n        onCanvasInited: this.onCanvasInited.bind(this),\n        onResize: this.onResize.bind(this)\n      });\n    }\n  }]);\n  return Fountain;\n}(React.Component);\n\nvar ParticlesBg = function (_Component) {\n  inherits(ParticlesBg, _Component);\n\n  function ParticlesBg(props) {\n    classCallCheck(this, ParticlesBg);\n    return possibleConstructorReturn(this, (ParticlesBg.__proto__ || Object.getPrototypeOf(ParticlesBg)).call(this, props));\n  }\n\n  createClass(ParticlesBg, [{\n    key: \"getRandom\",\n    value: function getRandom() {\n      var _props = this.props,\n          num = _props.num,\n          bg = _props.bg,\n          color = _props.color; // Code source from here, thanks author\n      // https://github.com/drawcall/Proton/blob/gh-pages/source/src/utils/Rand.js\n\n      if (!this.random) {\n        this.random = new Rand();\n        this.random.set(0.25, React.createElement(Color, {\n          num: num,\n          bg: bg,\n          color: color\n        }));\n        this.random.set(0.2, React.createElement(Ball, {\n          num: num,\n          bg: bg,\n          color: color\n        }));\n        this.random.set(0.2, React.createElement(Lines, {\n          num: num,\n          bg: bg,\n          color: color\n        }));\n        this.random.set(0.16, React.createElement(Thick, {\n          num: num,\n          bg: bg,\n          color: color\n        }));\n        this.random.set(0.18, React.createElement(Circle, {\n          num: num,\n          bg: bg,\n          color: color\n        }));\n        this.random.set(0.04, React.createElement(Cobweb, {\n          num: num,\n          bg: bg,\n          color: color\n        }));\n        this.random.set(0.1, React.createElement(Polygon, {\n          num: num,\n          bg: bg,\n          color: color\n        }));\n        this.random.set(0.08, React.createElement(Square, {\n          num: num,\n          bg: bg,\n          color: color\n        }));\n        this.random.set(0.18, React.createElement(Tadpole, {\n          num: num,\n          bg: bg,\n          color: color\n        }));\n        this.random.set(0.15, React.createElement(Fountain, {\n          num: num,\n          bg: bg,\n          color: color\n        }));\n      }\n\n      return this.random.getResult();\n    }\n  }, {\n    key: \"getBgParticles\",\n    value: function getBgParticles() {\n      var _props2 = this.props,\n          type = _props2.type,\n          num = _props2.num,\n          bg = _props2.bg,\n          color = _props2.color,\n          config = _props2.config;\n      var particles = void 0;\n\n      switch (String(type).toLowerCase()) {\n        case \"color\":\n          particles = React.createElement(Color, {\n            num: num,\n            bg: bg,\n            color: color\n          });\n          break;\n\n        case \"ball\":\n          particles = React.createElement(Ball, {\n            num: num,\n            bg: bg,\n            color: color\n          });\n          break;\n\n        case \"lines\":\n          particles = React.createElement(Lines, {\n            num: num,\n            bg: bg,\n            color: color\n          });\n          break;\n\n        case \"thick\":\n          particles = React.createElement(Thick, {\n            num: num,\n            bg: bg,\n            color: color\n          });\n          break;\n\n        case \"circle\":\n          particles = React.createElement(Circle, {\n            num: num,\n            bg: bg,\n            color: color\n          });\n          break;\n\n        case \"cobweb\":\n          particles = React.createElement(Cobweb, {\n            num: num,\n            bg: bg,\n            color: color\n          });\n          break;\n\n        case \"polygon\":\n          particles = React.createElement(Polygon, {\n            num: num,\n            bg: bg,\n            color: color\n          });\n          break;\n\n        case \"square\":\n          particles = React.createElement(Square, {\n            num: num,\n            bg: bg,\n            color: color\n          });\n          break;\n\n        case \"tadpole\":\n          particles = React.createElement(Tadpole, {\n            num: num,\n            bg: bg,\n            color: color\n          });\n          break;\n\n        case \"fountain\":\n          particles = React.createElement(Fountain, {\n            num: num,\n            bg: bg,\n            color: color\n          });\n          break;\n\n        case \"custom\":\n          particles = React.createElement(Color$1, {\n            bg: bg,\n            config: config\n          });\n          break;\n\n        case \"random\":\n          particles = this.getRandom(num);\n          break;\n\n        default:\n          particles = React.createElement(Color, {\n            num: num,\n            bg: bg,\n            color: color\n          });\n          break;\n      }\n\n      return particles;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var particles = this.getBgParticles();\n      return React.createElement(React.Fragment, null, particles);\n    }\n  }]);\n  return ParticlesBg;\n}(Component);\n\nexport default ParticlesBg;","map":{"version":3,"sources":["../src/utils/Rand.js","../src/particles/Canvas.jsx","../src/utils/Color.js","../src/particles/Ball.jsx","../src/particles/Color.jsx","../src/particles/Custom.jsx","../src/particles/Lines.jsx","../src/particles/Thick.jsx","../src/particles/Square.jsx","../src/particles/Cobweb.jsx","../src/particles/Circle.jsx","../src/particles/Tadpole.jsx","../src/particles/Polygon.jsx","../src/particles/Fountain.jsx","../src/index.js"],"names":["Rand","probability","target","total","i","obj","val","Math","Canvas","React","Component","width","height","canvas","context","newHeight","style","e","result","parseInt","c","hexToRgb","Ball","emitter","Proton","renderer","getColor","particle","miniEmitter","Color","key","defaultVal","config","Array","num","rps","mass","radius","life","body","position","v","tha","alpha","scale","color","cross","random","rotate","g","f","emitterV","pos","alphaB","scaleB","colorB","zone","crossZoneBehaviour","onUpdate","onParticleCreated","onParticleUpdate","onMouseDown","globalCompositeOperation","Lines","mouseObj","attractionBehaviour","Thick","hue","ratio","Square","dis","w","h","Cobweb","pointZone","R","particles","j","pA","pB","Circle","Tadpole","mouseInfo","jointCount","delayTime","fillPointsData","drawTadpoleHead","drawTadpoleTail","l","x","y","linearEvaluation","max","A","B","X","COLOR","Polygon","drawPolygon","count","mainEmitter","once","gravity","radiusInit","Fountain","length","gradient","ParticlesBg","bg","type","String"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;IAEMA,IAAAA,GAAAA,YAAAA;kBAEU;;SACV,I,GAAA,E;;;;;2BAGAC,W,EAAaC,M,EAAQ;WACrB,I,CAAA,I,CAAe;qBAAA,WAAA;gBAAA,MAAA;WAAA,CAAA;WAIR;AAJQ,O;WAOf,W;;;;kCAGU;UACNC,KAAAA,GAAJ,C;;WACK,IAAIC,CAAAA,GAAT,C,EAAgBA,CAAAA,GAAI,KAAA,IAAA,CAApB,M,EAAsCA,CAAtC,E,EAA2C;iBAC9B,KAAA,IAAA,CAAA,CAAA,EAAT,W;;;WAGC,IAAIA,EAAAA,GAAT,C,EAAgBA,EAAAA,GAAI,KAAA,IAAA,CAApB,M,EAAsCA,EAAtC,E,EAA2C;YACjCC,GAAAA,GAAM,KAAA,IAAA,CAAZ,EAAY,C;YACNC,GAAAA,GAAMD,GAAAA,CAAAA,WAAAA,GAAZ,K;YAEA,C,GAAQD,EAAAA,KAAAA,CAAAA,GAAAA,CAAAA,GAAc,KAAA,IAAA,CAAUA,EAAAA,GAAV,CAAA,EAAtB,C;YACA,C,GAAQC,GAAAA,CAAAA,CAAAA,GAAR,G;;;;;gCAII;UACFC,GAAAA,GAAMC,IAAAA,CAAZ,MAAYA,E;;WACP,IAAIH,CAAAA,GAAT,C,EAAgBA,CAAAA,GAAI,KAAA,IAAA,CAApB,M,EAAsCA,CAAtC,E,EAA2C;YACjCC,GAAAA,GAAM,KAAA,IAAA,CAAZ,CAAY,C;;YAERC,GAAAA,IAAOD,GAAAA,CAAPC,CAAAA,IAAgBA,GAAAA,GAAMD,GAAAA,CAA1B,C,EAAiC;iBACtBA,GAAAA,CAAP,M;;;;aAID,KAAA,IAAA,CAAA,CAAA,EAAP,M;;;;CA1CAL,E;;ICCeQ,MAAAA,GAAAA,UAAAA,gBAAAA,EAAAA;;;kBACnB,K,EAAmB;;;+GAAA,K;;UAGjB,G,GAAA,C;UACA,I,GAAY;AAAEG,MAAAA,KAAAA,EAAF,CAAA;AAAYC,MAAAA,MAAAA,EAAxB;AAAY,K;UACZ,S,GAAiBH,KAAAA,CAAjB,SAAiBA,E;;;;;;wCAGC;;;iBACP,YAAM;eACf,U;;eACA,M,GAAc,MAAA,CAAA,MAAA,CAAA,IAAA,CAAd,MAAc,C;eACd,gB,CAAA,Q,EAAkC,MAAA,CAAlC,M;AAHF,O,EAAA,G;UAMMI,MAAAA,GAAS,KAAA,SAAA,CAAf,O;WACA,K,CAAA,gB,IAA+B,KAAA,KAAA,CAAA,gBAAA,CAA/B,MAA+B,C;;;;iCAGpB;UACLA,MAAAA,GAAS,KAAA,SAAA,CAAf,O;;UACI,KAAA,KAAA,CAAJ,wB,EAAyC;YACjCC,OAAAA,GAAUD,MAAAA,CAAAA,UAAAA,CAAhB,IAAgBA,C;gBAChB,wB,GAAmC,KAAA,KAAA,CAAnC,wB;;;2BAGwB,KAAA,aAAA,CAPf,MAOe,C;UAAlBF,KAPG,GAAA,cAAA,CAAA,K;UAOIC,MAPJ,GAAA,cAAA,CAAA,M;;WAQX,4B,CAAA,M;WACA,K,CAAA,c,CAAA,M,EAAA,K,EAAA,M;;;;iDAG2BC,M,EAAQ;;;WACnC,G,GAAW,WAAA,CAAY,YAAM;YACxB,MAAA,CAAA,SAAA,CAAH,O,EAA0B;cAClBE,SAAAA,GAAY,MAAA,CAAA,SAAA,CAAA,OAAA,CAAlB,Y;;cACIA,SAAAA,KAAc,MAAA,CAAA,IAAA,CAAlB,M,EAAoC;kCACR,MAAA,CAAA,aAAA,CADQ,MACR,C;gBAAlBJ,KAD0B,GAAA,eAAA,CAAA,K;gBACnBC,MADmB,GAAA,eAAA,CAAA,M;;mBAElC,K,CAAA,Q,IAAuB,MAAA,CAAA,KAAA,CAAA,QAAA,CAAA,KAAA,EAAvB,MAAuB,C;;;AALlB,OAAA,EAQR,OARH,EAAW,C;;;;2CAWU;UAClB;eACD,mB,CAAA,Q,EAAqC,KAArC,M;sBACc,KAAd,G;AAFF,O,CAGC,OAAA,CAAA,EAAQ,CAAA;;;;6BAKF;UACDC,MAAAA,GAAS,KAAA,SAAA,CAAf,O;;4BAC0B,KAAA,aAAA,CAFnB,MAEmB,C;UAAlBF,KAFD,GAAA,eAAA,CAAA,K;UAEQC,MAFR,GAAA,eAAA,CAAA,M;;WAGP,K,CAAA,Q,IAAuB,KAAA,KAAA,CAAA,QAAA,CAAA,KAAA,EAAvB,MAAuB,C;;;;kCAGXC,M,EAAQ;UACdF,KAAAA,GAAQ,KAAA,SAAA,CAAA,OAAA,CAAd,W;UACMC,MAAAA,GAAS,KAAA,SAAA,CAAA,OAAA,CAAf,Y;WAEA,I,CAAA,K,GAAA,K;WACA,I,CAAA,M,GAAA,M;aACA,K,GAAA,K;aACA,M,GAAA,M;aACO;AAAED,QAAAA,KAAAA,EAAF,KAAA;AAASC,QAAAA,MAAAA,EAAhB;AAAO,O;;;;0CAGa;iBACpB,K;;;;0CAGoB;iBACpB,I;;;;+BAGS;UACLI,KAAAA,GAAQ;AAAEL,QAAAA,KAAAA,EAAF,MAAA;AAAiBC,QAAAA,MAAAA,EAA7B;AAAY,O;;UAER,KAAA,KAAA,CAAJ,E,EAAmB;gBACT,MAAA,CAAA,MAAA,CAAA,KAAA,EAAqB;oBAAA,UAAA;kBAEnB,CAFmB,CAAA;eAAA,CAAA;gBAIrB;AAJqB,SAArB,C;;;aAOV,K;;;;oCAGcK,C,EAAG;WACjB,K,CAAA,W,IAA0B,KAAA,KAAA,CAAA,WAAA,CAA1B,CAA0B,C;;;;6BAGnB;aAEL,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;aACO,KADP,SAAA;qBAEe,KAAA,eAAA,CAAA,IAAA,CAFf,IAEe,CAFf;eAGS,KAAA,QAAA;AAHT,OAAA,C;;;;CAlGeT,CAAeC,KAAAA,CAAMC,SAArBF,C;;ACFrB,SAAA,QAAA,CAAA,GAAA,EAAuB;MACfU,MAAAA,GAAS,4CAAA,IAAA,CAAb,GAAa,C;SACN,MAAA,GAAS;OACTC,QAAAA,CAASD,MAAAA,CAATC,CAASD,CAATC,EADS,EACTA,CADS;OAETA,QAAAA,CAASD,MAAAA,CAATC,CAASD,CAATC,EAFS,EAETA,CAFS;OAGTA,QAAAA,CAASD,MAAAA,CAATC,CAASD,CAATC,EAAAA,EAAAA;AAHS,GAAT,GAAP,E;;;AAOJ,SAAA,QAAA,CAAA,KAAA,EAAA,CAAA,EAA4B;MACpBC,CAAAA,GAAAA,KAAJ,C;;MACA,K,EAAW;QACHC,QAAAA,CAAJ,KAAIA,C;qBACWD,CAAAA,CAAf,C,GAAA,G,GAAsBA,CAAAA,CAAtB,C,GAAA,G,GAA6BA,CAAAA,CAA7B,C,GAAA,I,GAAA,C,GAAA,G;AAFJ,G,MAGO;WACH,I;;;;ICVaE,IAAAA,GAAAA,UAAAA,gBAAAA,EAAAA;;;gBACnB,K,EAAmB;;;2GAAA,K;;UAEjB,Y,GAAoB,KAAA,CAAA,YAAA,CAAA,IAAA,CAApB,KAAoB,C;;;;;;mCAGPT,M,EAAQF,K,EAAOC,M,EAAQ;WACpC,Y,CAAA,M,EAAA,K,EAAA,M;WACA,iB,CAAA,M;iBACA,G,CAAe,KAAf,Y;;;;2CAGqB;UACjB;mBACF,M,CAAkB,KAAlB,Y;aACA,M,CAAA,O;AAFF,O,CAGE,OAAA,CAAA,EAAU,CAAA;;;;+BAGH,CAAA;;;iCAEEC,M,EAAQF,K,EAAOC,M,EAAQ;;;UAC5BE,OAAAA,GAAUD,MAAAA,CAAAA,UAAAA,CAAhB,IAAgBA,C;WAChB,M,GAAc,IAAd,MAAc,E;UAERU,OAAAA,GAAU,IAAIC,MAAAA,CAApB,OAAgB,E;cAChB,I,GAAe,IAAIA,MAAAA,CAAJ,IAAA,CACb,KAAA,KAAA,CAAA,GAAA,GAAiB,IAAIA,MAAAA,CAAJ,IAAA,CAAgB,KAAA,KAAA,CAAjC,GAAiB,CAAjB,GAAmD,IAAIA,MAAAA,CAAJ,IAAA,CAAA,CAAA,EADtC,CACsC,CADtC,EAEb,IAAIA,MAAAA,CAAJ,IAAA,CAAA,GAAA,EAFF,GAEE,CAFa,C;cAKf,a,CAAsB,IAAIA,MAAAA,CAAJ,IAAA,CAAtB,CAAsB,C;cACtB,a,CAAsB,IAAIA,MAAAA,CAAJ,MAAA,CAAA,CAAA,EAAtB,EAAsB,C;cACtB,a,CAAsB,IAAIA,MAAAA,CAAJ,IAAA,CAAA,CAAA,EAAtB,CAAsB,C;cACtB,a,CACE,IAAIA,MAAAA,CAAJ,QAAA,CACE,IAAIA,MAAAA,CAAJ,IAAA,CAAA,CAAA,EADF,CACE,CADF,EAEE,IAAIA,MAAAA,CAAJ,IAAA,CAAA,EAAA,EAFF,EAEE,CAFF,EADF,OACE,C;cAOF,Y,CAAqB,IAAIA,MAAAA,CAAJ,KAAA,CAAA,CAAA,EAArB,CAAqB,C;cACrB,Y,CACE,IAAIA,MAAAA,CAAJ,KAAA,CAAiB,CAAA,SAAA,EAAA,SAAA,EAAA,SAAA,EAAA,SAAA,EADnB,SACmB,CAAjB,C;cAEF,Y,CAAqB,IAAIA,MAAAA,CAAJ,KAAA,CAAA,GAAA,EAArB,CAAqB,C;cACrB,Y,CAAqB,IAAIA,MAAAA,CAAJ,OAAA,CAArB,CAAqB,C;cACrB,Y,CAAqB,IAAIA,MAAAA,CAAJ,SAAA,CAArB,OAAqB,C;cACrB,Y,CAAqB,KAAA,mBAAA,CAArB,MAAqB,C;cACrB,Y,CACE,IAAIA,MAAAA,CAAJ,SAAA,CACE,IAAIA,MAAAA,CAAJ,QAAA,CAAA,CAAA,EAAA,CAAA,EAA0BX,MAAAA,CAA1B,KAAA,EAAwCA,MAAAA,CAD1C,MACE,CADF,EADF,OACE,C;cAMF,C,CAAA,C,GAAcN,IAAAA,CAAAA,GAAAA,CAAAA,GAAAA,EAAcA,IAAAA,CAAAA,GAAAA,CAASM,MAAAA,CAAAA,KAAAA,GAAAA,CAAAA,GAATN,GAAAA,EAA5B,EAA4BA,CAAdA,C;cACd,C,CAAA,C,GAAcM,MAAAA,CAAAA,MAAAA,GAAAA,CAAAA,GAAd,E;cACA,I;WACA,M,CAAA,U,CAAA,O;UAEMY,QAAAA,GAAW,IAAID,MAAAA,CAAJ,cAAA,CAAjB,MAAiB,C;;eACjB,c,GAA2B,YAAK;gBAC9B,S,GAAoBE,QAAAA,CAAS,MAAA,CAAA,KAAA,CAATA,KAAAA,EAAAA,GAAAA,CAAAA,IAApB,0B;gBACA,Q,CAAA,C,EAAA,C,EAAuBb,MAAAA,CAAvB,K,EAAqCA,MAAAA,CAArC,M;AAFF,O;;WAIA,M,CAAA,W,CAAA,Q;;;;wCAGkBA,M,EAAQ;;;aACnB;oBACO,SAAA,UAAA,CAAA,QAAA,EAAoB,CAD3B,CAAA;wBAEW,SAAA,cAAA,CAAA,QAAA,EAAY;cACtBc,QAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAeA,QAAAA,CAAfA,MAAAA,IAAkCd,MAAAA,CAAtC,M,EAAqD;gBAC/Cc,QAAAA,CAAAA,MAAAA,GAAJ,C,EAAyB;qBACvB,a,CAAA,Q;;uBACA,I,GAAA,I;;;;AAND,O;;;;sCAaSd,M,EAAQ;UAClBe,WAAAA,GAAc,IAAIJ,MAAAA,CAAxB,OAAoB,E;kBACpB,I,GAAmB,IAAIA,MAAAA,CAAJ,IAAA,CACjB,IAAIA,MAAAA,CAAJ,IAAA,CAAA,CAAA,EADiB,CACjB,CADiB,EAEjB,IAAIA,MAAAA,CAAJ,IAAA,CAAA,CAAA,EAFF,CAEE,CAFiB,C;kBAKnB,a,CAA0B,IAAIA,MAAAA,CAAJ,IAAA,CAA1B,CAA0B,C;kBAC1B,gB,GAA+B,IAAIA,MAAAA,CAAnC,MAA+B,E;kBAC/B,a,CAA0BI,WAAAA,CAA1B,gB;kBACA,a,CAA0B,IAAIJ,MAAAA,CAAJ,IAAA,CAAA,GAAA,EAA1B,CAA0B,C;kBAC1B,a,CACE,IAAIA,MAAAA,CAAJ,CAAA,CACE,IAAIA,MAAAA,CAAJ,IAAA,CAAA,GAAA,EADF,CACE,CADF,EAEE,IAAIA,MAAAA,CAAJ,IAAA,CAAA,CAAA,EAAA,EAAA,EAFF,IAEE,CAFF,EADF,OACE,C;kBAOF,c,GAA6B,IAAIA,MAAAA,CAAJ,KAAA,CAA7B,SAA6B,C;kBAC7B,Y,CAAyB,IAAIA,MAAAA,CAAJ,KAAA,CAAA,CAAA,EAAzB,CAAyB,C;kBACzB,Y,CAAyBI,WAAAA,CAAzB,c;kBACA,Y,CAAyB,IAAIJ,MAAAA,CAAJ,OAAA,CAAzB,CAAyB,C;kBACzB,Y,CAAyB,IAAIA,MAAAA,CAAJ,SAAA,CAAzB,WAAyB,C;kBACzB,Y,CACE,IAAIA,MAAAA,CAAJ,SAAA,CACE,IAAIA,MAAAA,CAAJ,QAAA,CAAA,CAAA,EAAA,CAAA,EAA0BX,MAAAA,CAA1B,KAAA,EAAwCA,MAAAA,CAD1C,MACE,CADF,EADF,OACE,C;WAKF,M,CAAA,U,CAAA,W;WAEA,W,GAAA,W;;;;kCAGYc,Q,EAAU;UAChBC,WAAAA,GAAc,KAApB,W;kBACA,gB,CAAA,K,CACED,QAAAA,CAAAA,MAAAA,GADF,I,EAEEA,QAAAA,CAAAA,MAAAA,GAFF,G;kBAIA,c,CAAA,K,CAAiCA,QAAAA,CAAjC,K;kBACA,C,CAAA,C,GAAkBA,QAAAA,CAAAA,CAAAA,CAAlB,C;kBACA,C,CAAA,C,GAAkBA,QAAAA,CAAAA,CAAAA,CAAlB,C;kBACA,I,CAAA,M;;;;mCAGa;WACb,M,IAAe,KAAA,MAAA,CAAf,MAAe,E;;;;6BAGR;aAEL,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAQ,QAAA,EAAA,EAAI,KAAA,KAAA,CAAZ,EAAA;kCAAA,QAAA;wBAEkB,KAAA,cAAA,CAAA,IAAA,CAFlB,IAEkB,CAFlB;kBAGY,KAAA,QAAA,CAAA,IAAA,CAAA,IAAA;AAHZ,OAAA,C;;;;CAzIeL,CAAab,KAAAA,CAAMC,SAAnBY,C;;ICDAO,KAAAA,GAAAA,UAAAA,gBAAAA,EAAAA;;;iBACnB,K,EAAmB;;;6GAAA,K;;UAGjB,M,GAAc,CAAA,SAAA,EAAA,SAAA,EAAA,SAAA,EAAA,SAAA,EAAA,SAAA,EAAA,SAAA,EAAd,SAAc,C;UASd,Y,GAAoB,KAAA,CAAA,YAAA,CAAA,IAAA,CAApB,KAAoB,C;;;;;;2CAGC;UACjB;mBACF,M,CAAkB,KAAlB,Y;aACA,M,CAAA,O;AAFF,O,CAGE,OAAA,CAAA,EAAU,CAAA;;;;mCAGChB,M,EAAQF,K,EAAOC,M,EAAQ;WACpC,Y,CAAA,M,EAAA,K,EAAA,M;iBACA,G,CAAe,KAAf,Y;;;;+BAGS,CAAA;;;iCAEEC,M,EAAQF,K,EAAOC,M,EAAQ;WAClC,M,GAAc,IAAd,MAAc,E;UACRW,OAAAA,GAAU,IAAIC,MAAAA,CAApB,OAAgB,E;cAChB,I,GAAe,IAAIA,MAAAA,CAAJ,IAAA,CACb,KAAA,KAAA,CAAA,GAAA,GAAiB,IAAIA,MAAAA,CAAJ,IAAA,CAAgB,KAAA,KAAA,CAAjC,GAAiB,CAAjB,GAAmD,IAAIA,MAAAA,CAAJ,IAAA,CAAA,CAAA,EADtC,CACsC,CADtC,EAEb,IAAIA,MAAAA,CAAJ,IAAA,CAAA,GAAA,EAFF,IAEE,CAFa,C;cAKf,a,CAAsB,IAAIA,MAAAA,CAAJ,IAAA,CAAtB,CAAsB,C;cACtB,a,CAAsB,IAAIA,MAAAA,CAAJ,MAAA,CAAA,EAAA,EAAtB,GAAsB,C;cACtB,a,CAAsB,IAAIA,MAAAA,CAAJ,IAAA,CAAA,CAAA,EAAtB,CAAsB,C;cACtB,a,CACE,IAAIA,MAAAA,CAAJ,QAAA,CAAoB,IAAIA,MAAAA,CAAJ,QAAA,CAAA,CAAA,EAAA,CAAA,EAAA,KAAA,EADtB,MACsB,CAApB,C;cAGF,Y,CAAqB,IAAIA,MAAAA,CAAJ,KAAA,CAAA,CAAA,EAAA,CAAA,EAAA,QAAA,EAAiCA,MAAAA,CAAtD,YAAqB,C;cACrB,Y,CAAqB,IAAIA,MAAAA,CAAJ,KAAA,CAAA,CAAA,EAAA,CAAA,EAAA,QAAA,EAAiCA,MAAAA,CAAtD,YAAqB,C;cACrB,Y,CAAqB,IAAIA,MAAAA,CAAJ,KAAA,CAAiB,KAAjB,MAAA,EAArB,QAAqB,C;cAErB,I;WACA,M,CAAA,U,CAAA,O;UAEMC,QAAAA,GAAW,IAAID,MAAAA,CAAJ,cAAA,CAAjB,MAAiB,C;WACjB,M,CAAA,W,CAAA,Q;;;;mCAGa;WACb,M,IAAe,KAAA,MAAA,CAAf,MAAe,E;;;;6BAGR;aAEL,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAQ,QAAA,EAAA,EAAI,KAAA,KAAA,CAAZ,EAAA;kCAAA,QAAA;wBAEkB,KAAA,cAAA,CAAA,IAAA,CAFlB,IAEkB,CAFlB;kBAGY,KAAA,QAAA,CAAA,IAAA,CAAA,IAAA;AAHZ,OAAA,C;;;;CA9DeK,CAAcpB,KAAAA,CAAMC,SAApBmB,C;;ICAAA,OAAAA,GAAAA,UAAAA,gBAAAA,EAAAA;;;iBACjB,K,EAAmB;;;6GAAA,K;;UAGf,M,GAAc,CAAA,SAAA,EAAA,SAAA,EAAA,SAAA,EAAA,SAAA,EAAA,SAAA,EAAA,SAAA,EAAd,SAAc,C;UASd,Y,GAAoB,KAAA,CAAA,YAAA,CAAA,IAAA,CAApB,KAAoB,C;;;;;;2CAGD;UACf;mBACA,M,CAAkB,KAAlB,Y;aACA,M,CAAA,O;AAFJ,O,CAGE,OAAA,CAAA,EAAU,CAAA;;;;mCAGDhB,M,EAAQF,K,EAAOC,M,EAAQ;WAClC,Y,CAAA,M,EAAA,K,EAAA,M;iBACA,G,CAAe,KAAf,Y;;;;6BAGKD,K,EAAOC,M,EAAQ;WACpB,kB,CAAA,I,CAAA,K,GAAA,K;WACA,kB,CAAA,I,CAAA,M,GAAA,M;WACA,M,CAAA,S,CAAA,C,EAAA,M,CAAA,K,EAAA,M;AACH;;;4BAEOkB,G,EAAKC,U,EAAY;UACfC,MAAAA,GAAS,KAAA,KAAA,CAAA,MAAA,IAAf,E;UACM1B,GAAAA,GAAM0B,MAAAA,CAAAA,GAAAA,CAAAA,IAAZ,U;;UACIC,KAAAA,CAAAA,OAAAA,CAAJ,GAAIA,C,EAAoB;eACb,IAAIT,MAAAA,CAAJ,IAAA,CAAgBlB,GAAAA,CAAhB,CAAgBA,CAAhB,EAAwBA,GAAAA,CAA/B,CAA+BA,CAAxB,C;AADX,O,MAEO;eACH,G;;;;;+BAIGwB,G,EAAKC,U,EAAY;UAClBC,MAAAA,GAAS,KAAA,KAAA,CAAA,MAAA,IAAf,E;UACM1B,GAAAA,GAAM0B,MAAAA,CAAAA,GAAAA,CAAAA,IAAZ,U;UACI,CAAJ,G,EAAU,OAAA,IAAA;;UAENC,KAAAA,CAAAA,OAAAA,CAAJ,GAAIA,C,EAAoB;eACpB,G;AADJ,O,MAEO;eACI,CAAA,GAAA,EAAP,GAAO,C;;;;;iCAIFpB,M,EAAQF,K,EAAOC,M,EAAQ;UAC1BsB,GAAAA,GAAM,KAAA,OAAA,CAAA,KAAA,EAAoB,CAAA,CAAA,EAAhC,CAAgC,CAApB,C;UACNC,GAAAA,GAAM,KAAA,OAAA,CAAA,KAAA,EAAoB,CAAA,GAAA,EAAhC,GAAgC,CAApB,C;UACNC,IAAAA,GAAO,KAAA,OAAA,CAAA,MAAA,EAAb,CAAa,C;UACPC,MAAAA,GAAS,KAAA,OAAA,CAAA,QAAA,EAAuB,CAAA,EAAA,EAAtC,EAAsC,CAAvB,C;UACTC,IAAAA,GAAO,KAAA,OAAA,CAAA,MAAA,EAAqB,CAAA,CAAA,EAAlC,CAAkC,CAArB,C;UACPC,IAAAA,GAAO,KAAA,OAAA,CAAb,MAAa,C;UACPC,QAAAA,GAAW,KAAA,OAAA,CAAjB,UAAiB,C;UACXC,CAAAA,GAAI,KAAA,OAAA,CAAA,GAAA,EAAkB,CAAA,CAAA,EAA5B,CAA4B,CAAlB,C;UACJC,GAAAA,GAAM,KAAA,OAAA,CAAA,KAAA,EAAoB,CAAC,CAAD,EAAA,EAAhC,EAAgC,CAApB,C;UACNC,KAAAA,GAAQ,KAAA,UAAA,CAAd,OAAc,C;UACRC,KAAAA,GAAQ,KAAA,UAAA,CAAd,OAAc,C;UACRC,KAAAA,GAAQ,KAAA,UAAA,CAAd,OAAc,C;UACRC,KAAAA,GAAQ,KAAA,OAAA,CAAA,OAAA,EAAd,MAAc,C;UACRC,MAAAA,GAAS,KAAA,OAAA,CAAf,QAAe,C;UACTC,MAAAA,GAAS,KAAA,UAAA,CAAf,QAAe,C;UACTC,CAAAA,GAAI,KAAA,OAAA,CAAV,GAAU,C;UACJC,CAAAA,GAAI,KAAA,UAAA,CAAV,GAAU,C;UACJC,QAAAA,GAAW,KAAA,OAAA,CAAjB,SAAiB,C;WAEjB,M,GAAc,IAAd,MAAc,E;UACV5B,OAAAA,GAAAA,KAAJ,C;;UACI4B,QAAAA,KAAJ,Q,EAA2B;kBACb,IAAI3B,MAAAA,CAAd,aAAU,E;AADd,O,MAEO;kBACO,IAAIA,MAAAA,CAAd,OAAU,E;;;cAEd,I,GAAe,IAAIA,MAAAA,CAAJ,IAAA,CAAA,GAAA,EAAf,GAAe,C;cAEf,a,CAAsB,IAAIA,MAAAA,CAAJ,IAAA,CAAtB,IAAsB,C;cACtB,a,CAAsB,IAAIA,MAAAA,CAAJ,MAAA,CAAtB,MAAsB,C;cACtB,a,CAAsB,IAAIA,MAAAA,CAAJ,IAAA,CAAtB,IAAsB,C;cACtB,a,CAAsB,IAAIA,MAAAA,CAAJ,QAAA,CAAA,CAAA,EAAA,GAAA,EAAtB,OAAsB,C;UACtB,I,EAAUD,OAAAA,CAAAA,aAAAA,CAAsB,IAAIC,MAAAA,CAAJ,IAAA,CAAtBD,IAAsB,CAAtBA;UAEN6B,GAAAA,GAAAA,KAAJ,C;;UACIZ,QAAAA,KAAAA,KAAAA,IAAsBA,QAAAA,KAA1B,Q,EAAiD;cACvC,IAAIhB,MAAAA,CAAJ,QAAA,CAAoB,IAAIA,MAAAA,CAAJ,QAAA,CAAA,CAAA,EAAA,CAAA,EAA0BX,MAAAA,CAA1B,KAAA,EAAwCA,MAAAA,CAAlE,MAA0B,CAApB,C;AADV,O,MAEO,IAAI,CAAA,OAAA,QAAA,KAAA,WAAA,GAAA,WAAA,GAAA,OAAA,CAAA,QAAA,CAAA,MAAJ,QAAA,EAAkC;cAC/B,IAAIW,MAAAA,CAAJ,QAAA,CAAoB,IAAIA,MAAAA,CAAJ,QAAA,CAAoBgB,QAAAA,CAApB,CAAA,EAAgCA,QAAAA,CAAhC,CAAA,EAA4CA,QAAAA,CAA5C,KAAA,EAA4DA,QAAAA,CAAtF,MAA0B,CAApB,C;AADH,OAAA,MAEA;gBACH,C,CAAA,C,GAAc3B,MAAAA,CAAAA,KAAAA,GAAd,C;gBACA,C,CAAA,C,GAAcA,MAAAA,CAAAA,MAAAA,GAAd,C;;;cAGJ,a,CAAA,G,EA7CgC,C;;UAgD1BwC,MAAAA,GAASV,KAAAA,GAAQ,IAAInB,MAAAA,CAAJ,KAAA,CAAiBmB,KAAAA,CAAjB,CAAiBA,CAAjB,EAA2BA,KAAAA,CAAnCA,CAAmCA,CAA3B,CAARA,GAA+C,IAAInB,MAAAA,CAAJ,KAAA,CAAA,CAAA,EAA9D,CAA8D,C;UACxD8B,MAAAA,GAASV,KAAAA,GAAQ,IAAIpB,MAAAA,CAAJ,KAAA,CAAiBoB,KAAAA,CAAjB,CAAiBA,CAAjB,EAA2BA,KAAAA,CAAnCA,CAAmCA,CAA3B,CAARA,GAA+C,IAAIpB,MAAAA,CAAJ,KAAA,CAAA,CAAA,EAA9D,GAA8D,C;UACxD+B,MAAAA,GAASV,KAAAA,GAAQ,IAAIrB,MAAAA,CAAJ,KAAA,CAAiBqB,KAAAA,CAAjB,CAAiBA,CAAjB,EAA2BA,KAAAA,CAAnCA,CAAmCA,CAA3B,CAARA,GAA+C,IAAIrB,MAAAA,CAAJ,KAAA,CAAiB,KAA/E,MAA8D,C;cAE9D,Y,CAAA,M;cACA,Y,CAAA,M;UACG,CAAH,I,EAAUD,OAAAA,CAAAA,YAAAA,CAAAA,MAAAA;;UAEV,M,EAAU;YACHyB,MAAAA,CAAAA,CAAAA,CAAAA,KAAAA,IAAAA,IAAkBA,MAAAA,CAAAA,CAAAA,CAAAA,KAArB,Q,EAA0C;kBACtC,Y,CAAqB,IAAIxB,MAAAA,CAAzB,MAAqB,E;AADzB,S,MAEK;kBACD,Y,CAAqB,IAAIA,MAAAA,CAAJ,MAAA,CAAkBwB,MAAAA,CAAlB,CAAkBA,CAAlB,EAA6BA,MAAAA,CAAlD,CAAkDA,CAA7B,C;;;;UAIvBQ,IAAAA,GAAO,IAAIhC,MAAAA,CAAJ,QAAA,CAAA,CAAA,EAAA,CAAA,EAA0BX,MAAAA,CAA1B,KAAA,EAAwCA,MAAAA,CAArD,MAAa,C;UACP4C,kBAAAA,GAAqB,IAAIjC,MAAAA,CAAJ,SAAA,CAAA,IAAA,EAA3B,KAA2B,C;cAC3B,Y,CAAA,kB;gBAEUD,OAAAA,CAAAA,YAAAA,CAAqB,IAAIC,MAAAA,CAAJ,WAAA,CAAA,MAAA,EAAA,MAAA,EAA/B,IAA+B,CAArBD,C;WACLA,OAAAA,CAAAA,YAAAA,CAAqB,IAAIC,MAAAA,CAAJ,CAAA,CAA1B,CAA0B,CAArBD,C;WACAA,OAAAA,CAAAA,YAAAA,CAAqB,IAAIC,MAAAA,CAAJ,CAAA,CAAa0B,CAAAA,CAAb,CAAaA,CAAb,EAAmBA,CAAAA,CAA7C,CAA6CA,CAAnB,CAArB3B,C;cAEL,I;WACA,M,CAAA,U,CAAA,O;UAEME,QAAAA,GAAW,KAAA,cAAA,CAAjB,MAAiB,C;WACjB,M,CAAA,W,CAAA,Q;WAEA,O,GAAA,O;WACA,kB,GAAA,kB;;;;mCAGWZ,M,EAAQ;UACbF,KAAAA,GAAQE,MAAAA,CAAd,K;UACMD,MAAAA,GAASC,MAAAA,CAAf,M;UACMC,OAAAA,GAAUD,MAAAA,CAAAA,UAAAA,CAAhB,IAAgBA,C;UACVY,QAAAA,GAAW,IAAID,MAAAA,CAAJ,cAAA,CAAjB,MAAiB,C;UAEXkC,QAAAA,GAAW,KAAA,OAAA,CAAjB,UAAiB,C;;UACjB,Q,EAAc;iBACV,c,GAA0B,YAAM;mBAC5B,O,EAAA,K,EAAA,M;AADJ,S;;;UAKEC,iBAAAA,GAAoB,KAAA,OAAA,CAA1B,mBAA0B,C;;UAC1B,iB,EAAuB;iBACnB,iB,GAA6B,UAAA,QAAA,EAAc;4BACvC,O,EAAA,Q;AADJ,S;;;UAKEC,gBAAAA,GAAmB,KAAA,OAAA,CAAzB,kBAAyB,C;;UACzB,gB,EAAsB;iBAClB,gB,GAA4B,UAAA,QAAA,EAAc;2BACtC,O,EAAA,Q;AADJ,S;;;aAKJ,Q;;;;mCAGW;WACX,M,IAAe,KAAA,MAAA,CAAf,MAAe,E;;;;oCAGH3C,C,EAAG;UACT4C,WAAAA,GAAc,KAAA,OAAA,CAApB,aAAoB,C;;UACpB,W,EAAiB;oBACb,C;;;;;6BAIC;UACCC,wBAAAA,GAA2B,KAAA,KAAA,CAAA,wBAAA,IAAuC,KAAA,KAAA,CAAvC,SAAA,IAAjC,a;aAGI,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;YACQ,KAAA,KAAA,CADR,EAAA;qBAEiB,KAAA,eAAA,CAAA,IAAA,CAFjB,IAEiB,CAFjB;kCAAA,wBAAA;wBAIoB,KAAA,cAAA,CAAA,IAAA,CAJpB,IAIoB,CAJpB;kBAKc,KAAA,QAAA,CAAA,IAAA,CAAA,IAAA;AALd,OAAA,C;;;;CAvLSjC,CAAcpB,KAAAA,CAAMC,SAApBmB,C;;ICCAkC,KAAAA,GAAAA,UAAAA,gBAAAA,EAAAA;;;iBACnB,K,EAAmB;;;6GAAA,K;;UAEjB,Y,GAAoB,KAAA,CAAA,YAAA,CAAA,IAAA,CAApB,KAAoB,C;;;;;;qCAGLlD,M,EAAO;UACnB,KAAA,KAAA,CAAH,K,EAAoB;eAClB,K,CAAA,e,GAA+B,KAAA,KAAA,CAA/B,K;;;;;2CAImB;UACjB;mBACF,M,CAAkB,KAAlB,Y;aACA,M,CAAA,O;AAFF,O,CAGE,OAAA,CAAA,EAAU,CAAA;;;;mCAGCA,M,EAAQF,K,EAAOC,M,EAAQ;WACpC,Y,CAAA,M,EAAA,K,EAAA,M;iBACA,G,CAAe,KAAf,Y;;;;6BAGOD,K,EAAOC,M,EAAQ;WACtB,kB,CAAA,I,CAAA,K,GAAA,K;WACA,kB,CAAA,I,CAAA,M,GAAA,M;WACA,M,CAAA,S,CAAA,C,EAAA,M,CAAA,K,EAAA,M;;;;iCAGWC,M,EAAQF,K,EAAOC,M,EAAQ;WAClC,M,GAAc,IAAd,MAAc,E;UAERW,OAAAA,GAAU,IAAIC,MAAAA,CAApB,OAAgB,E;cAChB,O,GAAA,K;cACA,I,GAAe,IAAIA,MAAAA,CAAJ,IAAA,CAAgB,KAAA,KAAA,CAAA,GAAA,GAAiB,KAAA,KAAA,CAAjB,GAAA,GAA/B,GAAe,C;cACf,a,CAAsB,IAAIA,MAAAA,CAAJ,IAAA,CAAtB,CAAsB,C;cACtB,a,CAAsB,IAAIA,MAAAA,CAAJ,MAAA,CAAtB,CAAsB,C;cACtB,a,CACE,IAAIA,MAAAA,CAAJ,QAAA,CACE,IAAIA,MAAAA,CAAJ,IAAA,CADF,GACE,CADF,EAEE,IAAIA,MAAAA,CAAJ,IAAA,CAAA,CAAA,EAFF,GAEE,CAFF,EADF,OACE,C;UAMIwC,QAAAA,GAAW;WACZrD,KAAAA,GADY,CAAA;WAEZC,MAAAA,GAAS;AAFG,O;UAKXqD,mBAAAA,GAAsB,IAAIzC,MAAAA,CAAJ,UAAA,CAAA,QAAA,EAAA,CAAA,EAA5B,CAA4B,C;UACtBiC,kBAAAA,GAAqB,IAAIjC,MAAAA,CAAJ,SAAA,CACzB,IAAIA,MAAAA,CAAJ,QAAA,CAAA,CAAA,EAAA,CAAA,EAA0BX,MAAAA,CAA1B,KAAA,EAAwCA,MAAAA,CADf,MACzB,CADyB,EAA3B,OAA2B,C;cAI3B,Y,CAAqB,IAAIW,MAAAA,CAAJ,KAAA,CAArB,QAAqB,C;cACrB,Y,CAAA,mB,EAAA,kB;cACA,Y,CAAqB,IAAIA,MAAAA,CAAJ,WAAA,CAAA,EAAA,EAAA,EAAA,EAArB,IAAqB,C;cACrB,C,CAAA,C,GAAcX,MAAAA,CAAAA,KAAAA,GAAd,C;cACA,C,CAAA,C,GAAcA,MAAAA,CAAAA,MAAAA,GAAd,C;cACA,I,CAAA,M;WAEA,M,CAAA,U,CAAA,O;WACA,M,CAAA,W,CAAwB,KAAA,cAAA,CAAxB,MAAwB,C;WACxB,kB,GAAA,kB;;;;mCAGaA,M,EAAQ;;;UACfC,OAAAA,GAAUD,MAAAA,CAAAA,UAAAA,CAAhB,IAAgBA,C;UACVY,QAAAA,GAAW,IAAID,MAAAA,CAAJ,cAAA,CAAjB,MAAiB,C;;eACjB,c,GAA0B,YAAM;gBAC9B,S,GAAoBE,QAAAA,CAAS,MAAA,CAAA,KAAA,CAATA,KAAAA,EAAAA,IAAAA,CAAAA,IAApB,qB;gBACA,Q,CAAA,C,EAAA,C,EAAuBb,MAAAA,CAAvB,K,EAAqCA,MAAAA,CAArC,M;AAFF,O;;eAKA,gB,GAA4B,UAAA,QAAA,EAAoB;gBAC9C,S;gBACA,W,GAAsBc,QAAAA,CAAtB,K;gBACA,S,GAAA,C;gBACA,M,CAAeA,QAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAf,C,EAAiCA,QAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAjC,C;gBACA,M,CAAeA,QAAAA,CAAAA,CAAAA,CAAf,C,EAA6BA,QAAAA,CAAAA,CAAAA,CAA7B,C;gBACA,S;gBACA,M;AAPF,O;;aAUA,Q;;;;mCAGa;WACb,M,IAAe,KAAA,MAAA,CAAf,MAAe,E;;;;6BAGR;aAEL,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAQ,QAAA,EAAA,EAAI,KAAA,KAAA,CAAZ,EAAA;kCAAA,QAAA;0BAEoB,KAAA,gBAAA,CAAA,IAAA,CAFpB,IAEoB,CAFpB;wBAGkB,KAAA,cAAA,CAAA,IAAA,CAHlB,IAGkB,CAHlB;kBAIY,KAAA,QAAA,CAAA,IAAA,CAAA,IAAA;AAJZ,OAAA,C;;;;CA9FeoC,CAActD,KAAAA,CAAMC,SAApBqD,C;;ICAAG,KAAAA,GAAAA,UAAAA,gBAAAA,EAAAA;;;iBACnB,K,EAAmB;;;6GAAA,K;;UAEjB,G,GAAA,C;UACA,K,GAAA,C;UACA,a,GAAA,yB;UACA,Y,GAAoB,KAAA,CAAA,YAAA,CAAA,IAAA,CAApB,KAAoB,C;;;;;;qCAGLrD,M,EAAO;UACnB,KAAA,KAAA,CAAH,K,EAAoB;eAClB,K,CAAA,e,GAA+B,KAAA,KAAA,CAA/B,K;;;;;mCAIWA,M,EAAQF,K,EAAOC,M,EAAQ;WACpC,M,GAAA,M;WACA,Y,CAAA,M,EAAA,K,EAAA,M;iBACA,G,CAAe,KAAf,Y;;;;6BAGOD,K,EAAOC,M,EAAQ;WACtB,kB,CAAA,I,CAAA,K,GAAA,K;WACA,kB,CAAA,I,CAAA,M,GAAA,M;WACA,M,CAAA,S,CAAA,C,EAAA,M,CAAA,K,EAAA,M;;;;iCAGWC,M,EAAQF,K,EAAOC,M,EAAQ;WAClC,M,GAAc,IAAd,MAAc,E;UAERW,OAAAA,GAAU,IAAIC,MAAAA,CAApB,OAAgB,E;cAChB,O,GAAA,K;cACA,I,GAAe,IAAIA,MAAAA,CAAJ,IAAA,CAAgB,KAAA,KAAA,CAAA,GAAA,GAAiB,KAAA,KAAA,CAAjB,GAAA,GAA/B,GAAe,C,CALmB,C;;cAQlC,a,CAAsB,IAAIA,MAAAA,CAAJ,IAAA,CAAtB,CAAsB,C;cACtB,a,CAAsB,IAAIA,MAAAA,CAAJ,MAAA,CAAtB,CAAsB,C;cACtB,a,CACE,IAAIA,MAAAA,CAAJ,CAAA,CAAa,IAAIA,MAAAA,CAAJ,IAAA,CAAA,GAAA,EAAb,GAAa,CAAb,EAAwC,IAAIA,MAAAA,CAAJ,IAAA,CAAA,CAAA,EAAxC,GAAwC,CAAxC,EADF,OACE,C;cAEF,a,CACE,IAAIA,MAAAA,CAAJ,QAAA,CACE,IAAIA,MAAAA,CAAJ,UAAA,CAAsBX,MAAAA,CAAAA,KAAAA,GAAtB,CAAA,EAAwCA,MAAAA,CAAAA,MAAAA,GAAxC,CAAA,EAFJ,GAEI,CADF,C,EAdgC,C;;UAoB5B4C,kBAAAA,GAAqB,IAAIjC,MAAAA,CAAJ,SAAA,CACzB,IAAIA,MAAAA,CAAJ,QAAA,CAAA,CAAA,EAAA,CAAA,EAA0BX,MAAAA,CAA1B,KAAA,EAAwCA,MAAAA,CADf,MACzB,CADyB,EAA3B,OAA2B,C;cAI3B,Y,CAAA,kB;WACA,S,GAAiB,IAAIW,MAAAA,CAAJ,SAAA,CACf;WACKX,MAAAA,CAAAA,KAAAA,GADL,CAAA;WAEKA,MAAAA,CAAAA,MAAAA,GAAAA,CAAAA,GAAoB;AAFzB,OADe,EAAA,CAAA,EAAjB,GAAiB,C;WASjB,U,GAAkB,IAAIW,MAAAA,CAAJ,UAAA,CAChB;WACKX,MAAAA,CAAAA,KAAAA,GADL,CAAA;WAEKA,MAAAA,CAAAA,MAAAA,GAAgB;AAFrB,OADgB,EAAA,CAAA,EAAlB,GAAkB,C;cAQlB,Y,CAAqB,KAArB,U,EAAsC,KAAtC,S;cACA,Y,CAAqB,IAAIW,MAAAA,CAAJ,KAAA,CAArB,QAAqB,C;cACrB,Y,CAAqB,IAAIA,MAAAA,CAAJ,WAAA,CAAA,EAAA,EAAA,EAAA,EAArB,IAAqB,C;cAErB,I,CAAA,M;WACA,M,CAAA,U,CAAA,O;WACA,M,CAAA,W,CAAwB,KAAA,cAAA,CAAxB,MAAwB,C;WACxB,kB,GAAA,kB;;;;mCAGaX,M,EAAQ;;;UACfC,OAAAA,GAAUD,MAAAA,CAAAA,UAAAA,CAAhB,IAAgBA,C;UACVY,QAAAA,GAAW,IAAID,MAAAA,CAAJ,cAAA,CAAjB,MAAiB,C;;eAEjB,c,GAA0B,YAAM;eAC9B,G,IAAA,C;gBACA,S,GAAoBE,QAAAA,CAAS,MAAA,CAAA,KAAA,CAATA,KAAAA,EAAAA,IAAAA,CAAAA,IAApB,qB;gBACA,Q,CAAA,C,EAAA,C,EAAuBb,MAAAA,CAAvB,K,EAAqCA,MAAAA,CAArC,M;AAHF,O;;eAMA,iB,GAA6B,UAAA,QAAA,EAAY;iBACvC,I,CAAA,K,GAAsBW,MAAAA,CAAAA,QAAAA,CAAAA,UAAAA,CAAAA,CAAAA,EAAtB,GAAsBA,C;iBACtB,I,CAAA,G,GAAoBA,MAAAA,CAAAA,QAAAA,CAAAA,UAAAA,CAAAA,CAAAA,EAA8BjB,IAAAA,CAAAA,EAAAA,GAAlD,CAAoBiB,C;AAFtB,O;;eAKA,gB,GAA4B,UAAA,QAAA,EAAY;YAChC2C,GAAAA,GAAMxC,QAAAA,CAAAA,IAAAA,CAAAA,KAAAA,GAAsB,MAAA,CAAlC,G;iBACA,K,GAAiB,MAAA,CAAA,aAAA,CAAA,OAAA,CAAA,KAAA,EAAkCwC,GAAAA,GAAnD,GAAiB,C;YAEXC,KAAAA,GAAQ,IAAd,C;YACM/B,MAAAA,GACJV,QAAAA,CAAAA,MAAAA,IAAmB,IAAnBA,KAAAA,IAAgCpB,IAAAA,CAAAA,GAAAA,CAAUoB,QAAAA,CAAAA,IAAAA,CAAAA,GAAAA,IAA1CA,IAAgCpB,CAAhCoB,GACAA,QAAAA,CAAAA,MAAAA,GAFF,K;gBAIA,S;gBACA,S,GAAoBA,QAAAA,CAApB,K;gBACA,G,CAAYA,QAAAA,CAAAA,CAAAA,CAAZ,C,EAA0BA,QAAAA,CAAAA,CAAAA,CAA1B,C,EAAA,M,EAAA,C,EAAmDpB,IAAAA,CAAAA,EAAAA,GAAnD,C,EAAA,I;gBACA,S;gBACA,I;AAbF,O;;aAgBA,Q;;;;2CAGqB;UACjB;mBACF,M,CAAkB,KAAlB,Y;aACA,M,CAAA,O;AAFF,O,CAGE,OAAA,CAAA,EAAU,CAAA;;;;mCAGC;UACPM,MAAAA,GAAS,KAAf,M;WACA,M,CAAA,M;;UACI,KAAA,KAAA,GAAA,GAAA,KAAJ,C,EAA4B;aAC1B,U,CAAA,c,CAAA,C,GAAmCN,IAAAA,CAAAA,MAAAA,KAAgBM,MAAAA,CAAnD,K;aACA,U,CAAA,c,CAAA,C,GAAmCN,IAAAA,CAAAA,MAAAA,KAAgBM,MAAAA,CAAnD,M;aAEA,S,CAAA,c,CAAA,C,GAAkCN,IAAAA,CAAAA,MAAAA,KAAgBM,MAAAA,CAAlD,K;aACA,S,CAAA,c,CAAA,C,GAAkCN,IAAAA,CAAAA,MAAAA,KAAgBM,MAAAA,CAAlD,M;;;WAGF,K;;;;6BAGO;aAEL,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAQ,QAAA,EAAA,EAAI,KAAA,KAAA,CAAZ,EAAA;0BACoB,KAAA,gBAAA,CAAA,IAAA,CADpB,IACoB,CADpB;wBAEkB,KAAA,cAAA,CAAA,IAAA,CAFlB,IAEkB,CAFlB;kBAGY,KAAA,QAAA,CAAA,IAAA,CAAA,IAAA;AAHZ,OAAA,C;;;;CAxIeqD,CAAczD,KAAAA,CAAMC,SAApBwD,C;;ICDAG,MAAAA,GAAAA,UAAAA,gBAAAA,EAAAA;;;kBACnB,K,EAAmB;;;+GAAA,K;;UAGjB,M,GAAc,CAAA,SAAA,EAAA,SAAA,EAAA,SAAA,EAAA,SAAA,EAAA,SAAA,EAAd,SAAc,C;UAQd,Y,GAAoB,KAAA,CAAA,YAAA,CAAA,IAAA,CAApB,KAAoB,C;;;;;;2CAGC;UACjB;mBACF,M,CAAkB,KAAlB,Y;aACA,M,CAAA,O;AAFF,O,CAGE,OAAA,CAAA,EAAU,CAAA;;;;qCAGGxD,M,EAAQ,CAAA;;;mCAIVA,M,EAAQF,K,EAAOC,M,EAAQ;WACpC,Y,CAAA,M,EAAA,K,EAAA,M;iBACA,G,CAAe,KAAf,Y;;;;6BAGOD,K,EAAOC,M,EAAQ;UAChB0D,GAAAA,GAAN,G;WACA,kB,CAAA,I,CAAA,K,GAAqC3D,KAAAA,GAAQ,IAA7C,G;WACA,kB,CAAA,I,CAAA,M,GAAsCC,MAAAA,GAAS,IAA/C,G;WACA,M,CAAA,S,CAAA,C,EAAA,M,CAAA,K,EAAA,M;;;;iCAGWC,M,EAAQF,K,EAAOC,M,EAAQ;WAClC,M,GAAc,IAAd,MAAc,E;UACRW,OAAAA,GAAU,IAAIC,MAAAA,CAApB,OAAgB,E;cAChB,I,GAAe,IAAIA,MAAAA,CAAJ,IAAA,CAAgB,KAAA,KAAA,CAAA,GAAA,GAAiB,KAAA,KAAA,CAAjB,GAAA,GAA/B,EAAe,C;cACf,O,GAAA,C;cAEA,a,CAAsB,IAAIA,MAAAA,CAAJ,IAAA,CAAtB,CAAsB,C;cACtB,a,CAAsB,IAAIA,MAAAA,CAAJ,MAAA,CAAA,CAAA,EAAtB,EAAsB,C;cACtB,a,CACE,IAAIA,MAAAA,CAAJ,QAAA,CAAoB,IAAIA,MAAAA,CAAJ,IAAA,CAAA,CAAA,EAApB,EAAoB,CAApB,EAA4C,IAAIA,MAAAA,CAAJ,IAAA,CAA5C,CAA4C,CAA5C,EADF,OACE,C;cAEF,a,CACE,IAAIA,MAAAA,CAAJ,QAAA,CACE,IAAIA,MAAAA,CAAJ,QAAA,CAAA,CAAA,EAAuBX,MAAAA,CAAvB,MAAA,EAAsCA,MAAAA,CAAtC,KAAA,EAAoDA,MAAAA,CAFxD,MAEI,CADF,C;UAKIyD,GAAAA,GAAN,G;UACMb,kBAAAA,GAAqB,IAAIjC,MAAAA,CAAJ,SAAA,CACzB,IAAIA,MAAAA,CAAJ,QAAA,CACE,IADF,GAAA,EAEE,IAFF,GAAA,EAGEX,MAAAA,CAAAA,KAAAA,GAAe,IAHjB,GAAA,EAIEA,MAAAA,CAAAA,MAAAA,GAAgB,IALO,GACzB,CADyB,EAA3B,OAA2B,C;cAS3B,Y,CAAA,kB;cACA,Y,CAAqB,IAAIW,MAAAA,CAAJ,KAAA,CAAiBA,MAAAA,CAAAA,OAAAA,CAAAA,GAAAA,EAAtC,IAAsCA,CAAjB,C;cACrB,Y,CAAqB,IAAIA,MAAAA,CAAJ,KAAA,CAAiB,KAAtC,MAAqB,C;cAErB,I,CAAA,M;WACA,M,CAAA,U,CAAA,O;UACMC,QAAAA,GAAW,KAAA,cAAA,CAAjB,MAAiB,C;WACjB,M,CAAA,W,CAAA,Q;WAEA,kB,GAAA,kB;cACA,O,CAAA,C;;;;mCAGaZ,M,EAAQ;UACfC,OAAAA,GAAUD,MAAAA,CAAAA,UAAAA,CAAhB,IAAgBA,C;UACVY,QAAAA,GAAW,IAAID,MAAAA,CAArB,cAAiB,E;;eAEjB,c,GAA0B,YAAM;gBAC9B,S,CAAA,C,EAAA,C,EAAwBX,MAAAA,CAAxB,K,EAAsCA,MAAAA,CAAtC,M;AADF,O;;eAIA,iB,GAA6B,UAAA,QAAA,EAAY;YACjC0D,CAAAA,GAAI5C,QAAAA,CAAAA,MAAAA,IAAV,E;YACM6C,CAAAA,GAAIhD,MAAAA,CAAAA,QAAAA,CAAAA,UAAAA,CAAAA,GAAAA,EAAAA,GAAAA,EAAV,KAAUA,C;iBACV,I,CAAA,C,GAAA,C;iBACA,I,CAAA,C,GAAA,C;AAJF,O;;eAOA,gB,GAA4B,UAAA,QAAA,EAAY;YAChC+C,CAAAA,GAAI5C,QAAAA,CAAAA,IAAAA,CAAV,C;YACM6C,CAAAA,GAAI7C,QAAAA,CAAAA,IAAAA,CAAV,C;gBACA,I;gBACA,W,GAAsBA,QAAAA,CAAtB,K;gBACA,S,GAAoBA,QAAAA,CAApB,K;gBAEA,S,CAAkBA,QAAAA,CAAAA,CAAAA,CAAlB,C,EAAgCA,QAAAA,CAAAA,CAAAA,CAAhC,C;gBACA,M,CAAeH,MAAAA,CAAAA,QAAAA,CAAAA,eAAAA,CAAgCG,QAAAA,CAA/C,QAAeH,C;gBACf,S,CAAkB,CAACG,QAAAA,CAAAA,CAAAA,CAAnB,C,EAAiC,CAACA,QAAAA,CAAAA,CAAAA,CAAlC,C;gBAEA,S;gBACA,I,CAAaA,QAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAe4C,CAAAA,GAA5B,C,EAAmC5C,QAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAe6C,CAAAA,GAAlD,C,EAAA,C,EAAA,C;gBAEA,S;gBACA,I;gBACA,W,GAAA,C;gBACA,O;AAjBF,O;;aAoBA,Q;;;;mCAGa;WACb,M,IAAe,KAAA,MAAA,CAAf,MAAe,E;;;;6BAGR;aAEL,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAQ,QAAA,EAAA,EAAI,KAAA,KAAA,CAAZ,EAAA;kCAAA,SAAA;0BAEoB,KAAA,gBAAA,CAAA,IAAA,CAFpB,IAEoB,CAFpB;wBAGkB,KAAA,cAAA,CAAA,IAAA,CAHlB,IAGkB,CAHlB;kBAIY,KAAA,QAAA,CAAA,IAAA,CAAA,IAAA;AAJZ,OAAA,C;;;;CA1HeH,CAAe5D,KAAAA,CAAMC,SAArB2D,C;;ICCAI,MAAAA,GAAAA,UAAAA,gBAAAA,EAAAA;;;kBACnB,K,EAAmB;;;+GAAA,K;;UAEjB,Y,GAAoB,KAAA,CAAA,YAAA,CAAA,IAAA,CAApB,KAAoB,C;;;;;;mCAGP5D,M,EAAQF,K,EAAOC,M,EAAQ;WACpC,Y,CAAA,M,EAAA,K,EAAA,M;iBACA,G,CAAe,KAAf,Y;;;;2CAGqB;UACjB;mBACF,M,CAAkB,KAAlB,Y;aACA,M,CAAA,O;AAFF,O,CAGE,OAAA,CAAA,EAAU,CAAA;;;;6BAGLD,K,EAAOC,M,EAAQ;WACtB,kB,CAAA,I,CAAA,K,GAAA,K;WACA,kB,CAAA,I,CAAA,M,GAAA,M;WACA,M,CAAA,S,CAAA,C,EAAA,M,CAAA,K,EAAA,M;;;;iCAGWC,M,EAAQF,K,EAAOC,M,EAAQ;WAClC,M,GAAc,IAAd,MAAc,E;UAERW,OAAAA,GAAU,IAAIC,MAAAA,CAApB,OAAgB,E;cAChB,I,GAAe,IAAIA,MAAAA,CAAJ,IAAA,CACb,KAAA,KAAA,CAAA,GAAA,GAAiB,IAAIA,MAAAA,CAAJ,IAAA,CAAgB,KAAA,KAAA,CAAjC,GAAiB,CAAjB,GAAmD,IAAIA,MAAAA,CAAJ,IAAA,CADtC,GACsC,CADtC,EAEb,IAAIA,MAAAA,CAAJ,IAAA,CAAA,IAAA,EAFF,GAEE,CAFa,C;cAKf,a,CAAsB,IAAIA,MAAAA,CAAJ,IAAA,CAAtB,CAAsB,C;cACtB,a,CAAsB,IAAIA,MAAAA,CAAJ,MAAA,CAAA,CAAA,EAAtB,CAAsB,C;cACtB,a,CAAsB,IAAIA,MAAAA,CAAJ,IAAA,CAAtB,QAAsB,C;UAEhBkD,SAAAA,GAAY,IAAIlD,MAAAA,CAAJ,QAAA,CAChB,IAAIA,MAAAA,CAAJ,QAAA,CAAA,CAAA,EAAA,CAAA,EAAA,KAAA,EADF,MACE,CADgB,C;cAGlB,a,CAAA,S;cACA,a,CACE,IAAIA,MAAAA,CAAJ,QAAA,CACE,IAAIA,MAAAA,CAAJ,IAAA,CAAA,GAAA,EADF,GACE,CADF,EAEE,IAAIA,MAAAA,CAAJ,IAAA,CAAA,CAAA,EAFF,GAEE,CAFF,EADF,OACE,C;cAOF,Y,CAAqB,IAAIA,MAAAA,CAAJ,KAAA,CAAiBA,MAAAA,CAAAA,OAAAA,CAAAA,GAAAA,EAAtC,GAAsCA,CAAjB,C;cACrB,Y,CAAqB,IAAIA,MAAAA,CAAJ,KAAA,CAAiB,KAAA,KAAA,CAAA,KAAA,IAAtC,MAAqB,C;WACrB,kB,GAA0B,IAAIA,MAAAA,CAAJ,SAAA,CACxB,IAAIA,MAAAA,CAAJ,QAAA,CAAA,CAAA,EAAA,CAAA,EAAA,KAAA,EADwB,MACxB,CADwB,EAA1B,OAA0B,C;cAI1B,Y,CAAqB,KAArB,kB;cAEA,I,CAAA,M;cACA,O,GAAA,C;WACA,M,CAAA,U,CAAA,O;WACA,M,CAAA,W,CAAwB,KAAA,cAAA,CAAA,MAAA,EAAxB,OAAwB,C;;;;mCAGXX,M,EAAQU,O,EAAS;;;UACxBT,OAAAA,GAAUD,MAAAA,CAAAA,UAAAA,CAAhB,IAAgBA,C;UACVY,QAAAA,GAAW,IAAID,MAAAA,CAAJ,cAAA,CAAjB,MAAiB,C;UACXmD,CAAAA,GAAN,G;;eAEA,mB,GAA+B,YAAK;YAC9BC,SAAAA,GAAYrD,OAAAA,CAAhB,S;;aAEK,IAAInB,CAAAA,GAAT,C,EAAgBA,CAAAA,GAAIwE,SAAAA,CAApB,M,EAAsCxE,CAAtC,E,EAA2C;eACpC,IAAIyE,CAAAA,GAAIzE,CAAAA,GAAb,C,EAAoByE,CAAAA,GAAID,SAAAA,CAAxB,M,EAA0CC,CAA1C,E,EAA+C;gBACzCC,EAAAA,GAAKF,SAAAA,CAAT,CAASA,C;gBACLG,EAAAA,GAAKH,SAAAA,CAAT,CAASA,C;gBACLN,GAAAA,GAAMQ,EAAAA,CAAAA,CAAAA,CAAAA,UAAAA,CAAgBC,EAAAA,CAA1B,CAAUD,C;;gBAENR,GAAAA,GAAJ,C,EAAa;kBACP3B,KAAAA,GAAQ,CAAC,IAAI2B,GAAAA,GAAL,CAAA,IAAZ,G;sBACA,W,GAAsB5C,QAAAA,CAAS,MAAA,CAAA,KAAA,CAATA,KAAAA,EAAAA,KAAAA,CAAAA,IAAAA,mBAAAA,KAAAA,GAAtB,G;sBACA,S;sBACA,M,CAAeoD,EAAAA,CAAAA,CAAAA,CAAf,C,EAAuBA,EAAAA,CAAAA,CAAAA,CAAvB,C;sBACA,M,CAAeC,EAAAA,CAAAA,CAAAA,CAAf,C,EAAuBA,EAAAA,CAAAA,CAAAA,CAAvB,C;sBACA,S;sBACA,M;;;;AAhBR,O;;aAsBA,Q;;;;mCAGa;WACb,M,IAAe,KAAA,MAAA,CAAf,MAAe,E;;;;6BAGR;aAEL,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAQ,QAAA,EAAA,EAAI,KAAA,KAAA,CAAZ,EAAA;kCAAA,QAAA;wBAEkB,KAAA,cAAA,CAAA,IAAA,CAFlB,IAEkB,CAFlB;kBAGY,KAAA,QAAA,CAAA,IAAA,CAAA,IAAA;AAHZ,OAAA,C;;;;CAnGeN,CAAehE,KAAAA,CAAMC,SAArB+D,C;;ICDAO,MAAAA,GAAAA,UAAAA,gBAAAA,EAAAA;;;kBACnB,K,EAAmB;;;+GAAA,K;;UAGjB,M,GAAc,CAAA,SAAA,EAAA,SAAA,EAAA,SAAA,EAAA,SAAA,EAAA,SAAA,EAAA,SAAA,EAAd,SAAc,C;UAUd,Y,GAAoB,KAAA,CAAA,YAAA,CAAA,IAAA,CAApB,KAAoB,C;;;;;;2CAGC;UACjB;mBACF,M,CAAkB,KAAlB,Y;aACA,M,CAAA,O;AAFF,O,CAGE,OAAA,CAAA,EAAU,CAAA;;;;mCAGCnE,M,EAAQF,K,EAAOC,M,EAAQ;WACpC,Y,CAAA,M,EAAA,K,EAAA,M;iBACA,G,CAAe,KAAf,Y;;;;6BAGOD,K,EAAOC,M,EAAQ;WACtB,kB,CAAA,I,CAAA,K,GAAA,K;WACA,kB,CAAA,I,CAAA,M,GAAA,M;WACA,M,CAAA,S,CAAA,C,EAAA,M,CAAA,K,EAAA,M;;;;iCAGWC,M,EAAQF,K,EAAOC,M,EAAQ;WAClC,M,GAAc,IAAd,MAAc,E;UAERW,OAAAA,GAAU,IAAIC,MAAAA,CAApB,OAAgB,E;cAChB,I,GAAe,IAAIA,MAAAA,CAAJ,IAAA,CAAgB,KAAA,KAAA,CAAA,GAAA,IAA/B,EAAe,C;cACf,O,GAAA,K;cAEA,a,CAAsB,IAAIA,MAAAA,CAAJ,IAAA,CAAtB,CAAsB,C;cACtB,a,CAAsB,IAAIA,MAAAA,CAAJ,MAAA,CAAA,EAAA,EAAtB,GAAsB,C;cACtB,a,CACE,IAAIA,MAAAA,CAAJ,QAAA,CACE,IAAIA,MAAAA,CAAJ,IAAA,CADF,GACE,CADF,EAEE,IAAIA,MAAAA,CAAJ,IAAA,CAAA,CAAA,EAFF,GAEE,CAFF,EADF,OACE,C;cAMF,a,CACE,IAAIA,MAAAA,CAAJ,QAAA,CACE,IAAIA,MAAAA,CAAJ,QAAA,CAAA,CAAA,EAAA,CAAA,EAA0BX,MAAAA,CAA1B,KAAA,EAAwCA,MAAAA,CAF5C,MAEI,CADF,C;UAKI4C,kBAAAA,GAAqB,IAAIjC,MAAAA,CAAJ,SAAA,CACzB,IAAIA,MAAAA,CAAJ,QAAA,CAAA,CAAA,EAAA,CAAA,EAA0BX,MAAAA,CAA1B,KAAA,EAAwCA,MAAAA,CADf,MACzB,CADyB,EAA3B,OAA2B,C;cAI3B,Y,CAAA,kB;cACA,Y,CAAqB,IAAIW,MAAAA,CAAJ,KAAA,CAAiBA,MAAAA,CAAAA,OAAAA,CAAAA,IAAAA,EAAtC,IAAsCA,CAAjB,C;cACrB,Y,CAAqB,IAAIA,MAAAA,CAAJ,KAAA,CAAiB,KAAtC,QAAsC,EAAjB,C;cACrB,Y,CAAqB,IAAIA,MAAAA,CAAJ,WAAA,CAAA,EAAA,EAAA,EAAA,EAArB,GAAqB,C;cAErB,I,CAAA,M;WACA,M,CAAA,U,CAAA,O;UAEMC,QAAAA,GAAW,IAAID,MAAAA,CAAJ,cAAA,CAAjB,MAAiB,C;WACjB,M,CAAA,W,CAAA,Q;WAEA,kB,GAAA,kB;;;;+BAGS;UACLJ,CAAAA,GAAI,KAAR,M;;UACI,KAAA,KAAA,CAAJ,K,EAAsB;YACjBa,KAAAA,CAAAA,OAAAA,CAAc,KAAA,KAAA,CAAjB,KAAGA,C,EAAgC;cAC7B,KAAA,KAAA,CAAJ,K;AADF,S,MAEK;cACC,CAAC,KAAA,KAAA,CAAL,KAAI,C;;;;aAIR,C;;;;mCAGa;WACb,M,IAAe,KAAA,MAAA,CAAf,MAAe,E;;;;6BAGR;aAEL,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAQ,QAAA,EAAA,EAAI,KAAA,KAAA,CAAZ,EAAA;kCAAA,QAAA;wBAEkB,KAAA,cAAA,CAAA,IAAA,CAFlB,IAEkB,CAFlB;kBAGY,KAAA,QAAA,CAAA,IAAA,CAAA,IAAA;AAHZ,OAAA,C;;;;CA9Fe+C,CAAevE,KAAAA,CAAMC,SAArBsE,C;;ICAAC,OAAAA,GAAAA,UAAAA,gBAAAA,EAAAA;;;mBACnB,K,EAAmB;;;iHAAA,K;;UAEjB,Y,GAAoB,KAAA,CAAA,YAAA,CAAA,IAAA,CAApB,KAAoB,C;;;;;;qCAGLpE,M,EAAQ,CAAA;;;mCAIVA,M,EAAQF,K,EAAOC,M,EAAQ;WACpC,Y,CAAA,M,EAAA,K,EAAA,M;WACA,Y;;;;6BAGOD,K,EAAOC,M,EAAQ;WACtB,kB,CAAA,I,CAAA,K,GAAA,K;WACA,kB,CAAA,I,CAAA,M,GAAA,M;WACA,M,CAAA,S,CAAA,C,EAAA,M,CAAA,K,EAAA,M;;;;iCAGWC,M,EAAQF,K,EAAOC,M,EAAQ;WAClC,M,GAAc,IAAd,MAAc,E;UAERW,OAAAA,GAAU,IAAIC,MAAAA,CAApB,OAAgB,E;cAChB,O,GAAA,K;cACA,I,GAAe,IAAIA,MAAAA,CAAJ,IAAA,CAAgB,KAAA,KAAA,CAAA,GAAA,GAAiB,KAAA,KAAA,CAAjB,GAAA,GAA/B,EAAe,C;cACf,a,CAAsB,IAAIA,MAAAA,CAAJ,IAAA,CAAtB,CAAsB,C;cACtB,a,CAAsB,IAAIA,MAAAA,CAAJ,MAAA,CAAA,CAAA,EAAtB,CAAsB,C;cACtB,a,CACE,IAAIA,MAAAA,CAAJ,QAAA,CACE,IAAIA,MAAAA,CAAJ,IAAA,CADF,GACE,CADF,EAEE,IAAIA,MAAAA,CAAJ,IAAA,CAAA,CAAA,EAFF,GAEE,CAFF,EADF,OACE,C;cAMF,a,CACE,IAAIA,MAAAA,CAAJ,QAAA,CAAoB,IAAIA,MAAAA,CAAJ,QAAA,CAAA,CAAA,EAAA,CAAA,EAAA,KAAA,EADtB,MACsB,CAApB,C;UAGI0D,SAAAA,GAAY;WACbvE,KAAAA,GADa,CAAA;WAEbC,MAAAA,GAAS;AAFI,O;UAKZqD,mBAAAA,GAAsB,IAAIzC,MAAAA,CAAJ,UAAA,CAAA,SAAA,EAAA,CAAA,EAA5B,CAA4B,C;UACtBiC,kBAAAA,GAAqB,IAAIjC,MAAAA,CAAJ,SAAA,CACzB,IAAIA,MAAAA,CAAJ,QAAA,CAAA,CAAA,EAAA,CAAA,EAA0BX,MAAAA,CAA1B,KAAA,EAAwCA,MAAAA,CADf,MACzB,CADyB,EAA3B,OAA2B,C;cAI3B,Y,CAAqB,IAAIW,MAAAA,CAAJ,KAAA,CAAiB,KAAA,KAAA,CAAA,KAAA,IAAtC,MAAqB,C,EA7Ba,C;;cA+BlC,Y,CAAA,mB,EAAA,kB;cACA,Y,CAAqB,IAAIA,MAAAA,CAAJ,WAAA,CAAA,EAAA,EAAA,EAAA,EAArB,IAAqB,C;cACrB,I,CAAA,M;WAEA,M,CAAA,U,CAAA,O;WACA,M,CAAA,W,CAAwB,KAAA,cAAA,CAAxB,MAAwB,C;WACxB,kB,GAAA,kB;;;;mCAGaX,M,EAAQ;UACfsE,UAAAA,GAAN,E;UACMC,SAAAA,GAAN,C;UACMtE,OAAAA,GAAUD,MAAAA,CAAAA,UAAAA,CAAhB,IAAgBA,C;UACVY,QAAAA,GAAW,IAAID,MAAAA,CAAJ,cAAA,CAAjB,MAAiB,C;;eAEjB,c,GAA0B,YAAY;gBACpC,S,CAAA,C,EAAA,C,EAAwBX,MAAAA,CAAxB,K,EAAsCA,MAAAA,CAAtC,M;AADF,O;;eAIA,iB,GAA6B,UAAA,QAAA,EAAY;iBACvC,I,CAAA,M,GAAA,E;iBACA,I,CAAA,K,GAAA,C;AAFF,O;;eAKA,gB,GAA4B,UAAA,QAAA,EAAoB;wBAC9C,Q;YACIc,QAAAA,CAAAA,IAAAA,CAAAA,KAAAA,GAAAA,SAAAA,KAAJ,C,EAA2C0D,cAAAA,CAAAA,QAAAA,CAAAA;wBAC3C,Q;iBACA,I,CAAA,K;AAJF,O;;UAOMA,cAAAA,GAAiB,SAAjBA,cAAiB,CAAA,QAAA,EAAY;iBACjC,I,CAAA,M,CAAA,O,CAA6B1D,QAAAA,CAAAA,CAAAA,CAA7B,C;iBACA,I,CAAA,M,CAAA,O,CAA6BA,QAAAA,CAAAA,CAAAA,CAA7B,C;;YAEIA,QAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAAA,MAAAA,GAAJ,U,EAA8C;mBAC5C,I,CAAA,M,CAAA,G;mBACA,I,CAAA,M,CAAA,G;;AANJ,O;;UAUM2D,eAAAA,GAAkB,SAAlBA,eAAkB,CAAA,QAAA,EAAY;gBAClC,S,GAAoB3D,QAAAA,CAApB,K;gBACA,S;gBACA,G,CACEA,QAAAA,CAAAA,CAAAA,CADF,C,EAEEA,QAAAA,CAAAA,CAAAA,CAFF,C,EAGEA,QAAAA,CAHF,M,EAAA,C,EAKEpB,IAAAA,CAAAA,EAAAA,GALF,C,EAAA,I;gBAQA,S;gBACA,I;AAZF,O;;UAeMgF,eAAAA,GAAkB,SAAlBA,eAAkB,CAAA,QAAA,EAAY;gBAClC,S;gBACA,W,GAAsB5D,QAAAA,CAAtB,K;gBAEA,M,CAAeA,QAAAA,CAAAA,CAAAA,CAAf,C,EAA6BA,QAAAA,CAAAA,CAAAA,CAA7B,C;YAEM6D,CAAAA,GAAI7D,QAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAV,M;;aACK,IAAIvB,CAAAA,GAAT,C,EAAgBA,CAAAA,GAAhB,C,EAAuBA,CAAAA,IAAvB,C,EAA+B;cACvBqF,CAAAA,GAAI9D,QAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAV,CAAUA,C;cACJ+D,CAAAA,GAAI/D,QAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAqBvB,CAAAA,GAA/B,CAAUuB,C;kBAEV,S,GAAoBgE,gBAAAA,CAAAA,CAAAA,EAApB,CAAoBA,C;kBACpB,M,CAAA,C,EAAA,C;kBACA,M;;AAbJ,O;;UAiBMA,gBAAAA,GAAmB,SAAnBA,gBAAmB,CAAA,CAAA,EAAA,CAAA,EAAU;YAC7BH,CAAAA,IAAJ,C,EAAY,OAAA,CAAA;YAENI,GAAAA,GAAN,C;YACMC,CAAAA,GAAI,CAACD,GAAAA,GAAD,CAAA,KAAa,IAAA,CAAA,GAAvB,CAAU,C;YACJE,CAAAA,GAAI,IAAV,C;YACMC,CAAAA,GAAI,CAAC3F,CAAAA,GAAD,CAAA,IAAV,C;YACIE,GAAAA,GAAMuF,CAAAA,GAAAA,CAAAA,GAAV,C;cACMvF,GAAAA,IAAN,C;eAEA,G;AAVF,O;;aAaA,Q;;;;mCAGa;;;iBACb,G,CAAe,YAAM;eACnB,M,CAAA,M,GADmB,C;;AAArB,O;;;;6BAMO;aAEL,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAQ,QAAA,EAAA,EAAI,KAAA,KAAA,CAAZ,EAAA;kCAAA,QAAA;0BAEoB,KAAA,gBAAA,CAAA,IAAA,CAFpB,IAEoB,CAFpB;wBAGkB,KAAA,cAAA,CAAA,IAAA,CAHlB,IAGkB,CAHlB;kBAIY,KAAA,QAAA,CAAA,IAAA,CAAA,IAAA;AAJZ,OAAA,C;;;;CAtJe2E,CAAgBxE,KAAAA,CAAMC,SAAtBuE,C;;ACArB,IAAMe,KAAAA,GAAQ,CAAA,SAAA,EAAA,SAAA,EAAA,SAAA,EAAA,SAAA,EAAA,SAAA,EAAA,SAAA,EAAA,SAAA,EAAd,SAAc,CAAd;;IAWqBC,OAAAA,GAAAA,UAAAA,gBAAAA,EAAAA;;;mBACnB,K,EAAmB;;;iHAAA,K;;UAEjB,Y,GAAoB,KAAA,CAAA,YAAA,CAAA,IAAA,CAApB,KAAoB,C;;;;;;mCAGPpF,M,EAAQF,K,EAAOC,M,EAAQ;WACpC,Y,CAAA,M;WACA,a,CAAmB;gBAAA,MAAA;WAEdD,KAAAA,GAFc,CAAA;WAGdC,MAAAA,GAHc,CAAA;qBAAA,IAAA;cAKX;AALW,O;iBAQnB,G,CAAe,KAAf,Y;;;;2CAGqB;UACjB;mBACF,M,CAAkB,KAAlB,Y;aACA,M,CAAA,O;AAFF,O,CAGE,OAAA,CAAA,EAAU,CAAA;;;;+BAGH,CAAA;;;iCAEEC,M,EAAQ;WACnB,M,GAAc,IAAd,MAAc,E;UACRY,QAAAA,GAAW,KAAA,cAAA,CAAjB,MAAiB,C;WACjB,M,CAAA,W,CAAA,Q;;;;mCAGaZ,M,EAAQ;UACfC,OAAAA,GAAUD,MAAAA,CAAAA,UAAAA,CAAhB,IAAgBA,C;UACVY,QAAAA,GAAW,IAAID,MAAAA,CAArB,cAAiB,E;;eAEjB,c,GAA0B,YAAM;gBAC9B,S,CAAA,C,EAAA,C,EAAwBX,MAAAA,CAAxB,K,EAAsCA,MAAAA,CAAtC,M;AADF,O;;eAIA,iB,GAA6B,UAAA,QAAA,EAAY;iBACvC,I,CAAA,K,GAAsBW,MAAAA,CAAAA,QAAAA,CAAAA,UAAAA,CAAAA,CAAAA,EAAAA,EAAAA,EAAtB,IAAsBA,C;AADxB,O;;eAIA,gB,GAA4B,UAAA,QAAA,EAAY;gBACtC,I;gBACA,W,GAAsBG,QAAAA,CAAtB,K;gBACA,S,GAAoBA,QAAAA,CAApB,K;gBAEA,S,CAAkBA,QAAAA,CAAAA,CAAAA,CAAlB,C,EAAgCA,QAAAA,CAAAA,CAAAA,CAAhC,C;gBACA,M,CAAeH,MAAAA,CAAAA,QAAAA,CAAAA,eAAAA,CAAgCG,QAAAA,CAA/C,QAAeH,C;gBACf,S,CAAkB,CAACG,QAAAA,CAAAA,CAAAA,CAAnB,C,EAAiC,CAACA,QAAAA,CAAAA,CAAAA,CAAlC,C;gBAEA,S;oBACA,Q,EAAsBA,QAAAA,CAAAA,IAAAA,CAAtB,K;gBAEA,S;gBACA,I;gBACA,W,GAAA,C;gBACA,O;AAfF,O;;eAkBA,c,GAA0B,UAAA,QAAA,EAAY,CAAtC,C;;UAEMuE,WAAAA,GAAc,SAAdA,WAAc,CAAA,QAAA,EAAA,KAAA,EAAqB;YACnCC,KAAAA,IAAJ,C,EAAgB;kBACd,G,CACExE,QAAAA,CAAAA,CAAAA,CADF,C,EAEEA,QAAAA,CAAAA,CAAAA,CAFF,C,EAGEA,QAAAA,CAHF,M,EAAA,C,EAKEpB,IAAAA,CAAAA,EAAAA,GALF,C,EAAA,I;AADF,S,MASO;cACC8B,MAAAA,GAASV,QAAAA,CAAf,M;;eAEK,IAAIvB,CAAAA,GAAT,C,EAAgBA,CAAAA,IAAhB,K,EAA4BA,CAA5B,E,EAAiC;gBAC3BqF,CAAAA,GACF9D,QAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GACAU,MAAAA,GAAS9B,IAAAA,CAAAA,GAAAA,CAAYA,IAAAA,CAAAA,EAAAA,GAAD,GAACA,GAAF,GAAEA,GAAH,KAAGA,GAFvB,CAEWA,C;gBACPmF,CAAAA,GACF/D,QAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GACAU,MAAAA,GAAS9B,IAAAA,CAAAA,GAAAA,CAAYA,IAAAA,CAAAA,EAAAA,GAAD,GAACA,GAAF,GAAEA,GAAH,KAAGA,GAFvB,CAEWA,C;gBAEPH,CAAAA,KAAJ,C,EAAaU,OAAAA,CAAAA,MAAAA,CAAAA,CAAAA,EAAb,CAAaA,E,KACRA,OAAAA,CAAAA,MAAAA,CAAAA,CAAAA,EAAAA,CAAAA;;;AAtBX,O;;aA2BA,Q;;;;wCAcC;UAVDsF,WAUC,GAAA,IAAA,CAVDA,W;UACAvF,MASC,GAAA,IAAA,CATDA,M;UACA4E,CAQC,GAAA,IAAA,CARDA,C;UACAC,CAOC,GAAA,IAAA,CAPDA,C;UACArD,MAMC,GAAA,IAAA,CANDA,M;4BACAQ,K;UAAAA,KAKC,GAAA,UAAA,KAAA,SAAA,GALOmD,KAKP,GAAA,U;2BAJDxC,I;UAAAA,IAIC,GAAA,SAAA,KAAA,SAAA,GAJM,MAIN,GAAA,S;2BAHD6C,I;UAAAA,IAGC,GAAA,SAAA,KAAA,SAAA,GAHM,KAGN,GAAA,S;4BAFD1D,K;UAAAA,KAEC,GAAA,UAAA,KAAA,SAAA,GAFO,IAEP,GAAA,U;8BADD2D,O;UAAAA,OACC,GAAA,YAAA,KAAA,SAAA,GADS,GACT,GAAA,Y;UACK/E,OAAAA,GAAU,KAAA,MAAA,CAAA,IAAA,CAAA,GAAA,CAAqBC,MAAAA,CAArC,OAAgB,C;;UAEZ,CAACD,OAAAA,CAAL,S,EAAwB;gBACtB,I,GAAe,IAAIC,MAAAA,CAAJ,IAAA,CACb,KAAA,KAAA,CAAA,GAAA,GAAiB,IAAIA,MAAAA,CAAJ,IAAA,CAAgB,KAAA,KAAA,CAAjC,GAAiB,CAAjB,GAAmD,IAAIA,MAAAA,CAAJ,IAAA,CAAA,CAAA,EADtC,CACsC,CADtC,EAEb,IAAIA,MAAAA,CAAJ,IAAA,CAAA,GAAA,EAFF,GAEE,CAFa,C;YAKT+E,UAAAA,GAAaH,WAAAA,GACf,IAAI5E,MAAAA,CAAJ,MAAA,CAAA,EAAA,EADe4E,GACf,CADeA,GAEf,IAAI5E,MAAAA,CAAJ,MAAA,CAAA,CAAA,EAFJ,MAEI,C;gBACJ,a,CAAsB,IAAIA,MAAAA,CAAJ,IAAA,CAAtB,CAAsB,C;gBACtB,a,CAAA,U;gBACA,a,CAAsB,IAAIA,MAAAA,CAAJ,IAAA,CAAA,CAAA,EAAtB,CAAsB,C;gBACtB,a,CACE,IAAIA,MAAAA,CAAJ,QAAA,CACE,IAAIA,MAAAA,CAAJ,IAAA,CAAA,CAAA,EADF,CACE,CADF,EAEE,IAAIA,MAAAA,CAAJ,IAAA,CAAgB,CAAhB,EAAA,EAFF,EAEE,CAFF,EADF,OACE,C;gBAOF,Y,CAAqB,IAAIA,MAAAA,CAAJ,KAAA,CAAA,KAAA,EAArB,GAAqB,C;gBACrB,Y,CAAqB,IAAIA,MAAAA,CAAJ,KAAA,CAArB,KAAqB,C;gBACrB,Y,CAAqB,IAAIA,MAAAA,CAAJ,KAAA,CAAA,CAAA,EAArB,GAAqB,C;gBACrB,Y,CAAqB,IAAIA,MAAAA,CAAzB,MAAqB,E;gBACrB,Y,CAAqB,IAAIA,MAAAA,CAAJ,OAAA,CAArB,OAAqB,C;gBAErB,Y,CAAqB,KAAA,mBAAA,CAArB,MAAqB,C;gBACrB,Y,CACE,IAAIA,MAAAA,CAAJ,SAAA,CACE,IAAIA,MAAAA,CAAJ,QAAA,CAAA,CAAA,EAAA,CAAA,EAA0BX,MAAAA,CAA1B,KAAA,EAAwCA,MAAAA,CAD1C,MACE,CADF,EADF,IACE,C;;;cAOJ,C,CAAA,C,GAAA,C;cACA,C,CAAA,C,GAAA,C;UACIwF,IAAAA,KAAJ,M,EAAqB9E,OAAAA,CAAAA,IAAAA,CAArB,MAAqBA,E,KAChBA,OAAAA,CAAAA,IAAAA;WAEL,M,CAAA,U,CAAA,O,EA3CC,C;;;;kCA+CWA,O,EAAS;;;iBACV,YAAM;gBACf,S,GAAA,I;;eACA,M,CAAA,I,CAAA,M,CAAA,O;;eACA,M,CAAA,a,CAAA,O;AAHF,O,EAAA,G;;;;wCAOkBV,M,EAAQ;;;aACnB;oBACO,SAAA,UAAA,CAAA,QAAA,EAAY;mBACtB,I,GAAgBc,QAAAA,CAAAA,IAAAA,IAAhB,E;mBACA,I,CAAA,S,GAA0BA,QAAAA,CAA1B,M;mBACA,I,CAAA,Y,GAAA,C;AAJG,SAAA;wBAMW,SAAA,cAAA,CAAA,QAAA,EAAY;cACtBA,QAAAA,CAAAA,MAAAA,GAAJ,C,EAAyB;cACrBA,QAAAA,CAAAA,IAAAA,CAAAA,YAAAA,IAAJ,C,EAAqC;;cAEjCA,QAAAA,CAAAA,MAAAA,IAAoB,IAAD,CAAC,GAASA,QAAAA,CAAAA,IAAAA,CAAjC,S,EAA0D;qBACxD,I,CAAA,Y;;mBACA,a,CAAmB;sBAAA,MAAA;iBAEdA,QAAAA,CAAAA,CAAAA,CAFc,CAAA;iBAGdA,QAAAA,CAAAA,CAAAA,CAHc,CAAA;sBAITA,QAAAA,CAAAA,MAAAA,IAAmB,IAJV,CAITA,CAJS;qBAAA,GAAA;uBAAA,CAAA;qBAOVA,QAAAA,CAPU,KAAA;oBAQX;AARW,a;;;AAZlB,O;;;;mCA2BM;WACb,M,IAAe,KAAA,MAAA,CAAf,MAAe,E;;;;6BAGR;aAEL,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAQ,QAAA,EAAA,EAAI,KAAA,KAAA,CAAZ,EAAA;kCAAA,QAAA;wBAEkB,KAAA,cAAA,CAAA,IAAA,CAFlB,IAEkB,CAFlB;kBAGY,KAAA,QAAA,CAAA,IAAA,CAAA,IAAA;AAHZ,OAAA,C;;;;CApMesE,CAAgBxF,KAAAA,CAAMC,SAAtBuF,C;;ICXAO,QAAAA,GAAAA,UAAAA,gBAAAA,EAAAA;;;oBACnB,K,EAAmB;;;mHAAA,K;;UAGjB,M,GAAc,CAAA,SAAA,EAAA,SAAA,EAAA,SAAA,EAAA,SAAA,EAAA,SAAA,EAAA,SAAA,EAAd,SAAc,C;UASd,Y,GAAoB,KAAA,CAAA,YAAA,CAAA,IAAA,CAApB,KAAoB,C;;;;;;2CAGC;UACjB;mBACF,M,CAAkB,KAAlB,Y;aACA,M,CAAA,O;AAFF,O,CAGE,OAAA,CAAA,EAAU,CAAA;;;;mCAGC3F,M,EAAQF,K,EAAOC,M,EAAQ;WACpC,Y,CAAA,M,EAAA,K,EAAA,M;iBACA,G,CAAe,KAAf,Y;;;;+BAGS,CAAA;;;iCAEEC,M,EAAQF,K,EAAOC,M,EAAQ;WAClC,M,GAAc,IAAd,MAAc,E;UACRW,OAAAA,GAAU,IAAIC,MAAAA,CAApB,OAAgB,E;cAChB,I,GAAe,IAAIA,MAAAA,CAAJ,IAAA,CACb,KAAA,KAAA,CAAA,GAAA,GAAiB,IAAIA,MAAAA,CAAJ,IAAA,CAAgB,KAAA,KAAA,CAAjC,GAAiB,CAAjB,GAAmD,IAAIA,MAAAA,CAAJ,IAAA,CAAA,CAAA,EADtC,CACsC,CADtC,EAEb,IAAIA,MAAAA,CAAJ,IAAA,CAAA,GAAA,EAFF,IAEE,CAFa,C;cAKf,a,CAAsB,IAAIA,MAAAA,CAAJ,IAAA,CAAtB,CAAsB,C;cACtB,a,CAAsB,IAAIA,MAAAA,CAAJ,MAAA,CAAA,EAAA,EAAtB,GAAsB,C;cACtB,a,CAAsB,IAAIA,MAAAA,CAAJ,IAAA,CAAA,CAAA,EAAtB,CAAsB,C;cACtB,a,CACE,IAAIA,MAAAA,CAAJ,QAAA,CACE,IAAIA,MAAAA,CAAJ,IAAA,CAAA,CAAA,EADF,CACE,CADF,EAEE,IAAIA,MAAAA,CAAJ,IAAA,CAAA,CAAA,EAFF,GAEE,CAFF,EADF,OACE,C;cAMF,a,CACE,IAAIA,MAAAA,CAAJ,QAAA,CAAoB,IAAIA,MAAAA,CAAJ,UAAA,CAAsBb,KAAAA,GAAtB,CAAA,EAAiCC,MAAAA,GAAjC,CAAA,EADtB,GACsB,CAApB,C;cAGF,Y,CAAqB,IAAIY,MAAAA,CAAJ,KAAA,CAAA,CAAA,EAArB,CAAqB,C;cACrB,Y,CAAqB,IAAIA,MAAAA,CAAJ,KAAA,CAAA,GAAA,EAArB,CAAqB,C;cACrB,Y,CAAqB,KAArB,qBAAqB,E;cACrB,Y,CAAqB,IAAIA,MAAAA,CAAJ,KAAA,CAAiB,KAAjB,MAAA,EAArB,QAAqB,C;cACrB,I;WACA,M,CAAA,U,CAAA,O;UAEMC,QAAAA,GAAW,IAAID,MAAAA,CAAJ,cAAA,CAAjB,MAAiB,C;WACjB,M,CAAA,W,CAAA,Q;;;;4CAGsB;UAChB0B,CAAAA,GAAI,KAAV,G;aACO;oBACO,SAAA,UAAA,CAAA,QAAA,EAAmB;mBAC7B,C,GAAa,IAAI1B,MAAAA,CAAJ,QAAA,CAAA,CAAA,EAAb,CAAa,C;AAFV,SAAA;wBAIW,SAAA,cAAA,CAAA,QAAA,EAAY;cACtBiF,MAAAA,GAAS9E,QAAAA,CAAAA,CAAAA,CAAAA,MAAAA,KAAb,I;cACI+E,QAAAA,GAAW/E,QAAAA,CAAAA,CAAAA,CAAf,WAAeA,E;sBACH,OAAZ,C;mBAEA,C,CAAA,C,GAAeuB,CAAAA,GAAAA,MAAAA,GAAa3C,IAAAA,CAAAA,GAAAA,CAA5B,QAA4BA,C;mBAC5B,C,CAAA,C,GAAe2C,CAAAA,GAAAA,MAAAA,GAAa3C,IAAAA,CAAAA,GAAAA,CAA5B,QAA4BA,C;mBAC5B,C,CAAA,G,CAAeoB,QAAAA,CAAf,C;;AAXG,O;;;;mCAgBM;WACb,M,IAAe,KAAA,MAAA,CAAf,MAAe,E;;;;6BAGR;aAEL,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAQ,QAAA,EAAA,EAAI,KAAA,KAAA,CAAZ,EAAA;kCAAA,KAAA;wBAEkB,KAAA,cAAA,CAAA,IAAA,CAFlB,IAEkB,CAFlB;kBAGY,KAAA,QAAA,CAAA,IAAA,CAAA,IAAA;AAHZ,OAAA,C;;;;CAvFe6E,CAAiB/F,KAAAA,CAAMC,SAAvB8F,C;;ICSAG,WAAAA,GAAAA,UAAAA,UAAAA,EAAAA;;;uBAEnB,K,EAAmB;;oHAAA,K;;;;;gCAIP;mBACiB,KADjB,K;UACFzE,GADE,GAAA,MAAA,CAAA,G;UACG0E,EADH,GAAA,MAAA,CAAA,E;UACO/D,KADP,GAAA,MAAA,CAAA,K,CAAA,C;;;UAKN,CAAC,KAAL,M,EAAkB;aAChB,M,GAAc,IAAd,IAAc,E;aACd,M,CAAA,G,CAAA,I,EAAsB,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAO,UAAA,GAAA,EAAP,GAAA;AAAiB,UAAA,EAAA,EAAjB,EAAA;AAAyB,UAAA,KAAA,EAA/C;AAAsB,SAAA,C;aACtB,M,CAAA,G,CAAA,G,EAAqB,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,UAAA,GAAA,EAAN,GAAA;AAAgB,UAAA,EAAA,EAAhB,EAAA;AAAwB,UAAA,KAAA,EAA7C;AAAqB,SAAA,C;aACrB,M,CAAA,G,CAAA,G,EAAqB,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAO,UAAA,GAAA,EAAP,GAAA;AAAiB,UAAA,EAAA,EAAjB,EAAA;AAAyB,UAAA,KAAA,EAA9C;AAAqB,SAAA,C;aACrB,M,CAAA,G,CAAA,I,EAAsB,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAO,UAAA,GAAA,EAAP,GAAA;AAAiB,UAAA,EAAA,EAAjB,EAAA;AAAyB,UAAA,KAAA,EAA/C;AAAsB,SAAA,C;aACtB,M,CAAA,G,CAAA,I,EAAsB,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAQ,UAAA,GAAA,EAAR,GAAA;AAAkB,UAAA,EAAA,EAAlB,EAAA;AAA0B,UAAA,KAAA,EAAhD;AAAsB,SAAA,C;aACtB,M,CAAA,G,CAAA,I,EAAsB,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAQ,UAAA,GAAA,EAAR,GAAA;AAAkB,UAAA,EAAA,EAAlB,EAAA;AAA0B,UAAA,KAAA,EAAhD;AAAsB,SAAA,C;aACtB,M,CAAA,G,CAAA,G,EAAqB,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA;AAAS,UAAA,GAAA,EAAT,GAAA;AAAmB,UAAA,EAAA,EAAnB,EAAA;AAA2B,UAAA,KAAA,EAAhD;AAAqB,SAAA,C;aACrB,M,CAAA,G,CAAA,I,EAAsB,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAQ,UAAA,GAAA,EAAR,GAAA;AAAkB,UAAA,EAAA,EAAlB,EAAA;AAA0B,UAAA,KAAA,EAAhD;AAAsB,SAAA,C;aACtB,M,CAAA,G,CAAA,I,EAAsB,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA;AAAS,UAAA,GAAA,EAAT,GAAA;AAAmB,UAAA,EAAA,EAAnB,EAAA;AAA2B,UAAA,KAAA,EAAjD;AAAsB,SAAA,C;aACtB,M,CAAA,G,CAAA,I,EAAsB,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;AAAU,UAAA,GAAA,EAAV,GAAA;AAAoB,UAAA,EAAA,EAApB,EAAA;AAA4B,UAAA,KAAA,EAAlD;AAAsB,SAAA,C;;;aAEjB,KAAA,MAAA,CAAP,SAAO,E;;;;qCAGQ;oBAC0B,KAD1B,K;UACPgE,IADO,GAAA,OAAA,CAAA,I;UACD3E,GADC,GAAA,OAAA,CAAA,G;UACI0E,EADJ,GAAA,OAAA,CAAA,E;UACQ/D,KADR,GAAA,OAAA,CAAA,K;UACeb,MADf,GAAA,OAAA,CAAA,M;UAGX4C,SAAAA,GAAAA,KAAJ,C;;cACQkC,MAAAA,CAAAA,IAAAA,CAAAA,CAAR,WAAQA,E;aACN,O;sBACc,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAO,YAAA,GAAA,EAAP,GAAA;AAAiB,YAAA,EAAA,EAAjB,EAAA;AAAyB,YAAA,KAAA,EAArC;AAAY,WAAA,C;;;aAEd,M;sBACc,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,YAAA,GAAA,EAAN,GAAA;AAAgB,YAAA,EAAA,EAAhB,EAAA;AAAwB,YAAA,KAAA,EAApC;AAAY,WAAA,C;;;aAEd,O;sBACc,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAO,YAAA,GAAA,EAAP,GAAA;AAAiB,YAAA,EAAA,EAAjB,EAAA;AAAyB,YAAA,KAAA,EAArC;AAAY,WAAA,C;;;aAEd,O;sBACc,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAO,YAAA,GAAA,EAAP,GAAA;AAAiB,YAAA,EAAA,EAAjB,EAAA;AAAyB,YAAA,KAAA,EAArC;AAAY,WAAA,C;;;aAEd,Q;sBACc,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAQ,YAAA,GAAA,EAAR,GAAA;AAAkB,YAAA,EAAA,EAAlB,EAAA;AAA0B,YAAA,KAAA,EAAtC;AAAY,WAAA,C;;;aAEd,Q;sBACc,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAQ,YAAA,GAAA,EAAR,GAAA;AAAkB,YAAA,EAAA,EAAlB,EAAA;AAA0B,YAAA,KAAA,EAAtC;AAAY,WAAA,C;;;aAEd,S;sBACc,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA;AAAS,YAAA,GAAA,EAAT,GAAA;AAAmB,YAAA,EAAA,EAAnB,EAAA;AAA2B,YAAA,KAAA,EAAvC;AAAY,WAAA,C;;;aAEd,Q;sBACc,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAQ,YAAA,GAAA,EAAR,GAAA;AAAkB,YAAA,EAAA,EAAlB,EAAA;AAA0B,YAAA,KAAA,EAAtC;AAAY,WAAA,C;;;aAEd,S;sBACc,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA;AAAS,YAAA,GAAA,EAAT,GAAA;AAAmB,YAAA,EAAA,EAAnB,EAAA;AAA2B,YAAA,KAAA,EAAvC;AAAY,WAAA,C;;;aAEd,U;sBACc,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;AAAU,YAAA,GAAA,EAAV,GAAA;AAAoB,YAAA,EAAA,EAApB,EAAA;AAA4B,YAAA,KAAA,EAAxC;AAAY,WAAA,C;;;aAEd,Q;sBACc,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA;AAAQ,YAAA,EAAA,EAAR,EAAA;AAAgB,YAAA,MAAA,EAA5B;AAAY,WAAA,C;;;aAEd,Q;sBACc,KAAA,SAAA,CAAZ,GAAY,C;;;;sBAIA,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAO,YAAA,GAAA,EAAP,GAAA;AAAiB,YAAA,EAAA,EAAjB,EAAA;AAAyB,YAAA,KAAA,EAArC;AAAY,WAAA,C;;;;aAIhB,S;;;;6BAGO;UACDlC,SAAAA,GAAY,KAAlB,cAAkB,E;aACX,KAAA,CAAA,aAAA,C,KAAA,CAAA,QAAA,E,IAAA,E,SAAA,C;;;;CA/EU+B,CAAoBjG,SAApBiG,C","sourcesContent":["// Code source from here, thanks author\n// https://github.com/drawcall/Proton/blob/gh-pages/source/src/utils/Rand.js\nclass Rand {\n\n  constructor() {\n      this.list = [];\n  }\n\n  set(probability, target) {\n      this.list.push({\n          probability,\n          target,\n          a: 0,\n          b: 1\n      });\n\n      this.calculation();\n  }\n\n  calculation() {\n      let total = 0;\n      for (let i = 0; i < this.list.length; i++) {\n          total += this.list[i].probability;\n      }\n\n      for (let i = 0; i < this.list.length; i++) {\n          const obj = this.list[i];\n          const val = obj.probability / total;\n\n          obj.a = i === 0 ? 0 : this.list[i - 1].b;\n          obj.b = obj.a + val;\n      }\n  }\n\n  getResult() {\n      const val = Math.random();\n      for (let i = 0; i < this.list.length; i++) {\n          const obj = this.list[i];\n\n          if (val <= obj.b && val > obj.a) {\n              return obj.target;\n          }\n      }\n\n      return this.list[0].target;\n  }\n};\n\nexport default Rand;\n","import React from \"react\";\nimport RAFManager from \"raf-manager\";\n\nexport default class Canvas extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this._id = 0;\n    this.size = { width: 0, height: 0 };\n    this.canvasRef = React.createRef();\n  }\n\n  componentDidMount() {\n    setTimeout(() => {\n      this.initCanvas();\n      this.resize = this.resize.bind(this);\n      window.addEventListener(\"resize\", this.resize);\n    }, 100);\n\n    const canvas = this.canvasRef.current;\n    this.props.onCanvasDidMount && this.props.onCanvasDidMount(canvas);\n  }\n\n  initCanvas() {\n    const canvas = this.canvasRef.current;\n    if (this.props.globalCompositeOperation) {\n      const context = canvas.getContext(\"2d\");\n      context.globalCompositeOperation = this.props.globalCompositeOperation;\n    }\n\n    const { width, height } = this.setCanvasSize(canvas);\n    this.heartbeatDetectionCanvasSize(canvas);\n    this.props.onCanvasInited(canvas, width, height);\n  }\n\n  heartbeatDetectionCanvasSize(canvas) {\n    this._id = setInterval(() => {\n      if(this.canvasRef.current){\n        const newHeight = this.canvasRef.current.clientHeight;\n        if (newHeight !== this.size.height) {\n          const { width, height } = this.setCanvasSize(canvas);\n          this.props.onResize && this.props.onResize(width, height);\n        }\n      }\n    }, 1000 / 10);\n  }\n\n  componentWillUnmount() {\n    try{\n      window.removeEventListener(\"resize\", this.resize);\n      clearInterval(this._id);\n    }catch(e){\n      \n    }\n  }\n\n  resize() {\n    const canvas = this.canvasRef.current;\n    const { width, height } = this.setCanvasSize(canvas);\n    this.props.onResize && this.props.onResize(width, height);\n  }\n\n  setCanvasSize(canvas) {\n    const width = this.canvasRef.current.clientWidth;\n    const height = this.canvasRef.current.clientHeight;\n\n    this.size.width = width;\n    this.size.height = height;\n    canvas.width = width;\n    canvas.height = height;\n    return { width, height };\n  }\n\n  handleWaypointEnter() {\n    RAFManager.start();\n  }\n\n  handleWaypointLeave() {\n    RAFManager.stop();\n  }\n\n  getStyle() {\n    let style = { width: \"100%\", height: \"100%\" };\n\n    if (this.props.bg) {\n      style = Object.assign(style, {\n        position: \"absolute\",\n        zIndex: -1,\n        top: 0,\n        left: 0\n      });\n    }\n    return style;\n  }\n\n  handleMouseDown(e) {\n    this.props.onMouseDown && this.props.onMouseDown(e);\n  }\n  \n  render() {\n    return (\n      <canvas\n        ref={this.canvasRef}\n        onMouseDown={this.handleMouseDown.bind(this)}\n        style={this.getStyle()}\n      />\n    );\n  }\n}\n","\nfunction hexToRgb(hex) {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16)\n    } : {};\n}\n\nfunction getColor(color, a) {\n    let c;\n    if (color) {\n        c = hexToRgb(color);\n        return `rgba(${c.r},${c.g},${c.b}, ${a})`;\n    } else {\n        return null;\n    }\n}\n\n\nexport { hexToRgb, getColor };","import React from \"react\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\nimport Canvas from \"./Canvas.jsx\";\nimport { getColor } from \"../utils/Color\";\n\nexport default class Ball extends React.Component {\n  constructor(props) {\n    super(props);\n    this.renderProton = this.renderProton.bind(this);\n  }\n\n  onCanvasInited(canvas, width, height) {\n    this.createProton(canvas, width, height);\n    this.createMiniEmitter(canvas);\n    RAFManager.add(this.renderProton);\n  }\n\n  componentWillUnmount() {\n    try {\n      RAFManager.remove(this.renderProton);\n      this.proton.destroy();\n    } catch (e) { }\n  }\n\n  onResize() { }\n\n  createProton(canvas, width, height) {\n    const context = canvas.getContext(\"2d\");\n    this.proton = new Proton();\n\n    const emitter = new Proton.Emitter();\n    emitter.rate = new Proton.Rate(\n      this.props.num ? new Proton.Span(this.props.num) : new Proton.Span(4, 9),\n      new Proton.Span(0.8, 1.3)\n    );\n\n    emitter.addInitialize(new Proton.Mass(1));\n    emitter.addInitialize(new Proton.Radius(1, 50));\n    emitter.addInitialize(new Proton.Life(5, 6));\n    emitter.addInitialize(\n      new Proton.Velocity(\n        new Proton.Span(5, 8),\n        new Proton.Span(30, 70),\n        \"polar\"\n      )\n    );\n\n    emitter.addBehaviour(new Proton.Alpha(1, 0));\n    emitter.addBehaviour(\n      new Proton.Color([\"#36aaf3\", \"#fd769c\", \"#94ff22\", \"#ffa545\", \"#ffffff\"])\n    );\n    emitter.addBehaviour(new Proton.Scale(0.7, 1));\n    emitter.addBehaviour(new Proton.Gravity(3));\n    emitter.addBehaviour(new Proton.Collision(emitter));\n    emitter.addBehaviour(this.customDeadBehaviour(canvas));\n    emitter.addBehaviour(\n      new Proton.CrossZone(\n        new Proton.RectZone(0, 0, canvas.width, canvas.height),\n        \"bound\"\n      )\n    );\n\n    emitter.p.x = Math.min(500, Math.max(canvas.width / 2 - 400, 50));\n    emitter.p.y = canvas.height / 2 + 50;\n    emitter.emit();\n    this.proton.addEmitter(emitter);\n\n    const renderer = new Proton.CanvasRenderer(canvas);\n    renderer.onProtonUpdate =  ()=> {\n      context.fillStyle = getColor(this.props.color, 0.2) || \"rgba(255, 255, 255, 0.2)\";\n      context.fillRect(0, 0, canvas.width, canvas.height);\n    };\n    this.proton.addRenderer(renderer);\n  }\n\n  customDeadBehaviour(canvas) {\n    return {\n      initialize: function (particle) { },\n      applyBehaviour: particle => {\n        if (particle.p.y + particle.radius >= canvas.height) {\n          if (particle.radius > 9) {\n            this.miniEmitteing(particle);\n            particle.dead = true;\n          }\n        }\n      }\n    };\n  }\n\n  createMiniEmitter(canvas) {\n    const miniEmitter = new Proton.Emitter();\n    miniEmitter.rate = new Proton.Rate(\n      new Proton.Span(3, 6),\n      new Proton.Span(1, 2)\n    );\n\n    miniEmitter.addInitialize(new Proton.Mass(1));\n    miniEmitter.radiusInitialize = new Proton.Radius();\n    miniEmitter.addInitialize(miniEmitter.radiusInitialize);\n    miniEmitter.addInitialize(new Proton.Life(0.5, 1));\n    miniEmitter.addInitialize(\n      new Proton.V(\n        new Proton.Span(1.5, 3),\n        new Proton.Span(0, 70, true),\n        \"polar\"\n      )\n    );\n\n    miniEmitter.colorBehaviour = new Proton.Color(\"#ffffff\");\n    miniEmitter.addBehaviour(new Proton.Alpha(1, 0));\n    miniEmitter.addBehaviour(miniEmitter.colorBehaviour);\n    miniEmitter.addBehaviour(new Proton.Gravity(4));\n    miniEmitter.addBehaviour(new Proton.Collision(miniEmitter));\n    miniEmitter.addBehaviour(\n      new Proton.CrossZone(\n        new Proton.RectZone(0, 0, canvas.width, canvas.height),\n        \"bound\"\n      )\n    );\n    this.proton.addEmitter(miniEmitter);\n\n    this.miniEmitter = miniEmitter;\n  }\n\n  miniEmitteing(particle) {\n    const miniEmitter = this.miniEmitter;\n    miniEmitter.radiusInitialize.reset(\n      particle.radius * 0.05,\n      particle.radius * 0.2\n    );\n    miniEmitter.colorBehaviour.reset(particle.color);\n    miniEmitter.p.x = particle.p.x;\n    miniEmitter.p.y = particle.p.y;\n    miniEmitter.emit(\"once\");\n  }\n\n  renderProton() {\n    this.proton && this.proton.update();\n  }\n\n  render() {\n    return (\n      <Canvas bg={this.props.bg}\n        globalCompositeOperation=\"darker\"\n        onCanvasInited={this.onCanvasInited.bind(this)}\n        onResize={this.onResize.bind(this)}\n      />\n    );\n  }\n}\n","import React from \"react\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\nimport Canvas from \"./Canvas.jsx\";\n\nexport default class Color extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.colors = [\n      \"#529B88\",\n      \"#CDD180\",\n      \"#FFFA32\",\n      \"#FB6255\",\n      \"#FB4A53\",\n      \"#FF4E50\",\n      \"#F9D423\"\n    ];\n    this.renderProton = this.renderProton.bind(this);\n  }\n\n  componentWillUnmount() {\n    try {\n      RAFManager.remove(this.renderProton);\n      this.proton.destroy();\n    } catch (e) {}\n  }\n\n  onCanvasInited(canvas, width, height) {\n    this.createProton(canvas, width, height);\n    RAFManager.add(this.renderProton);\n  }\n\n  onResize() {}\n\n  createProton(canvas, width, height) {\n    this.proton = new Proton();\n    const emitter = new Proton.Emitter();\n    emitter.rate = new Proton.Rate(\n      this.props.num ? new Proton.Span(this.props.num) : new Proton.Span(5, 8),\n      new Proton.Span(0.1, 0.25)\n    );\n\n    emitter.addInitialize(new Proton.Mass(1));\n    emitter.addInitialize(new Proton.Radius(20, 200));\n    emitter.addInitialize(new Proton.Life(2, 4));\n    emitter.addInitialize(\n      new Proton.Position(new Proton.RectZone(0, 0, width, height))\n    );\n\n    emitter.addBehaviour(new Proton.Alpha(0, 1, Infinity, Proton.easeOutCubic));\n    emitter.addBehaviour(new Proton.Scale(1, 0, Infinity, Proton.easeOutCubic));\n    emitter.addBehaviour(new Proton.Color(this.colors, \"random\"));\n\n    emitter.emit();\n    this.proton.addEmitter(emitter);\n\n    const renderer = new Proton.CanvasRenderer(canvas);\n    this.proton.addRenderer(renderer);\n  }\n\n  renderProton() {\n    this.proton && this.proton.update();\n  }\n\n  render() {\n    return (\n      <Canvas bg={this.props.bg}\n        globalCompositeOperation=\"darker\"\n        onCanvasInited={this.onCanvasInited.bind(this)}\n        onResize={this.onResize.bind(this)}\n      />\n    );\n  }\n}\n","import React from \"react\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\nimport Canvas from \"./Canvas.jsx\";\n\nexport default class Color extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.colors = [\n            \"#529B88\",\n            \"#CDD180\",\n            \"#FFFA32\",\n            \"#FB6255\",\n            \"#FB4A53\",\n            \"#FF4E50\",\n            \"#F9D423\"\n        ];\n        this.renderProton = this.renderProton.bind(this);\n    }\n\n    componentWillUnmount() {\n        try {\n            RAFManager.remove(this.renderProton);\n            this.proton.destroy();\n        } catch (e) { }\n    }\n\n    onCanvasInited(canvas, width, height) {\n        this.createProton(canvas, width, height);\n        RAFManager.add(this.renderProton);\n    }\n\n    onResize(width, height) {\n        this.crossZoneBehaviour.zone.width = width;\n        this.crossZoneBehaviour.zone.height = height;\n        this.proton.renderers[0].resize(width, height);;\n    }\n\n    getProp(key, defaultVal) {\n        const config = this.props.config || {};\n        const val = config[key] || defaultVal;\n        if (Array.isArray(val)) {\n            return new Proton.Span(val[0], val[1]);\n        } else {\n            return val;\n        }\n    }\n\n    getArrProp(key, defaultVal) {\n        const config = this.props.config || {};\n        const val = config[key] || defaultVal;\n        if (!val) return null;\n\n        if (Array.isArray(val)) {\n            return val;\n        } else {\n            return [val, val];\n        }\n    }\n\n    createProton(canvas, width, height) {\n        const num = this.getProp(\"num\", [5, 8]);\n        const rps = this.getProp(\"rps\", [0.1, 0.2]);\n        const mass = this.getProp(\"mass\", 1);\n        const radius = this.getProp(\"radius\", [10, 30]);\n        const life = this.getProp(\"life\", [2, 3]);\n        const body = this.getProp(\"body\");\n        const position = this.getProp(\"position\");\n        const v = this.getProp(\"v\", [2, 3]);\n        const tha = this.getProp(\"tha\", [-15, 15]);\n        const alpha = this.getArrProp(\"alpha\");\n        const scale = this.getArrProp(\"scale\");\n        const color = this.getArrProp(\"color\");\n        const cross = this.getProp(\"cross\", \"dead\");\n        const random = this.getProp(\"random\");\n        const rotate = this.getArrProp(\"rotate\");\n        const g = this.getProp(\"g\");\n        const f = this.getArrProp(\"f\");\n        const emitterV = this.getProp(\"emitter\");\n\n        this.proton = new Proton();\n        let emitter;\n        if (emitterV === \"follow\") {\n            emitter = new Proton.FollowEmitter();\n        } else {\n            emitter = new Proton.Emitter();\n        }\n        emitter.rate = new Proton.Rate(num, rps);\n\n        emitter.addInitialize(new Proton.Mass(mass));\n        emitter.addInitialize(new Proton.Radius(radius));\n        emitter.addInitialize(new Proton.Life(life));\n        emitter.addInitialize(new Proton.Velocity(v, tha, \"polar\"));\n        if (body) emitter.addInitialize(new Proton.Body(body));\n\n        let pos;\n        if (position === \"all\" || position === \"screen\") {\n            pos = new Proton.Position(new Proton.RectZone(0, 0, canvas.width, canvas.height))\n        } else if (typeof position === \"object\") {\n            pos = new Proton.Position(new Proton.RectZone(position.x, position.y, position.width, position.height))\n        } else {\n            emitter.p.x = canvas.width / 2;\n            emitter.p.y = canvas.height / 2;\n        }\n\n        emitter.addInitialize(pos);\n\n        /// behaviour\n        const alphaB = alpha ? new Proton.Alpha(alpha[0], alpha[1]) : new Proton.Alpha(0, 1);\n        const scaleB = scale ? new Proton.Scale(scale[0], scale[1]) : new Proton.Scale(1, 0.2);\n        const colorB = color ? new Proton.Color(color[0], color[1]) : new Proton.Color(this.colors);\n\n        emitter.addBehaviour(alphaB);\n        emitter.addBehaviour(scaleB);\n        if(!body) emitter.addBehaviour(colorB);\n\n        if(rotate){\n            if(rotate[0]===true||rotate[0]===\"rotate\"){\n                emitter.addBehaviour(new Proton.Rotate());\n            }else{\n                emitter.addBehaviour(new Proton.Rotate(rotate[0], rotate[1]));\n            }\n        }\n\n        const zone = new Proton.RectZone(0, 0, canvas.width, canvas.height)\n        const crossZoneBehaviour = new Proton.CrossZone(zone, cross);\n        emitter.addBehaviour(crossZoneBehaviour);\n\n        random && emitter.addBehaviour(new Proton.RandomDrift(random, random, 0.05));\n        g && emitter.addBehaviour(new Proton.G(g));\n        f && emitter.addBehaviour(new Proton.F(f[0], f[1]));\n\n        emitter.emit();\n        this.proton.addEmitter(emitter);\n\n        const renderer = this.createRenderer(canvas);\n        this.proton.addRenderer(renderer);\n\n        this.emitter = emitter;\n        this.crossZoneBehaviour = crossZoneBehaviour;\n    }\n\n    createRenderer(canvas) {\n        const width = canvas.width;\n        const height = canvas.height;\n        const context = canvas.getContext(\"2d\");\n        const renderer = new Proton.CanvasRenderer(canvas);\n\n        const onUpdate = this.getProp(\"onUpdate\");\n        if (onUpdate) {\n            renderer.onProtonUpdate = () => {\n                onUpdate(context, width, height);\n            };\n        }\n\n        const onParticleCreated = this.getProp(\"onParticleCreated\");\n        if (onParticleCreated) {\n            renderer.onParticleCreated = (particle) => {\n                onParticleCreated(context, particle);\n            };\n        }\n\n        const onParticleUpdate = this.getProp(\"onParticleUpdate\");\n        if (onParticleUpdate) {\n            renderer.onParticleUpdate = (particle) => {\n                onParticleUpdate(context, particle);\n            };\n        }\n\n        return renderer;\n    }\n\n    renderProton() {\n        this.proton && this.proton.update();\n    }\n\n    handleMouseDown(e) {\n        const onMouseDown = this.getProp(\"onMouseDown\");\n        if (onMouseDown) {\n            onMouseDown(e);\n        }\n    }\n\n    render() {\n        const globalCompositeOperation = this.props.globalCompositeOperation || this.props.operation || \"source-over\";\n\n        return (\n            <Canvas\n                bg={this.props.bg}\n                onMouseDown={this.handleMouseDown.bind(this)}\n                globalCompositeOperation={globalCompositeOperation}\n                onCanvasInited={this.onCanvasInited.bind(this)}\n                onResize={this.onResize.bind(this)}\n            />\n        );\n    }\n}\n","import React from \"react\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\nimport Canvas from \"./Canvas.jsx\";\nimport { getColor } from \"../utils/Color\";\n\nexport default class Lines extends React.Component {\n  constructor(props) {\n    super(props);\n    this.renderProton = this.renderProton.bind(this);\n  }\n\n  onCanvasDidMount(canvas){\n    if(this.props.color){\n      canvas.style.backgroundColor = this.props.color;\n    }\n  }\n\n  componentWillUnmount() {\n    try {\n      RAFManager.remove(this.renderProton);\n      this.proton.destroy();\n    } catch (e) { }\n  }\n\n  onCanvasInited(canvas, width, height) {\n    this.createProton(canvas, width, height);\n    RAFManager.add(this.renderProton);\n  }\n\n  onResize(width, height) {\n    this.crossZoneBehaviour.zone.width = width;\n    this.crossZoneBehaviour.zone.height = height;\n    this.proton.renderers[0].resize(width, height);\n  }\n\n  createProton(canvas, width, height) {\n    this.proton = new Proton();\n\n    const emitter = new Proton.Emitter();\n    emitter.damping = 0.008;\n    emitter.rate = new Proton.Rate(this.props.num ? this.props.num : 250);\n    emitter.addInitialize(new Proton.Mass(1));\n    emitter.addInitialize(new Proton.Radius(4));\n    emitter.addInitialize(\n      new Proton.Velocity(\n        new Proton.Span(1.5),\n        new Proton.Span(0, 360),\n        \"polar\"\n      )\n    );\n    const mouseObj = {\n      x: width / 2,\n      y: height / 2\n    };\n\n    const attractionBehaviour = new Proton.Attraction(mouseObj, 0, 0);\n    const crossZoneBehaviour = new Proton.CrossZone(\n      new Proton.RectZone(0, 0, canvas.width, canvas.height),\n      \"cross\"\n    );\n    emitter.addBehaviour(new Proton.Color(\"random\"));\n    emitter.addBehaviour(attractionBehaviour, crossZoneBehaviour);\n    emitter.addBehaviour(new Proton.RandomDrift(10, 10, 0.05));\n    emitter.p.x = canvas.width / 2;\n    emitter.p.y = canvas.height / 2;\n    emitter.emit(\"once\");\n\n    this.proton.addEmitter(emitter);\n    this.proton.addRenderer(this.createRenderer(canvas));\n    this.crossZoneBehaviour = crossZoneBehaviour;\n  }\n\n  createRenderer(canvas) {\n    const context = canvas.getContext(\"2d\");\n    const renderer = new Proton.CanvasRenderer(canvas);\n    renderer.onProtonUpdate = () => {\n      context.fillStyle = getColor(this.props.color, 0.02) || \"rgba(0, 0, 0, 0.02)\";\n      context.fillRect(0, 0, canvas.width, canvas.height);\n    };\n\n    renderer.onParticleUpdate = function (particle) {\n      context.beginPath();\n      context.strokeStyle = particle.color;\n      context.lineWidth = 1;\n      context.moveTo(particle.old.p.x, particle.old.p.y);\n      context.lineTo(particle.p.x, particle.p.y);\n      context.closePath();\n      context.stroke();\n    };\n\n    return renderer;\n  }\n\n  renderProton() {\n    this.proton && this.proton.update();\n  }\n\n  render() {\n    return (\n      <Canvas bg={this.props.bg}\n        globalCompositeOperation=\"darker\"\n        onCanvasDidMount={this.onCanvasDidMount.bind(this)}\n        onCanvasInited={this.onCanvasInited.bind(this)}\n        onResize={this.onResize.bind(this)}\n      />\n    );\n  }\n}\n","import React from \"react\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\nimport Canvas from \"./Canvas.jsx\";\nimport { getColor } from \"../utils/Color\";\n\nexport default class Thick extends React.Component {\n  constructor(props) {\n    super(props);\n    this.hue = 0;\n    this.index = 0;\n    this.colorTemplate = `hsla(hue,80%,50%, 0.75)`;\n    this.renderProton = this.renderProton.bind(this);\n  }\n\n  onCanvasDidMount(canvas){\n    if(this.props.color){\n      canvas.style.backgroundColor = this.props.color;\n    }\n  }\n\n  onCanvasInited(canvas, width, height) {\n    this.canvas = canvas;\n    this.createProton(canvas, width, height);\n    RAFManager.add(this.renderProton);\n  }\n\n  onResize(width, height) {\n    this.crossZoneBehaviour.zone.width = width;\n    this.crossZoneBehaviour.zone.height = height;\n    this.proton.renderers[0].resize(width, height);\n  }\n\n  createProton(canvas, width, height) {\n    this.proton = new Proton();\n\n    const emitter = new Proton.Emitter();\n    emitter.damping = 0.008;\n    emitter.rate = new Proton.Rate(this.props.num ? this.props.num : 150);\n\n    // Initialize\n    emitter.addInitialize(new Proton.Mass(1));\n    emitter.addInitialize(new Proton.Radius(8));\n    emitter.addInitialize(\n      new Proton.V(new Proton.Span(0.1, 0.5), new Proton.Span(0, 360), \"polar\")\n    );\n    emitter.addInitialize(\n      new Proton.Position(\n        new Proton.CircleZone(canvas.width / 2, canvas.height / 2, 100)\n      )\n    );\n\n    // Behaviour\n    const crossZoneBehaviour = new Proton.CrossZone(\n      new Proton.RectZone(0, 0, canvas.width, canvas.height),\n      \"cross\"\n    );\n    emitter.addBehaviour(crossZoneBehaviour);\n    this.repulsion = new Proton.Repulsion(\n      {\n        x: canvas.width / 2,\n        y: canvas.height / 2 - 100\n      },\n      3,\n      300\n    );\n\n    this.attraction = new Proton.Attraction(\n      {\n        x: canvas.width / 2,\n        y: canvas.height / 2\n      },\n      3,\n      200\n    );\n    emitter.addBehaviour(this.attraction, this.repulsion);\n    emitter.addBehaviour(new Proton.Color(\"random\"));\n    emitter.addBehaviour(new Proton.RandomDrift(20, 15, 0.15));\n\n    emitter.emit(\"once\");\n    this.proton.addEmitter(emitter);\n    this.proton.addRenderer(this.createRenderer(canvas));\n    this.crossZoneBehaviour = crossZoneBehaviour;\n  }\n\n  createRenderer(canvas) {\n    const context = canvas.getContext(\"2d\");\n    const renderer = new Proton.CanvasRenderer(canvas);\n\n    renderer.onProtonUpdate = () => {\n      this.hue += 1;\n      context.fillStyle = getColor(this.props.color, 0.02) || \"rgba(0, 0, 0, 0.02)\";\n      context.fillRect(0, 0, canvas.width, canvas.height);\n    };\n\n    renderer.onParticleCreated = particle => {\n      particle.data.begin = Proton.MathUtil.randomAToB(1, 120);\n      particle.data.tha = Proton.MathUtil.randomAToB(0, Math.PI * 2);\n    };\n\n    renderer.onParticleUpdate = particle => {\n      const hue = particle.data.begin + this.hue;\n      particle.color = this.colorTemplate.replace(\"hue\", hue % 360);\n\n      const ratio = 3 / 4;\n      const radius =\n        particle.radius * (1 - ratio) * Math.cos((particle.data.tha += 0.01)) +\n        particle.radius * ratio;\n\n      context.beginPath();\n      context.fillStyle = particle.color;\n      context.arc(particle.p.x, particle.p.y, radius, 0, Math.PI * 2, true);\n      context.closePath();\n      context.fill();\n    };\n\n    return renderer;\n  }\n\n  componentWillUnmount() {\n    try {\n      RAFManager.remove(this.renderProton);\n      this.proton.destroy();\n    } catch (e) {}\n  }\n\n  renderProton() {\n    const canvas = this.canvas;\n    this.proton.update();\n    if (this.index % 200 === 0) {\n      this.attraction.targetPosition.x = Math.random() * canvas.width;\n      this.attraction.targetPosition.y = Math.random() * canvas.height;\n\n      this.repulsion.targetPosition.x = Math.random() * canvas.width;\n      this.repulsion.targetPosition.y = Math.random() * canvas.height;\n    }\n\n    this.index++;\n  }\n\n  render() {\n    return (\n      <Canvas bg={this.props.bg}\n        onCanvasDidMount={this.onCanvasDidMount.bind(this)}\n        onCanvasInited={this.onCanvasInited.bind(this)}\n        onResize={this.onResize.bind(this)}\n      />\n    );\n  }\n}\n","import React from \"react\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\nimport Canvas from \"./Canvas.jsx\";\n\nexport default class Square extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.colors = [\n      \"#fad390\",\n      \"#81ecec\",\n      \"#ffffff\",\n      \"#badc58\",\n      \"#f9ca24\",\n      \"#FEA47F\"\n    ];\n    this.renderProton = this.renderProton.bind(this);\n  }\n\n  componentWillUnmount() {\n    try {\n      RAFManager.remove(this.renderProton);\n      this.proton.destroy();\n    } catch (e) {}\n  }\n\n  onCanvasDidMount(canvas) {\n    \n  }\n\n  onCanvasInited(canvas, width, height) {\n    this.createProton(canvas, width, height);\n    RAFManager.add(this.renderProton);\n  }\n\n  onResize(width, height) {\n    const dis = 150;\n    this.crossZoneBehaviour.zone.width = width + 2 * dis;\n    this.crossZoneBehaviour.zone.height = height + 2 * dis;\n    this.proton.renderers[0].resize(width, height);\n  }\n\n  createProton(canvas, width, height) {\n    this.proton = new Proton();\n    const emitter = new Proton.Emitter();\n    emitter.rate = new Proton.Rate(this.props.num ? this.props.num : 50);\n    emitter.damping = 0;\n\n    emitter.addInitialize(new Proton.Mass(1));\n    emitter.addInitialize(new Proton.Radius(4, 70));\n    emitter.addInitialize(\n      new Proton.Velocity(new Proton.Span(2, 10), new Proton.Span(0), \"polar\")\n    );\n    emitter.addInitialize(\n      new Proton.Position(\n        new Proton.LineZone(0, canvas.height, canvas.width, canvas.height)\n      )\n    );\n\n    const dis = 150;\n    const crossZoneBehaviour = new Proton.CrossZone(\n      new Proton.RectZone(\n        0 - dis,\n        0 - dis,\n        canvas.width + 2 * dis,\n        canvas.height + 2 * dis\n      ),\n      \"cross\"\n    );\n    emitter.addBehaviour(crossZoneBehaviour);\n    emitter.addBehaviour(new Proton.Alpha(Proton.getSpan(0.1, 0.55)));\n    emitter.addBehaviour(new Proton.Color(this.colors));\n\n    emitter.emit(\"once\");\n    this.proton.addEmitter(emitter);\n    const renderer = this.createRenderer(canvas);\n    this.proton.addRenderer(renderer);\n\n    this.crossZoneBehaviour = crossZoneBehaviour;\n    emitter.preEmit(2);\n  }\n\n  createRenderer(canvas) {\n    const context = canvas.getContext(\"2d\");\n    const renderer = new Proton.CustomRenderer();\n\n    renderer.onProtonUpdate = () => {\n      context.clearRect(0, 0, canvas.width, canvas.height);\n    };\n\n    renderer.onParticleCreated = particle => {\n      const w = particle.radius || 60;\n      const h = Proton.MathUtil.randomAToB(100, 200, \"int\");\n      particle.data.w = w;\n      particle.data.h = h;\n    };\n\n    renderer.onParticleUpdate = particle => {\n      const w = particle.data.w;\n      const h = particle.data.h;\n      context.save();\n      context.globalAlpha = particle.alpha;\n      context.fillStyle = particle.color;\n\n      context.translate(particle.p.x, particle.p.y);\n      context.rotate(Proton.MathUtil.degreeTransform(particle.rotation));\n      context.translate(-particle.p.x, -particle.p.y);\n\n      context.beginPath();\n      context.rect(particle.p.x - w / 2, particle.p.y - h / 2, w, h);\n\n      context.closePath();\n      context.fill();\n      context.globalAlpha = 1;\n      context.restore();\n    };\n\n    return renderer;\n  }\n\n  renderProton() {\n    this.proton && this.proton.update();\n  }\n\n  render() {\n    return (\n      <Canvas bg={this.props.bg}\n        globalCompositeOperation=\"lighter\"\n        onCanvasDidMount={this.onCanvasDidMount.bind(this)}\n        onCanvasInited={this.onCanvasInited.bind(this)}\n        onResize={this.onResize.bind(this)}\n      />\n    );\n  }\n}\n","import React from \"react\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\nimport Canvas from \"./Canvas.jsx\";\nimport { getColor } from \"../utils/Color\";\n\nexport default class Cobweb extends React.Component {\n  constructor(props) {\n    super(props);\n    this.renderProton = this.renderProton.bind(this);\n  }\n\n  onCanvasInited(canvas, width, height) {\n    this.createProton(canvas, width, height);\n    RAFManager.add(this.renderProton);\n  }\n\n  componentWillUnmount() {\n    try {\n      RAFManager.remove(this.renderProton);\n      this.proton.destroy();\n    } catch (e) {}\n  }\n\n  onResize(width, height) {\n    this.crossZoneBehaviour.zone.width = width;\n    this.crossZoneBehaviour.zone.height = height;\n    this.proton.renderers[0].resize(width, height);\n  }\n\n  createProton(canvas, width, height) {\n    this.proton = new Proton();\n\n    const emitter = new Proton.Emitter();\n    emitter.rate = new Proton.Rate(\n      this.props.num ? new Proton.Span(this.props.num) : new Proton.Span(100),\n      new Proton.Span(0.05, 0.2)\n    );\n\n    emitter.addInitialize(new Proton.Mass(1));\n    emitter.addInitialize(new Proton.Radius(1, 4));\n    emitter.addInitialize(new Proton.Life(Infinity));\n\n    const pointZone = new Proton.Position(\n      new Proton.RectZone(0, 0, width, height)\n    );\n    emitter.addInitialize(pointZone);\n    emitter.addInitialize(\n      new Proton.Velocity(\n        new Proton.Span(0.3, 0.6),\n        new Proton.Span(0, 360),\n        \"polar\"\n      )\n    );\n\n    emitter.addBehaviour(new Proton.Alpha(Proton.getSpan(0.2, 0.9)));\n    emitter.addBehaviour(new Proton.Color(this.props.color || \"#333\"));\n    this.crossZoneBehaviour = new Proton.CrossZone(\n      new Proton.RectZone(0, 0, width, height),\n      \"cross\"\n    );\n    emitter.addBehaviour(this.crossZoneBehaviour);\n\n    emitter.emit(\"once\");\n    emitter.damping = 0;\n    this.proton.addEmitter(emitter);\n    this.proton.addRenderer(this.createRenderer(canvas, emitter));\n  }\n\n  createRenderer(canvas, emitter) {\n    const context = canvas.getContext(\"2d\");\n    const renderer = new Proton.CanvasRenderer(canvas);\n    const R = 140;\n\n    renderer.onProtonUpdateAfter = ()=> {\n      let particles = emitter.particles;\n\n      for (let i = 0; i < particles.length; i++) {\n        for (let j = i + 1; j < particles.length; j++) {\n          let pA = particles[i];\n          let pB = particles[j];\n          let dis = pA.p.distanceTo(pB.p);\n\n          if (dis < R) {\n            let alpha = (1 - dis / R) * 0.5;\n            context.strokeStyle = getColor(this.props.color, alpha) || `rgba(3, 3, 3, ${alpha})`;\n            context.beginPath();\n            context.moveTo(pA.p.x, pA.p.y);\n            context.lineTo(pB.p.x, pB.p.y);\n            context.closePath();\n            context.stroke();\n          }\n        }\n      }\n    };\n\n    return renderer;\n  }\n\n  renderProton() {\n    this.proton && this.proton.update();\n  }\n\n  render() {\n    return (\n      <Canvas bg={this.props.bg}\n        globalCompositeOperation=\"darker\"\n        onCanvasInited={this.onCanvasInited.bind(this)}\n        onResize={this.onResize.bind(this)}\n      />\n    );\n  }\n}\n","import React from \"react\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\nimport Canvas from \"./Canvas.jsx\";\n\nexport default class Circle extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.colors = [\n      \"#74b9ff\",\n      \"#e84393\",\n      \"#6c5ce7\",\n      \"#00b894\",\n      \"#fdcb6e\",\n      \"#006266\",\n      \"#1B1464\"\n    ];\n\n    this.renderProton = this.renderProton.bind(this);\n  }\n\n  componentWillUnmount() {\n    try {\n      RAFManager.remove(this.renderProton);\n      this.proton.destroy();\n    } catch (e) { }\n  }\n\n  onCanvasInited(canvas, width, height) {\n    this.createProton(canvas, width, height);\n    RAFManager.add(this.renderProton);\n  }\n\n  onResize(width, height) {\n    this.crossZoneBehaviour.zone.width = width;\n    this.crossZoneBehaviour.zone.height = height;\n    this.proton.renderers[0].resize(width, height);\n  }\n\n  createProton(canvas, width, height) {\n    this.proton = new Proton();\n\n    const emitter = new Proton.Emitter();\n    emitter.rate = new Proton.Rate(this.props.num || 20);\n    emitter.damping = 0.008;\n\n    emitter.addInitialize(new Proton.Mass(1));\n    emitter.addInitialize(new Proton.Radius(30, 600));\n    emitter.addInitialize(\n      new Proton.Velocity(\n        new Proton.Span(0.5),\n        new Proton.Span(0, 360),\n        \"polar\"\n      )\n    );\n    emitter.addInitialize(\n      new Proton.Position(\n        new Proton.RectZone(0, 0, canvas.width, canvas.height)\n      )\n    );\n\n    const crossZoneBehaviour = new Proton.CrossZone(\n      new Proton.RectZone(0, 0, canvas.width, canvas.height),\n      \"cross\"\n    );\n    emitter.addBehaviour(crossZoneBehaviour);\n    emitter.addBehaviour(new Proton.Alpha(Proton.getSpan(0.35, 0.55)));\n    emitter.addBehaviour(new Proton.Color(this.getColor()));\n    emitter.addBehaviour(new Proton.RandomDrift(50, 50, 0.5));\n\n    emitter.emit(\"once\");\n    this.proton.addEmitter(emitter);\n\n    const renderer = new Proton.CanvasRenderer(canvas);\n    this.proton.addRenderer(renderer);\n\n    this.crossZoneBehaviour = crossZoneBehaviour;\n  }\n\n  getColor() {\n    let c = this.colors;\n    if (this.props.color) {\n      if(Array.isArray(this.props.color)){\n        c = this.props.color;\n      }else{\n        c = [this.props.color];\n      }\n    }\n\n    return c;\n  }\n\n  renderProton() {\n    this.proton && this.proton.update();\n  }\n\n  render() {\n    return (\n      <Canvas bg={this.props.bg}\n        globalCompositeOperation=\"darken\"\n        onCanvasInited={this.onCanvasInited.bind(this)}\n        onResize={this.onResize.bind(this)}\n      />\n    );\n  }\n}\n","import React from \"react\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\nimport Canvas from \"./Canvas.jsx\";\n\nexport default class Tadpole extends React.Component {\n  constructor(props) {\n    super(props);\n    this.renderProton = this.renderProton.bind(this);\n  }\n\n  onCanvasDidMount(canvas) {\n\n  }\n\n  onCanvasInited(canvas, width, height) {\n    this.createProton(canvas, width, height);\n    this.renderProton();\n  }\n\n  onResize(width, height) {\n    this.crossZoneBehaviour.zone.width = width;\n    this.crossZoneBehaviour.zone.height = height;\n    this.proton.renderers[0].resize(width, height);\n  }\n\n  createProton(canvas, width, height) {\n    this.proton = new Proton();\n\n    const emitter = new Proton.Emitter();\n    emitter.damping = 0.008;\n    emitter.rate = new Proton.Rate(this.props.num ? this.props.num : 50);\n    emitter.addInitialize(new Proton.Mass(1));\n    emitter.addInitialize(new Proton.Radius(5, 9));\n    emitter.addInitialize(\n      new Proton.Velocity(\n        new Proton.Span(1.5),\n        new Proton.Span(0, 360),\n        \"polar\"\n      )\n    );\n    emitter.addInitialize(\n      new Proton.Position(new Proton.RectZone(0, 0, width, height))\n    );\n\n    const mouseInfo = {\n      x: width / 2,\n      y: height / 2\n    };\n\n    const attractionBehaviour = new Proton.Attraction(mouseInfo, 0, 0);\n    const crossZoneBehaviour = new Proton.CrossZone(\n      new Proton.RectZone(0, 0, canvas.width, canvas.height),\n      \"bound\"\n    );\n    emitter.addBehaviour(new Proton.Color(this.props.color || \"#bbb\"));\n    //emitter.addBehaviour(new Proton.Alpha(new Proton.Span(0.5, 1)));\n    emitter.addBehaviour(attractionBehaviour, crossZoneBehaviour);\n    emitter.addBehaviour(new Proton.RandomDrift(15, 15, 0.05));\n    emitter.emit(\"once\");\n\n    this.proton.addEmitter(emitter);\n    this.proton.addRenderer(this.createRenderer(canvas));\n    this.crossZoneBehaviour = crossZoneBehaviour;\n  }\n\n  createRenderer(canvas) {\n    const jointCount = 10;\n    const delayTime = 8;\n    const context = canvas.getContext(\"2d\");\n    const renderer = new Proton.CanvasRenderer(canvas);\n\n    renderer.onProtonUpdate = function () {\n      context.clearRect(0, 0, canvas.width, canvas.height);\n    };\n\n    renderer.onParticleCreated = particle => {\n      particle.data.points = [];\n      particle.data.index = 0;\n    };\n\n    renderer.onParticleUpdate = function (particle) {\n      drawTadpoleTail(particle);\n      if (particle.data.index % delayTime === 0) fillPointsData(particle);\n      drawTadpoleHead(particle);\n      particle.data.index++;\n    };\n\n    const fillPointsData = particle => {\n      particle.data.points.unshift(particle.p.y);\n      particle.data.points.unshift(particle.p.x);\n\n      if (particle.data.points.length > jointCount) {\n        particle.data.points.pop();\n        particle.data.points.pop();\n      }\n    };\n\n    const drawTadpoleHead = particle => {\n      context.fillStyle = particle.color;\n      context.beginPath();\n      context.arc(\n        particle.p.x,\n        particle.p.y,\n        particle.radius,\n        0,\n        Math.PI * 2,\n        true\n      );\n      context.closePath();\n      context.fill();\n    };\n\n    const drawTadpoleTail = particle => {\n      context.beginPath();\n      context.strokeStyle = particle.color;\n\n      context.moveTo(particle.p.x, particle.p.y);\n\n      const l = particle.data.points.length;\n      for (let i = 0; i < l; i += 2) {\n        const x = particle.data.points[i];\n        const y = particle.data.points[i + 1];\n\n        context.lineWidth = linearEvaluation(i, l);\n        context.lineTo(x, y);\n        context.stroke();\n      }\n    };\n\n    const linearEvaluation = (i, l) => {\n      if (l <= 2) return 1;\n\n      const max = 6;\n      const A = (max - 1) / (2 / l - 1);\n      const B = 1 - A;\n      const X = (i + 2) / l;\n      let val = A * X + B;\n      val = val >> 0;\n\n      return val;\n    };\n\n    return renderer;\n  }\n\n  renderProton() {\n    RAFManager.add(() => {\n      this.proton.update();\n      //this.proton.stats.update();\n    });\n  }\n\n  render() {\n    return (\n      <Canvas bg={this.props.bg}\n        globalCompositeOperation=\"darker\"\n        onCanvasDidMount={this.onCanvasDidMount.bind(this)}\n        onCanvasInited={this.onCanvasInited.bind(this)}\n        onResize={this.onResize.bind(this)}\n      />\n    );\n  }\n}\n","import React from \"react\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\nimport Canvas from \"./Canvas.jsx\";\n\nconst COLOR = [\n  \"#f6b93b\",\n  \"#18dcff\",\n  \"#cd84f1\",\n  \"#ED4C67\",\n  \"#ffffff\",\n  \"#b71540\",\n  \"#32ff7e\",\n  \"#ff3838\"\n];\n\nexport default class Polygon extends React.Component {\n  constructor(props) {\n    super(props);\n    this.renderProton = this.renderProton.bind(this);\n  }\n\n  onCanvasInited(canvas, width, height) {\n    this.createProton(canvas);\n    this.createEmitter({\n      canvas,\n      x: width / 2,\n      y: height / 2,\n      mainEmitter: true,\n      zone: \"bound\"\n    });\n\n    RAFManager.add(this.renderProton);\n  }\n\n  componentWillUnmount() {\n    try {\n      RAFManager.remove(this.renderProton);\n      this.proton.destroy();\n    } catch (e) {}\n  }\n\n  onResize() {}\n\n  createProton(canvas) {\n    this.proton = new Proton();\n    const renderer = this.createRenderer(canvas);\n    this.proton.addRenderer(renderer);\n  }\n\n  createRenderer(canvas) {\n    const context = canvas.getContext(\"2d\");\n    const renderer = new Proton.CustomRenderer();\n\n    renderer.onProtonUpdate = () => {\n      context.clearRect(0, 0, canvas.width, canvas.height);\n    };\n\n    renderer.onParticleCreated = particle => {\n      particle.data.count = Proton.MathUtil.randomAToB(3, 10, true);\n    };\n\n    renderer.onParticleUpdate = particle => {\n      context.save();\n      context.globalAlpha = particle.alpha;\n      context.fillStyle = particle.color;\n\n      context.translate(particle.p.x, particle.p.y);\n      context.rotate(Proton.MathUtil.degreeTransform(particle.rotation));\n      context.translate(-particle.p.x, -particle.p.y);\n\n      context.beginPath();\n      drawPolygon(particle, particle.data.count);\n\n      context.closePath();\n      context.fill();\n      context.globalAlpha = 1;\n      context.restore();\n    };\n\n    renderer.onParticleDead = particle => {};\n\n    const drawPolygon = (particle, count) => {\n      if (count >= 7) {\n        context.arc(\n          particle.p.x,\n          particle.p.y,\n          particle.radius,\n          0,\n          Math.PI * 2,\n          true\n        );\n      } else {\n        const radius = particle.radius;\n\n        for (let i = 0; i <= count; i++) {\n          let x =\n            particle.p.x +\n            radius * Math.cos((((Math.PI / 180) * 360) / count) * i);\n          let y =\n            particle.p.y +\n            radius * Math.sin((((Math.PI / 180) * 360) / count) * i);\n\n          if (i === 0) context.moveTo(x, y);\n          else context.lineTo(x, y);\n        }\n      }\n    };\n\n    return renderer;\n  }\n\n  createEmitter({\n    mainEmitter,\n    canvas,\n    x,\n    y,\n    radius,\n    color = COLOR,\n    zone = \"dead\",\n    once = \"all\",\n    alpha = 0.85,\n    gravity = 3.5\n  }) {\n    const emitter = this.proton.pool.get(Proton.Emitter);\n\n    if (!emitter.completed) {\n      emitter.rate = new Proton.Rate(\n        this.props.num ? new Proton.Span(this.props.num) : new Proton.Span(4, 9),\n        new Proton.Span(1.6, 2.2)\n      );\n\n      const radiusInit = mainEmitter\n        ? new Proton.Radius(10, 110)\n        : new Proton.Radius(3, radius);\n      emitter.addInitialize(new Proton.Mass(1));\n      emitter.addInitialize(radiusInit);\n      emitter.addInitialize(new Proton.Life(3, 6));\n      emitter.addInitialize(\n        new Proton.Velocity(\n          new Proton.Span(4, 6),\n          new Proton.Span(-90, 90),\n          \"polar\"\n        )\n      );\n\n      emitter.addBehaviour(new Proton.Alpha(alpha, 0.2));\n      emitter.addBehaviour(new Proton.Color(color));\n      emitter.addBehaviour(new Proton.Scale(1, 0.3));\n      emitter.addBehaviour(new Proton.Rotate());\n      emitter.addBehaviour(new Proton.Gravity(gravity));\n\n      emitter.addBehaviour(this.customDeadBehaviour(canvas));\n      emitter.addBehaviour(\n        new Proton.CrossZone(\n          new Proton.RectZone(0, 0, canvas.width, canvas.height),\n          zone\n        )\n      );\n    }\n\n    emitter.p.x = x;\n    emitter.p.y = y;\n    if (once === \"once\") emitter.emit(\"once\");\n    else emitter.emit();\n\n    this.proton.addEmitter(emitter);\n    //this.expireEmitter(emitter);\n  }\n\n  expireEmitter(emitter) {\n    setTimeout(() => {\n      emitter.completed = true;\n      this.proton.pool.expire(emitter);\n      this.proton.removeEmitter(emitter);\n    }, 500);\n  }\n\n  customDeadBehaviour(canvas) {\n    return {\n      initialize: particle => {\n        particle.data = particle.data || {};\n        particle.data.oldRadius = particle.radius;\n        particle.data.emitterCount = 0;\n      },\n      applyBehaviour: particle => {\n        if (particle.radius < 5) return;\n        if (particle.data.emitterCount >= 2) return;\n\n        if (particle.radius <= (1 / 3) * particle.data.oldRadius) {\n          particle.data.emitterCount++;\n          this.createEmitter({\n            canvas,\n            x: particle.p.x,\n            y: particle.p.y,\n            radius: particle.radius * (1 / 2),\n            alpha: 0.5,\n            gravity: 5,\n            color: particle.color,\n            once: \"once\"\n          });\n        }\n      }\n    };\n  }\n\n  renderProton() {\n    this.proton && this.proton.update();\n  }\n\n  render() {\n    return (\n      <Canvas bg={this.props.bg}\n        globalCompositeOperation=\"darker\"\n        onCanvasInited={this.onCanvasInited.bind(this)}\n        onResize={this.onResize.bind(this)}\n      />\n    );\n  }\n}\n","import React from \"react\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\nimport Canvas from \"./Canvas.jsx\";\n\nexport default class Fountain extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.colors = [\n      \"#529B88\",\n      \"#CDD180\",\n      \"#FFFA32\",\n      \"#FB6255\",\n      \"#FB4A53\",\n      \"#FF4E50\",\n      \"#F9D423\"\n    ];\n    this.renderProton = this.renderProton.bind(this);\n  }\n\n  componentWillUnmount() {\n    try {\n      RAFManager.remove(this.renderProton);\n      this.proton.destroy();\n    } catch (e) {}\n  }\n\n  onCanvasInited(canvas, width, height) {\n    this.createProton(canvas, width, height);\n    RAFManager.add(this.renderProton);\n  }\n\n  onResize() {}\n\n  createProton(canvas, width, height) {\n    this.proton = new Proton();\n    const emitter = new Proton.Emitter();\n    emitter.rate = new Proton.Rate(\n      this.props.num ? new Proton.Span(this.props.num) : new Proton.Span(4, 8),\n      new Proton.Span(0.1, 0.25)\n    );\n\n    emitter.addInitialize(new Proton.Mass(1));\n    emitter.addInitialize(new Proton.Radius(20, 200));\n    emitter.addInitialize(new Proton.Life(2, 4));\n    emitter.addInitialize(\n      new Proton.Velocity(\n        new Proton.Span(4, 7),\n        new Proton.Span(0, 360),\n        \"polar\"\n      )\n    );\n    emitter.addInitialize(\n      new Proton.Position(new Proton.CircleZone(width / 2, height / 2, 100))\n    );\n\n    emitter.addBehaviour(new Proton.Alpha(1, 0));\n    emitter.addBehaviour(new Proton.Scale(0.2, 1));\n    emitter.addBehaviour(this.createCustomBehaviour());\n    emitter.addBehaviour(new Proton.Color(this.colors, \"random\"));\n    emitter.emit();\n    this.proton.addEmitter(emitter);\n\n    const renderer = new Proton.CanvasRenderer(canvas);\n    this.proton.addRenderer(renderer);\n  }\n\n  createCustomBehaviour() {\n    const f = 10 * 100;\n    return {\n      initialize: function(particle) {\n        particle.f = new Proton.Vector2D(0, 0);\n      },\n      applyBehaviour: particle => {\n        let length = particle.v.length() / 1000;\n        let gradient = particle.v.getGradient();\n        gradient += 3.14 / 2;\n\n        particle.f.x = f * length * Math.cos(gradient);\n        particle.f.y = f * length * Math.sin(gradient);\n        particle.a.add(particle.f);\n      }\n    };\n  }\n\n  renderProton() {\n    this.proton && this.proton.update();\n  }\n\n  render() {\n    return (\n      <Canvas bg={this.props.bg}\n        globalCompositeOperation=\"xor\"\n        onCanvasInited={this.onCanvasInited.bind(this)}\n        onResize={this.onResize.bind(this)}\n      />\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Rand from \"./utils/Rand.js\";\nimport Ball from \"./particles/Ball.jsx\";\nimport Color from \"./particles/Color.jsx\";\nimport Custom from \"./particles/Custom.jsx\";\nimport Lines from \"./particles/Lines.jsx\";\nimport Thick from \"./particles/Thick.jsx\";\nimport Square from \"./particles/Square.jsx\";\nimport Cobweb from \"./particles/Cobweb.jsx\";\nimport Circle from \"./particles/Circle.jsx\";\nimport Tadpole from \"./particles/Tadpole.jsx\";\nimport Polygon from \"./particles/Polygon.jsx\";\nimport Fountain from \"./particles/Fountain.jsx\";\n\nexport default class ParticlesBg extends Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  getRandom() {\n    const { num, bg, color } = this.props;\n\n    // Code source from here, thanks author\n    // https://github.com/drawcall/Proton/blob/gh-pages/source/src/utils/Rand.js\n    if (!this.random) {\n      this.random = new Rand();\n      this.random.set(0.25, <Color num={num} bg={bg} color={color} />);\n      this.random.set(0.2, <Ball num={num} bg={bg} color={color} />);\n      this.random.set(0.2, <Lines num={num} bg={bg} color={color} />);\n      this.random.set(0.16, <Thick num={num} bg={bg} color={color} />);\n      this.random.set(0.18, <Circle num={num} bg={bg} color={color} />);\n      this.random.set(0.04, <Cobweb num={num} bg={bg} color={color} />);\n      this.random.set(0.1, <Polygon num={num} bg={bg} color={color} />);\n      this.random.set(0.08, <Square num={num} bg={bg} color={color} />);\n      this.random.set(0.18, <Tadpole num={num} bg={bg} color={color} />);\n      this.random.set(0.15, <Fountain num={num} bg={bg} color={color} />);\n    }\n    return this.random.getResult();\n  }\n\n  getBgParticles() {\n    const { type, num, bg, color, config } = this.props;\n\n    let particles;\n    switch (String(type).toLowerCase()) {\n      case \"color\":\n        particles = <Color num={num} bg={bg} color={color} />;\n        break;\n      case \"ball\":\n        particles = <Ball num={num} bg={bg} color={color} />;\n        break;\n      case \"lines\":\n        particles = <Lines num={num} bg={bg} color={color} />;\n        break;\n      case \"thick\":\n        particles = <Thick num={num} bg={bg} color={color} />;\n        break;\n      case \"circle\":\n        particles = <Circle num={num} bg={bg} color={color} />;\n        break;\n      case \"cobweb\":\n        particles = <Cobweb num={num} bg={bg} color={color} />;\n        break;\n      case \"polygon\":\n        particles = <Polygon num={num} bg={bg} color={color} />;\n        break;\n      case \"square\":\n        particles = <Square num={num} bg={bg} color={color} />;\n        break;\n      case \"tadpole\":\n        particles = <Tadpole num={num} bg={bg} color={color} />;\n        break;\n      case \"fountain\":\n        particles = <Fountain num={num} bg={bg} color={color} />;\n        break;\n      case \"custom\":\n        particles = <Custom bg={bg} config={config} />;\n        break;\n      case \"random\":\n        particles = this.getRandom(num);\n        break;\n\n      default:\n        particles = <Color num={num} bg={bg} color={color} />;\n        break;\n    }\n\n    return particles;\n  }\n\n  render() {\n    const particles = this.getBgParticles();\n    return <React.Fragment>{particles}</React.Fragment>;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}