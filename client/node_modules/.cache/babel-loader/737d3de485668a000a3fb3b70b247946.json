{"ast":null,"code":"/**\n *\n * @namespace faker.address\n */\nfunction Address(faker) {\n  var f = faker.fake,\n      Helpers = faker.helpers;\n  /**\n   * Generates random zipcode from format. If format is not specified, the\n   * locale's zip format is used.\n   *\n   * @method faker.address.zipCode\n   * @param {String} format\n   */\n\n  this.zipCode = function (format) {\n    // if zip format is not specified, use the zip format defined for the locale\n    if (typeof format === 'undefined') {\n      var localeFormat = faker.definitions.address.postcode;\n\n      if (typeof localeFormat === 'string') {\n        format = localeFormat;\n      } else {\n        format = faker.random.arrayElement(localeFormat);\n      }\n    }\n\n    return Helpers.replaceSymbols(format);\n  };\n  /**\n   * Generates a random localized city name. The format string can contain any\n   * method provided by faker wrapped in `{{}}`, e.g. `{{name.firstName}}` in\n   * order to build the city name.\n   *\n   * If no format string is provided one of the following is randomly used:\n   * \n   * * `{{address.cityPrefix}} {{name.firstName}}{{address.citySuffix}}`\n   * * `{{address.cityPrefix}} {{name.firstName}}`\n   * * `{{name.firstName}}{{address.citySuffix}}`\n   * * `{{name.lastName}}{{address.citySuffix}}`\n   *\n   * @method faker.address.city\n   * @param {String} format\n   */\n\n\n  this.city = function (format) {\n    var formats = ['{{address.cityPrefix}} {{name.firstName}}{{address.citySuffix}}', '{{address.cityPrefix}} {{name.firstName}}', '{{name.firstName}}{{address.citySuffix}}', '{{name.lastName}}{{address.citySuffix}}'];\n\n    if (typeof format !== \"number\") {\n      format = faker.random.number(formats.length - 1);\n    }\n\n    return f(formats[format]);\n  };\n  /**\n   * Return a random localized city prefix\n   * @method faker.address.cityPrefix\n   */\n\n\n  this.cityPrefix = function () {\n    return faker.random.arrayElement(faker.definitions.address.city_prefix);\n  };\n  /**\n   * Return a random localized city suffix\n   *\n   * @method faker.address.citySuffix\n   */\n\n\n  this.citySuffix = function () {\n    return faker.random.arrayElement(faker.definitions.address.city_suffix);\n  };\n  /**\n   * Returns a random localized street name\n   *\n   * @method faker.address.streetName\n   */\n\n\n  this.streetName = function () {\n    var result;\n    var suffix = faker.address.streetSuffix();\n\n    if (suffix !== \"\") {\n      suffix = \" \" + suffix;\n    }\n\n    switch (faker.random.number(1)) {\n      case 0:\n        result = faker.name.lastName() + suffix;\n        break;\n\n      case 1:\n        result = faker.name.firstName() + suffix;\n        break;\n    }\n\n    return result;\n  }; //\n  // TODO: change all these methods that accept a boolean to instead accept an options hash.\n  //\n\n  /**\n   * Returns a random localized street address\n   *\n   * @method faker.address.streetAddress\n   * @param {Boolean} useFullAddress\n   */\n\n\n  this.streetAddress = function (useFullAddress) {\n    if (useFullAddress === undefined) {\n      useFullAddress = false;\n    }\n\n    var address = \"\";\n\n    switch (faker.random.number(2)) {\n      case 0:\n        address = Helpers.replaceSymbolWithNumber(\"#####\") + \" \" + faker.address.streetName();\n        break;\n\n      case 1:\n        address = Helpers.replaceSymbolWithNumber(\"####\") + \" \" + faker.address.streetName();\n        break;\n\n      case 2:\n        address = Helpers.replaceSymbolWithNumber(\"###\") + \" \" + faker.address.streetName();\n        break;\n    }\n\n    return useFullAddress ? address + \" \" + faker.address.secondaryAddress() : address;\n  };\n  /**\n   * streetSuffix\n   *\n   * @method faker.address.streetSuffix\n   */\n\n\n  this.streetSuffix = function () {\n    return faker.random.arrayElement(faker.definitions.address.street_suffix);\n  };\n  /**\n   * streetPrefix\n   *\n   * @method faker.address.streetPrefix\n   */\n\n\n  this.streetPrefix = function () {\n    return faker.random.arrayElement(faker.definitions.address.street_prefix);\n  };\n  /**\n   * secondaryAddress\n   *\n   * @method faker.address.secondaryAddress\n   */\n\n\n  this.secondaryAddress = function () {\n    return Helpers.replaceSymbolWithNumber(faker.random.arrayElement(['Apt. ###', 'Suite ###']));\n  };\n  /**\n   * county\n   *\n   * @method faker.address.county\n   */\n\n\n  this.county = function () {\n    return faker.random.arrayElement(faker.definitions.address.county);\n  };\n  /**\n   * country\n   *\n   * @method faker.address.country\n   */\n\n\n  this.country = function () {\n    return faker.random.arrayElement(faker.definitions.address.country);\n  };\n  /**\n   * countryCode\n   *\n   * @method faker.address.countryCode\n   */\n\n\n  this.countryCode = function () {\n    return faker.random.arrayElement(faker.definitions.address.country_code);\n  };\n  /**\n   * state\n   *\n   * @method faker.address.state\n   * @param {Boolean} useAbbr\n   */\n\n\n  this.state = function (useAbbr) {\n    return faker.random.arrayElement(faker.definitions.address.state);\n  };\n  /**\n   * stateAbbr\n   *\n   * @method faker.address.stateAbbr\n   */\n\n\n  this.stateAbbr = function () {\n    return faker.random.arrayElement(faker.definitions.address.state_abbr);\n  };\n  /**\n   * latitude\n   *\n   * @method faker.address.latitude\n   */\n\n\n  this.latitude = function () {\n    return (faker.random.number(180 * 10000) / 10000.0 - 90.0).toFixed(4);\n  };\n  /**\n   * longitude\n   *\n   * @method faker.address.longitude\n   */\n\n\n  this.longitude = function () {\n    return (faker.random.number(360 * 10000) / 10000.0 - 180.0).toFixed(4);\n  };\n\n  return this;\n}\n\nmodule.exports = Address;","map":{"version":3,"sources":["C:/Users/david/react/RateCourses/client/node_modules/faker/lib/address.js"],"names":["Address","faker","f","fake","Helpers","helpers","zipCode","format","localeFormat","definitions","address","postcode","random","arrayElement","replaceSymbols","city","formats","number","length","cityPrefix","city_prefix","citySuffix","city_suffix","streetName","result","suffix","streetSuffix","name","lastName","firstName","streetAddress","useFullAddress","undefined","replaceSymbolWithNumber","secondaryAddress","street_suffix","streetPrefix","street_prefix","county","country","countryCode","country_code","state","useAbbr","stateAbbr","state_abbr","latitude","toFixed","longitude","module","exports"],"mappings":"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","sourcesContent":["/**\n *\n * @namespace faker.address\n */\nfunction Address (faker) {\n  var f = faker.fake,\n      Helpers = faker.helpers;\n\n  /**\n   * Generates random zipcode from format. If format is not specified, the\n   * locale's zip format is used.\n   *\n   * @method faker.address.zipCode\n   * @param {String} format\n   */\n  this.zipCode = function(format) {\n    // if zip format is not specified, use the zip format defined for the locale\n    if (typeof format === 'undefined') {\n      var localeFormat = faker.definitions.address.postcode;\n      if (typeof localeFormat === 'string') {\n        format = localeFormat;\n      } else {\n        format = faker.random.arrayElement(localeFormat);\n      }\n    }\n    return Helpers.replaceSymbols(format);\n  }\n\n  /**\n   * Generates a random localized city name. The format string can contain any\n   * method provided by faker wrapped in `{{}}`, e.g. `{{name.firstName}}` in\n   * order to build the city name.\n   *\n   * If no format string is provided one of the following is randomly used:\n   * \n   * * `{{address.cityPrefix}} {{name.firstName}}{{address.citySuffix}}`\n   * * `{{address.cityPrefix}} {{name.firstName}}`\n   * * `{{name.firstName}}{{address.citySuffix}}`\n   * * `{{name.lastName}}{{address.citySuffix}}`\n   *\n   * @method faker.address.city\n   * @param {String} format\n   */\n  this.city = function (format) {\n    var formats = [\n      '{{address.cityPrefix}} {{name.firstName}}{{address.citySuffix}}',\n      '{{address.cityPrefix}} {{name.firstName}}',\n      '{{name.firstName}}{{address.citySuffix}}',\n      '{{name.lastName}}{{address.citySuffix}}'\n    ];\n\n    if (typeof format !== \"number\") {\n      format = faker.random.number(formats.length - 1);\n    }\n\n    return f(formats[format]);\n\n  }\n\n  /**\n   * Return a random localized city prefix\n   * @method faker.address.cityPrefix\n   */\n  this.cityPrefix = function () {\n    return faker.random.arrayElement(faker.definitions.address.city_prefix);\n  }\n\n  /**\n   * Return a random localized city suffix\n   *\n   * @method faker.address.citySuffix\n   */\n  this.citySuffix = function () {\n    return faker.random.arrayElement(faker.definitions.address.city_suffix);\n  }\n\n  /**\n   * Returns a random localized street name\n   *\n   * @method faker.address.streetName\n   */\n  this.streetName = function () {\n      var result;\n      var suffix = faker.address.streetSuffix();\n      if (suffix !== \"\") {\n          suffix = \" \" + suffix\n      }\n\n      switch (faker.random.number(1)) {\n      case 0:\n          result = faker.name.lastName() + suffix;\n          break;\n      case 1:\n          result = faker.name.firstName() + suffix;\n          break;\n      }\n      return result;\n  }\n\n  //\n  // TODO: change all these methods that accept a boolean to instead accept an options hash.\n  //\n  /**\n   * Returns a random localized street address\n   *\n   * @method faker.address.streetAddress\n   * @param {Boolean} useFullAddress\n   */\n  this.streetAddress = function (useFullAddress) {\n      if (useFullAddress === undefined) { useFullAddress = false; }\n      var address = \"\";\n      switch (faker.random.number(2)) {\n      case 0:\n          address = Helpers.replaceSymbolWithNumber(\"#####\") + \" \" + faker.address.streetName();\n          break;\n      case 1:\n          address = Helpers.replaceSymbolWithNumber(\"####\") +  \" \" + faker.address.streetName();\n          break;\n      case 2:\n          address = Helpers.replaceSymbolWithNumber(\"###\") + \" \" + faker.address.streetName();\n          break;\n      }\n      return useFullAddress ? (address + \" \" + faker.address.secondaryAddress()) : address;\n  }\n\n  /**\n   * streetSuffix\n   *\n   * @method faker.address.streetSuffix\n   */\n  this.streetSuffix = function () {\n      return faker.random.arrayElement(faker.definitions.address.street_suffix);\n  }\n  \n  /**\n   * streetPrefix\n   *\n   * @method faker.address.streetPrefix\n   */\n  this.streetPrefix = function () {\n      return faker.random.arrayElement(faker.definitions.address.street_prefix);\n  }\n\n  /**\n   * secondaryAddress\n   *\n   * @method faker.address.secondaryAddress\n   */\n  this.secondaryAddress = function () {\n      return Helpers.replaceSymbolWithNumber(faker.random.arrayElement(\n          [\n              'Apt. ###',\n              'Suite ###'\n          ]\n      ));\n  }\n\n  /**\n   * county\n   *\n   * @method faker.address.county\n   */\n  this.county = function () {\n    return faker.random.arrayElement(faker.definitions.address.county);\n  }\n\n  /**\n   * country\n   *\n   * @method faker.address.country\n   */\n  this.country = function () {\n    return faker.random.arrayElement(faker.definitions.address.country);\n  }\n\n  /**\n   * countryCode\n   *\n   * @method faker.address.countryCode\n   */\n  this.countryCode = function () {\n    return faker.random.arrayElement(faker.definitions.address.country_code);\n  }\n\n  /**\n   * state\n   *\n   * @method faker.address.state\n   * @param {Boolean} useAbbr\n   */\n  this.state = function (useAbbr) {\n      return faker.random.arrayElement(faker.definitions.address.state);\n  }\n\n  /**\n   * stateAbbr\n   *\n   * @method faker.address.stateAbbr\n   */\n  this.stateAbbr = function () {\n      return faker.random.arrayElement(faker.definitions.address.state_abbr);\n  }\n\n  /**\n   * latitude\n   *\n   * @method faker.address.latitude\n   */\n  this.latitude = function () {\n      return (faker.random.number(180 * 10000) / 10000.0 - 90.0).toFixed(4);\n  }\n\n  /**\n   * longitude\n   *\n   * @method faker.address.longitude\n   */\n  this.longitude = function () {\n      return (faker.random.number(360 * 10000) / 10000.0 - 180.0).toFixed(4);\n  }\n  \n  return this;\n}\n\n\nmodule.exports = Address;\n"]},"metadata":{},"sourceType":"script"}