{"ast":null,"code":"import React from\"react\";import{makeStyles}from\"@material-ui/core/styles\";import Typography from\"@material-ui/core/Typography\";import Slider from\"@material-ui/core/Slider\";var DiscreteSlider=function DiscreteSlider(props){var useStyles=makeStyles(function(theme){return{root:{width:300},margin:{height:theme.spacing(2)}};});function toNumberString(num){console.log(num);if(Number.isInteger(num)){return num+\".0\";}else{return num.toString();}}var marks=[{value:1,label:\"Hard\"},{value:2,label:\"\"},{value:3,label:\"Average\"},{value:4,label:\"\"},{value:5,label:\"Total Bird\"}];function valuetext(value){return\"\".concat(value);}var classes=useStyles();var handleSliderChange=function handleSliderChange(event,newValue){// Here, what we want to do, call a deeply nested call back function, which then notifies all the components of the new time\nprops.Difficulty(newValue);};return/*#__PURE__*/React.createElement(\"div\",{className:classes.root},/*#__PURE__*/React.createElement(Slider,{defaultValue:function defaultValue(){return props.dval!=null?props.dval:1;},getAriaValueText:valuetext,\"aria-labelledby\":\"discrete-slider-custom\",step:0.5,max:5,min:1,onChange:handleSliderChange,valueLabelDisplay:\"auto\",marks:marks}));};export default DiscreteSlider;","map":{"version":3,"sources":["C:/Users/david/react/RateCourses/client/src/Components/Scale.js"],"names":["React","makeStyles","Typography","Slider","DiscreteSlider","props","useStyles","theme","root","width","margin","height","spacing","toNumberString","num","console","log","Number","isInteger","toString","marks","value","label","valuetext","classes","handleSliderChange","event","newValue","Difficulty","dval"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,UAAT,KAA2B,0BAA3B,CACA,MAAOC,CAAAA,UAAP,KAAuB,8BAAvB,CACA,MAAOC,CAAAA,MAAP,KAAmB,0BAAnB,CAKA,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,KAAD,CAAW,CAC9B,GAAMC,CAAAA,SAAS,CAAGL,UAAU,CAAC,SAAAM,KAAK,QAAK,CACnCC,IAAI,CAAE,CACJC,KAAK,CAAE,GADH,CAD6B,CAInCC,MAAM,CAAE,CACNC,MAAM,CAAEJ,KAAK,CAACK,OAAN,CAAc,CAAd,CADF,CAJ2B,CAAL,EAAN,CAA5B,CAcE,QAASC,CAAAA,cAAT,CAAwBC,GAAxB,CAA6B,CAC3BC,OAAO,CAACC,GAAR,CAAYF,GAAZ,EACA,GAAIG,MAAM,CAACC,SAAP,CAAiBJ,GAAjB,CAAJ,CAA2B,CACzB,MAAOA,CAAAA,GAAG,CAAG,IAAb,CACD,CAFD,IAEO,CACL,MAAOA,CAAAA,GAAG,CAACK,QAAJ,EAAP,CACD,CACF,CAMD,GAAMC,CAAAA,KAAK,CAAG,CACZ,CACEC,KAAK,CAAE,CADT,CAEEC,KAAK,CAAE,MAFT,CADY,CAKZ,CACED,KAAK,CAAE,CADT,CAEEC,KAAK,CAAE,EAFT,CALY,CASZ,CACED,KAAK,CAAE,CADT,CAEEC,KAAK,CAAE,SAFT,CATY,CAaZ,CACED,KAAK,CAAE,CADT,CAEEC,KAAK,CAAE,EAFT,CAbY,CAiBZ,CACED,KAAK,CAAE,CADT,CAEEC,KAAK,CAAE,YAFT,CAjBY,CAAd,CA0BF,QAASC,CAAAA,SAAT,CAAmBF,KAAnB,CAA0B,CACtB,gBAAUA,KAAV,EACD,CAEH,GAAMG,CAAAA,OAAO,CAAGlB,SAAS,EAAzB,CACA,GAAMmB,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACC,KAAD,CAAQC,QAAR,CAAoB,CAC/C;AACAtB,KAAK,CAACuB,UAAN,CAAiBD,QAAjB,EACD,CAHC,CAKF,mBACE,2BAAK,SAAS,CAAEH,OAAO,CAAChB,IAAxB,eACE,oBAAC,MAAD,EACE,YAAY,CAAE,8BAAKH,CAAAA,KAAK,CAACwB,IAAN,EAAY,IAAZ,CAAkBxB,KAAK,CAACwB,IAAxB,CAA8B,CAAnC,EADhB,CAEE,gBAAgB,CAAEN,SAFpB,CAGE,kBAAgB,wBAHlB,CAIE,IAAI,CAAE,GAJR,CAKE,GAAG,CAAE,CALP,CAME,GAAG,CAAE,CANP,CAOE,QAAQ,CAAEE,kBAPZ,CAQE,iBAAiB,CAAC,MARpB,CASE,KAAK,CAAEL,KATT,EADF,CADF,CAeD,CA/ED,CAkFA,cAAehB,CAAAA,cAAf","sourcesContent":["import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\n\r\n\r\n\r\n\r\nconst DiscreteSlider = (props) => {\r\n    const useStyles = makeStyles(theme => ({\r\n        root: {\r\n          width: 300\r\n        },\r\n        margin: {\r\n          height: theme.spacing(2)\r\n        }\r\n      }));\r\n\r\n\r\n\r\n     \r\n      \r\n\r\n      function toNumberString(num) { \r\n        console.log(num)\r\n        if (Number.isInteger(num)) { \r\n          return num + \".0\"\r\n        } else {\r\n          return num.toString(); \r\n        }\r\n      }\r\n      \r\n      \r\n      \r\n      \r\n      \r\n      const marks = [\r\n        {\r\n          value: 1,\r\n          label: \"Hard\"\r\n        },\r\n        {\r\n          value: 2,\r\n          label: \"\"\r\n        },\r\n        {\r\n          value: 3,\r\n          label: \"Average\"\r\n        },\r\n        {\r\n          value: 4,\r\n          label: \"\"\r\n        },\r\n        {\r\n          value: 5,\r\n          label: \"Total Bird\"\r\n        }\r\n      ];\r\n      \r\n\r\n\r\n\r\n    function valuetext(value) {\r\n        return `${value}`;\r\n      }\r\n    \r\n    const classes = useStyles();\r\n    const handleSliderChange = (event, newValue)=> {\r\n    // Here, what we want to do, call a deeply nested call back function, which then notifies all the components of the new time\r\n    props.Difficulty(newValue); \r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Slider\r\n        defaultValue={()=> props.dval!=null? props.dval: 1   }\r\n        getAriaValueText={valuetext}\r\n        aria-labelledby=\"discrete-slider-custom\"\r\n        step={0.5}\r\n        max={5}\r\n        min={1}\r\n        onChange={handleSliderChange}\r\n        valueLabelDisplay=\"auto\"\r\n        marks={marks}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default DiscreteSlider;"]},"metadata":{},"sourceType":"module"}